
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e94  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800203c  0800203c  0001203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a4  080021a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080021a4  080021a4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a4  080021a4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080021ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000007c  08002228  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000010c  08002228  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a7a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ab9  00000000  00000000  00023b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002b0  00000000  00000000  000245e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000248  00000000  00000000  00024890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039c1  00000000  00000000  00024ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000027b8  00000000  00000000  00028499  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c3e1  00000000  00000000  0002ac51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00037032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f78  00000000  00000000  000370b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08002024 	.word	0x08002024

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000080 	.word	0x20000080
 80001e4:	08002024 	.word	0x08002024

080001e8 <GPIO_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t enOrDi){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp. register
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

	//check to see if it's already enabled?
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff0c 	bl	80001e8 <GPIO_PeriClockControl>

	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d820      	bhi.n	800041a <GPIO_Init+0x62>
		//this is non-interrupt mode
		//Shift the mode the pin number of bits. Multiple by 2 as a single pin takes two bits
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	791b      	ldrb	r3, [r3, #4]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	fa02 f303 	lsl.w	r3, r2, r3
 80003e8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791b      	ldrb	r3, [r3, #4]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	2103      	movs	r1, #3
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	43db      	mvns	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	400a      	ands	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6819      	ldr	r1, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	430a      	orrs	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	e0dd      	b.n	80005d6 <GPIO_Init+0x21e>
	} else {
		// if the Pin Mode is an interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d117      	bne.n	8000452 <GPIO_Init+0x9a>
			//NOTE: clearing of target bits before setting not required because only 1 bit is used
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000422:	4b4a      	ldr	r3, [pc, #296]	; (800054c <GPIO_Init+0x194>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4611      	mov	r1, r2
 8000432:	4a46      	ldr	r2, [pc, #280]	; (800054c <GPIO_Init+0x194>)
 8000434:	430b      	orrs	r3, r1
 8000436:	60d3      	str	r3, [r2, #12]
			// clear the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <GPIO_Init+0x194>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	43d2      	mvns	r2, r2
 8000448:	4611      	mov	r1, r2
 800044a:	4a40      	ldr	r2, [pc, #256]	; (800054c <GPIO_Init+0x194>)
 800044c:	400b      	ands	r3, r1
 800044e:	6093      	str	r3, [r2, #8]
 8000450:	e035      	b.n	80004be <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	2b05      	cmp	r3, #5
 8000458:	d117      	bne.n	800048a <GPIO_Init+0xd2>
			// 2. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045a:	4b3c      	ldr	r3, [pc, #240]	; (800054c <GPIO_Init+0x194>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	4611      	mov	r1, r2
 800046a:	4a38      	ldr	r2, [pc, #224]	; (800054c <GPIO_Init+0x194>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
			// clear the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	4b36      	ldr	r3, [pc, #216]	; (800054c <GPIO_Init+0x194>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	43d2      	mvns	r2, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a32      	ldr	r2, [pc, #200]	; (800054c <GPIO_Init+0x194>)
 8000484:	400b      	ands	r3, r1
 8000486:	60d3      	str	r3, [r2, #12]
 8000488:	e019      	b.n	80004be <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	2b06      	cmp	r3, #6
 8000490:	d115      	bne.n	80004be <GPIO_Init+0x106>
			// 3. Configure FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000492:	4b2e      	ldr	r3, [pc, #184]	; (800054c <GPIO_Init+0x194>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7912      	ldrb	r2, [r2, #4]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a2a      	ldr	r2, [pc, #168]	; (800054c <GPIO_Init+0x194>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <GPIO_Init+0x194>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a24      	ldr	r2, [pc, #144]	; (800054c <GPIO_Init+0x194>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
		}
		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 80004be:	4b24      	ldr	r3, [pc, #144]	; (8000550 <GPIO_Init+0x198>)
 80004c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c2:	4a23      	ldr	r2, [pc, #140]	; (8000550 <GPIO_Init+0x198>)
 80004c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c8:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t extiCrRegIndex, extiCrPinPos, portcode;
		extiCrRegIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	74fb      	strb	r3, [r7, #19]
		extiCrPinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	f003 0303 	and.w	r3, r3, #3
 80004da:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <GPIO_Init+0x19c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d046      	beq.n	8000574 <GPIO_Init+0x1bc>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <GPIO_Init+0x1a0>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d02b      	beq.n	8000548 <GPIO_Init+0x190>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <GPIO_Init+0x1a4>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d024      	beq.n	8000544 <GPIO_Init+0x18c>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <GPIO_Init+0x1a8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d01d      	beq.n	8000540 <GPIO_Init+0x188>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <GPIO_Init+0x1ac>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d016      	beq.n	800053c <GPIO_Init+0x184>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <GPIO_Init+0x1b0>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d00f      	beq.n	8000538 <GPIO_Init+0x180>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a13      	ldr	r2, [pc, #76]	; (800056c <GPIO_Init+0x1b4>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d008      	beq.n	8000534 <GPIO_Init+0x17c>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <GPIO_Init+0x1b8>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d101      	bne.n	8000530 <GPIO_Init+0x178>
 800052c:	2307      	movs	r3, #7
 800052e:	e022      	b.n	8000576 <GPIO_Init+0x1be>
 8000530:	2300      	movs	r3, #0
 8000532:	e020      	b.n	8000576 <GPIO_Init+0x1be>
 8000534:	2306      	movs	r3, #6
 8000536:	e01e      	b.n	8000576 <GPIO_Init+0x1be>
 8000538:	2305      	movs	r3, #5
 800053a:	e01c      	b.n	8000576 <GPIO_Init+0x1be>
 800053c:	2304      	movs	r3, #4
 800053e:	e01a      	b.n	8000576 <GPIO_Init+0x1be>
 8000540:	2303      	movs	r3, #3
 8000542:	e018      	b.n	8000576 <GPIO_Init+0x1be>
 8000544:	2302      	movs	r3, #2
 8000546:	e016      	b.n	8000576 <GPIO_Init+0x1be>
 8000548:	2301      	movs	r3, #1
 800054a:	e014      	b.n	8000576 <GPIO_Init+0x1be>
 800054c:	40013c00 	.word	0x40013c00
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000
 8000558:	40020400 	.word	0x40020400
 800055c:	40020800 	.word	0x40020800
 8000560:	40020c00 	.word	0x40020c00
 8000564:	40021000 	.word	0x40021000
 8000568:	40021400 	.word	0x40021400
 800056c:	40021800 	.word	0x40021800
 8000570:	40021c00 	.word	0x40021c00
 8000574:	2300      	movs	r3, #0
 8000576:	747b      	strb	r3, [r7, #17]
		temp = portcode << (4 * extiCrPinPos);
 8000578:	7c7a      	ldrb	r2, [r7, #17]
 800057a:	7cbb      	ldrb	r3, [r7, #18]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
		SYSCFG->EXTICR[extiCrRegIndex] &= ~(0xF <<(4 * extiCrPinPos)); //clearing
 8000584:	4a65      	ldr	r2, [pc, #404]	; (800071c <GPIO_Init+0x364>)
 8000586:	7cfb      	ldrb	r3, [r7, #19]
 8000588:	3302      	adds	r3, #2
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	7cbb      	ldrb	r3, [r7, #18]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	210f      	movs	r1, #15
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	495f      	ldr	r1, [pc, #380]	; (800071c <GPIO_Init+0x364>)
 800059e:	7cfb      	ldrb	r3, [r7, #19]
 80005a0:	4002      	ands	r2, r0
 80005a2:	3302      	adds	r3, #2
 80005a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[extiCrRegIndex] |= temp; //setting
 80005a8:	4a5c      	ldr	r2, [pc, #368]	; (800071c <GPIO_Init+0x364>)
 80005aa:	7cfb      	ldrb	r3, [r7, #19]
 80005ac:	3302      	adds	r3, #2
 80005ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005b2:	485a      	ldr	r0, [pc, #360]	; (800071c <GPIO_Init+0x364>)
 80005b4:	7cfb      	ldrb	r3, [r7, #19]
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	3302      	adds	r3, #2
 80005bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// 3. enable exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b57      	ldr	r3, [pc, #348]	; (8000720 <GPIO_Init+0x368>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a53      	ldr	r2, [pc, #332]	; (8000720 <GPIO_Init+0x368>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6013      	str	r3, [r2, #0]
	}

	temp = 0; //is this needed?
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

	// 2. Configure the pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	79db      	ldrb	r3, [r3, #7]
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68da      	ldr	r2, [r3, #12]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	2103      	movs	r1, #3
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	400a      	ands	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68d9      	ldr	r1, [r3, #12]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	430a      	orrs	r2, r1
 8000618:	60da      	str	r2, [r3, #12]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) ||
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	795b      	ldrb	r3, [r3, #5]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d003      	beq.n	800062a <GPIO_Init+0x272>
		(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	795b      	ldrb	r3, [r3, #5]
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) ||
 8000626:	2b02      	cmp	r3, #2
 8000628:	d13d      	bne.n	80006a6 <GPIO_Init+0x2ee>
		// 3. Configure the speed
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	799b      	ldrb	r3, [r3, #6]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	2103      	movs	r1, #3
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	4619      	mov	r1, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	400a      	ands	r2, r1
 8000658:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6899      	ldr	r1, [r3, #8]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	430a      	orrs	r2, r1
 8000668:	609a      	str	r2, [r3, #8]

		// 4. Configure the optype if mode is output or analog
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7a1b      	ldrb	r3, [r3, #8]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2301      	movs	r3, #1
 8000688:	408b      	lsls	r3, r1
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6859      	ldr	r1, [r3, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	605a      	str	r2, [r3, #4]
	}

	// 5. Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	795b      	ldrb	r3, [r3, #5]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d132      	bne.n	8000714 <GPIO_Init+0x35c>
		//configure the alternate function registers
		uint8_t altRegIndex, altRegPinPos;

		altRegIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // pin >8 will return 1, else 0
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	743b      	strb	r3, [r7, #16]
		altRegPinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	73fb      	strb	r3, [r7, #15]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * altRegPinPos);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7a5b      	ldrb	r3, [r3, #9]
 80006c4:	461a      	mov	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[altRegIndex] &= ~(0xF << (4 * altRegPinPos)); //clearing
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	7c3a      	ldrb	r2, [r7, #16]
 80006d6:	3208      	adds	r2, #8
 80006d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	220f      	movs	r2, #15
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7c3a      	ldrb	r2, [r7, #16]
 80006f0:	4001      	ands	r1, r0
 80006f2:	3208      	adds	r2, #8
 80006f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[altRegIndex] |= temp; //setting
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	7c3a      	ldrb	r2, [r7, #16]
 80006fe:	3208      	adds	r2, #8
 8000700:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	7c3a      	ldrb	r2, [r7, #16]
 800070a:	6979      	ldr	r1, [r7, #20]
 800070c:	4301      	orrs	r1, r0
 800070e:	3208      	adds	r2, #8
 8000710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013800 	.word	0x40013800
 8000720:	40013c00 	.word	0x40013c00

08000724 <GPIO_ReadFromInputPin>:
 *
 * @return				- PIN_SET or PIN_RESET ( 0 or 1)
 *
 * @Note				- Uses the Input Data Register to retrieve the value
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t* pGPIOx, uint8_t pinNumber){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
	//Note: STM code uses a 16 bit value for pin and a simple & (no bit shift needed)
	uint8_t value;
	uint16_t GPIO_value = (1 << pinNumber);
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	81bb      	strh	r3, [r7, #12]
	if (pGPIOx->IDR & GPIO_value){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	691a      	ldr	r2, [r3, #16]
 800073e:	89bb      	ldrh	r3, [r7, #12]
 8000740:	4013      	ands	r3, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <GPIO_ReadFromInputPin+0x28>
		value = SET;
 8000746:	2301      	movs	r3, #1
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	e001      	b.n	8000750 <GPIO_ReadFromInputPin+0x2c>
	} else {
		value = RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
	}
	return value;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <I2C_GenerateStartCondition>:
 *
 * @return				- none
 *
 * @Note				- none
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <I2C_ExecuteAddressPhase>:
 *
 * @return				- none
 *
 * @Note				- none
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr, uint8_t readOrWrite){
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	70fb      	strb	r3, [r7, #3]
 8000786:	4613      	mov	r3, r2
 8000788:	70bb      	strb	r3, [r7, #2]
	//make space for the R/nW bit
	slaveAddr = slaveAddr << 1;
 800078a:	78fb      	ldrb	r3, [r7, #3]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	70fb      	strb	r3, [r7, #3]
	if (readOrWrite == I2C_READ){
 8000790:	78bb      	ldrb	r3, [r7, #2]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d104      	bne.n	80007a0 <I2C_ExecuteAddressPhase+0x26>
		slaveAddr |= 1;//slave address is address plus Read bit (1)
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	70fb      	strb	r3, [r7, #3]
 800079e:	e003      	b.n	80007a8 <I2C_ExecuteAddressPhase+0x2e>
	} else {
		slaveAddr &= ~(1);//slave address is address plus Write bit	(0)
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	f023 0301 	bic.w	r3, r3, #1
 80007a6:	70fb      	strb	r3, [r7, #3]
	}
	pI2Cx->DR = slaveAddr;
 80007a8:	78fa      	ldrb	r2, [r7, #3]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	611a      	str	r2, [r3, #16]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <I2C_ClearADDRFlag>:
 * @return				- none
 *
 * @Note				- why not use the GetFlagStatus function? we don't need a specific flag
 *						- because we read SR1 before we call this, could this just read SR2? do we need a function?
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2Cx->SR1;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;//type cast to void so the compiler doesn't throw and unused warning
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
	...

080007d8 <I2C_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_PeriClockControl(I2C_RegDef_t* pI2Cx, uint8_t enOrDi){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d120      	bne.n	800082c <I2C_PeriClockControl+0x54>
			if(pI2Cx == I2C1){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <I2C_PeriClockControl+0xa0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <I2C_PeriClockControl+0x28>
				I2C1_PCLK_EN();
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <I2C_PeriClockControl+0xa4>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a21      	ldr	r2, [pc, #132]	; (800087c <I2C_PeriClockControl+0xa4>)
 80007f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
				I2C2_PCLK_DI();
			} else if (pI2Cx == I2C3){
				I2C3_PCLK_DI();
			}
		}
}
 80007fe:	e035      	b.n	800086c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C2){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <I2C_PeriClockControl+0xa8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <I2C_PeriClockControl+0x3e>
				I2C2_PCLK_EN();
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <I2C_PeriClockControl+0xa4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <I2C_PeriClockControl+0xa4>)
 800080e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000814:	e02a      	b.n	800086c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C3){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <I2C_PeriClockControl+0xac>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d126      	bne.n	800086c <I2C_PeriClockControl+0x94>
				I2C3_PCLK_EN();
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <I2C_PeriClockControl+0xa4>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <I2C_PeriClockControl+0xa4>)
 8000824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
}
 800082a:	e01f      	b.n	800086c <I2C_PeriClockControl+0x94>
			if(pI2Cx == I2C1){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <I2C_PeriClockControl+0xa0>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <I2C_PeriClockControl+0x6a>
				I2C1_PCLK_DI();
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <I2C_PeriClockControl+0xa4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a10      	ldr	r2, [pc, #64]	; (800087c <I2C_PeriClockControl+0xa4>)
 800083a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000840:	e014      	b.n	800086c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C2){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <I2C_PeriClockControl+0xa8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <I2C_PeriClockControl+0x80>
				I2C2_PCLK_DI();
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <I2C_PeriClockControl+0xa4>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <I2C_PeriClockControl+0xa4>)
 8000850:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000856:	e009      	b.n	800086c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C3){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <I2C_PeriClockControl+0xac>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d105      	bne.n	800086c <I2C_PeriClockControl+0x94>
				I2C3_PCLK_DI();
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <I2C_PeriClockControl+0xa4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a05      	ldr	r2, [pc, #20]	; (800087c <I2C_PeriClockControl+0xa4>)
 8000866:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40005400 	.word	0x40005400
 800087c:	40023800 	.word	0x40023800
 8000880:	40005800 	.word	0x40005800
 8000884:	40005c00 	.word	0x40005c00

08000888 <I2C_Init>:
 * @return				- none
 *
 * @Note				- I don't like the way this is done, but I'm doing it to be consistent with the course
 * 							Instead, I think the SPIConfig should hold masks
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	//enable the I2C clock
	//should I check this is already enabled?
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff9e 	bl	80007d8 <I2C_PeriClockControl>

	//disable the specific I2C (concept imitated from STM SPI generated code) I2C will be enabled when sending or receiving
	I2C_PeripheralControl(pI2CHandle->pI2Cx, DISABLE);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fbe5 	bl	8001072 <I2C_PeripheralControl>

	uint32_t tempreg = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
	//ack control bit
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle->pI2Cx->CR1 = tempreg; // equals or |=

	//configure the FREQ field of CR2
	tempreg = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;//divide by 1 MHz to get 16 (not 16 mil)
 80008b0:	f000 fc44 	bl	800113c <RCC_GetPCLK1Value>
 80008b4:	4602      	mov	r2, r0
 80008b6:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <I2C_Init+0x158>)
 80008b8:	fba3 2302 	umull	r2, r3, r3, r2
 80008bc:	0c9b      	lsrs	r3, r3, #18
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all bits except first 5
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008ce:	605a      	str	r2, [r3, #4]

	//configure the devices address
	tempreg = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1; //assuming 7-bit slave address
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4313      	orrs	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
	//if using 10-bit mode, address will not be shifted, and bit 15 of will need to be set
	tempreg |= (1 << 14); // this bit needs to be set according to RM. replace 14 with variable
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccrValue = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=  I2C_SCL_SPEED_SM){
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	4a39      	ldr	r2, [pc, #228]	; (80009e4 <I2C_Init+0x15c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d80f      	bhi.n	8000924 <I2C_Init+0x9c>
		//mode is standard mode
		ccrValue = RCC_GetPCLK1Value() / (2 *pI2CHandle->I2C_Config.I2C_SCLSpeed); // CCR = FPCLK1/2*FSCL (frequency)
 8000904:	f000 fc1a 	bl	800113c <RCC_GetPCLK1Value>
 8000908:	4602      	mov	r2, r0
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	fbb2 f3f3 	udiv	r3, r2, r3
 8000914:	817b      	strh	r3, [r7, #10]
		tempreg |= ccrValue & 0xFFF; //only use 12 bits (CCR->CCR requirement
 8000916:	897b      	ldrh	r3, [r7, #10]
 8000918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e02b      	b.n	800097c <I2C_Init+0xf4>
	} else {
		//mode is fast mode
		tempreg |= (1 << 15); //program the mode
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14); // set the duty cycle
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7a9b      	ldrb	r3, [r3, #10]
 8000930:	039b      	lsls	r3, r3, #14
 8000932:	461a      	mov	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4313      	orrs	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7a9b      	ldrb	r3, [r3, #10]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10b      	bne.n	800095a <I2C_Init+0xd2>
			ccrValue = RCC_GetPCLK1Value() / (3 *pI2CHandle->I2C_Config.I2C_SCLSpeed); // CCR = FPCLK1/3*FSCL (frequency)
 8000942:	f000 fbfb 	bl	800113c <RCC_GetPCLK1Value>
 8000946:	4601      	mov	r1, r0
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	fbb1 f3f3 	udiv	r3, r1, r3
 8000956:	817b      	strh	r3, [r7, #10]
 8000958:	e00c      	b.n	8000974 <I2C_Init+0xec>
		} else {
			ccrValue = RCC_GetPCLK1Value() / (25 *pI2CHandle->I2C_Config.I2C_SCLSpeed); // CCR = FPCLK1/25*FSCL (frequency)
 800095a:	f000 fbef 	bl	800113c <RCC_GetPCLK1Value>
 800095e:	4601      	mov	r1, r0
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	009a      	lsls	r2, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000972:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccrValue;
 8000974:	897b      	ldrh	r3, [r7, #10]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4313      	orrs	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	61da      	str	r2, [r3, #28]

	//configure TRISE
	tempreg = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=  I2C_SCL_SPEED_SM){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <I2C_Init+0x15c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d80e      	bhi.n	80009b0 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = ((RCC_GetPCLK1Value()*I2C_MAX_TRISE_SM)/1000000000U) + 1;//take into account ns
 8000992:	f000 fbd3 	bl	800113c <RCC_GetPCLK1Value>
 8000996:	4602      	mov	r2, r0
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	fb03 f302 	mul.w	r3, r3, r2
 80009a0:	0a5b      	lsrs	r3, r3, #9
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <I2C_Init+0x160>)
 80009a4:	fba2 2303 	umull	r2, r3, r2, r3
 80009a8:	09db      	lsrs	r3, r3, #7
 80009aa:	3301      	adds	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e00d      	b.n	80009cc <I2C_Init+0x144>
	} else {
		//mode is fast mode
		tempreg = ((RCC_GetPCLK1Value()*I2C_MAX_TRISE_FM)/1000000000U) + 1;// take into account ns
 80009b0:	f000 fbc4 	bl	800113c <RCC_GetPCLK1Value>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009ba:	fb03 f302 	mul.w	r3, r3, r2
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <I2C_Init+0x160>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	09db      	lsrs	r3, r3, #7
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009d6:	621a      	str	r2, [r3, #32]
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	000186a0 	.word	0x000186a0
 80009e8:	00044b83 	.word	0x00044b83

080009ec <I2C_MasterSendDataIT>:
 *
 * @return				- state of I2C peripheral
 *
 * @Note				- none
 */
uint8_t  I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t len, uint8_t slaveAddr, uint8_t repStart) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	7f1b      	ldrb	r3, [r3, #28]
 80009fe:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d03c      	beq.n	8000a80 <I2C_MasterSendDataIT+0x94>
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d039      	beq.n	8000a80 <I2C_MasterSendDataIT+0x94>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = len;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = slaveAddr;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	78fa      	ldrb	r2, [r7, #3]
 8000a22:	775a      	strb	r2, [r3, #29]
		pI2CHandle->repStart = repStart;
 8000a24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24

		//if I2C is not enabled, then enable it
		if(! ( pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_PE) ) ){
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d105      	bne.n	8000a46 <I2C_MasterSendDataIT+0x5a>
			I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fb16 	bl	8001072 <I2C_PeripheralControl>
		//Implement code to Generate START Condition
		//In course code, this is above the interrupt enables, but I moved it here just in case it succeeds before they're enabled
		//EDIT: This should be before interrupt enables because for the start condition clears the TXE flag
		//		If TXE isn't cleared before interupts are enabled,
		//		then the program will continually interrupt
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe86 	bl	800075c <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a5e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a6e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a7e:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000a80:	7dfb      	ldrb	r3, [r7, #23]

}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <I2C_MasterReceiveDataIT>:
 *
 * @return				- state of I2C peripheral
 *
 * @Note				- none
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint32_t len, uint8_t slaveAddr,uint8_t repStart) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	7f1b      	ldrb	r3, [r3, #28]
 8000a9c:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d03f      	beq.n	8000b24 <I2C_MasterReceiveDataIT+0x9a>
 8000aa4:	7dfb      	ldrb	r3, [r7, #23]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d03c      	beq.n	8000b24 <I2C_MasterReceiveDataIT+0x9a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = len;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = len; //Rxsize is used in the ISR code to manage the data reception
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = slaveAddr;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	78fa      	ldrb	r2, [r7, #3]
 8000ac6:	775a      	strb	r2, [r3, #29]
		pI2CHandle->repStart = repStart;
 8000ac8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24

		//if I2C is not enabled, then enable it
		if(! ( pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_PE) ) ){
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <I2C_MasterReceiveDataIT+0x60>
			I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fac4 	bl	8001072 <I2C_PeripheralControl>
		//Implement code to Generate START Condition
		//In course code, this is above the interrupt enables, but I moved it here just in case it succeeds before they're enabled
		//EDIT: This should be before interrupt enables because for the start condition clears the TXE flag
		//		If TXE isn't cleared before interupts are enabled,
		//		then the program will continually interrupt
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe34 	bl	800075c <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b02:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b12:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b22:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <I2C_IRQInterruptConfig>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enOrDi){
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t registerIndex, registerBitPos;
	registerIndex = IRQNumber /32;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	73fb      	strb	r3, [r7, #15]
	registerBitPos = IRQNumber % 32;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 031f 	and.w	r3, r3, #31
 8000b4c:	73bb      	strb	r3, [r7, #14]
	if(enOrDi == ENABLE){
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d10e      	bne.n	8000b72 <I2C_IRQInterruptConfig+0x42>
		NVIC->ISER[registerIndex] |= 1 << registerBitPos; //setting, no need to clear
 8000b54:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <I2C_IRQInterruptConfig+0x6c>)
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	2101      	movs	r1, #1
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	490d      	ldr	r1, [pc, #52]	; (8000b9c <I2C_IRQInterruptConfig+0x6c>)
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	4302      	orrs	r2, r0
 8000b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		NVIC->ICER[registerIndex] |= 1<< registerBitPos; //setting, no need to clear
	}
}
 8000b70:	e00f      	b.n	8000b92 <I2C_IRQInterruptConfig+0x62>
		NVIC->ICER[registerIndex] |= 1<< registerBitPos; //setting, no need to clear
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <I2C_IRQInterruptConfig+0x6c>)
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	3320      	adds	r3, #32
 8000b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	4905      	ldr	r1, [pc, #20]	; (8000b9c <I2C_IRQInterruptConfig+0x6c>)
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	4302      	orrs	r2, r0
 8000b8c:	3320      	adds	r3, #32
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <I2C_MasterHandleTXEIT>:
 *
 * @return				- none
 *
 * @Note				- none
 */
static void I2C_MasterHandleTXEIT(I2C_Handle_t *pI2CHandle){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	//we have to transmit data
	if(pI2CHandle->TxLen > 0){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00f      	beq.n	8000bd0 <I2C_MasterHandleTXEIT+0x30>
		//1. load the data in to the DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]
	}
	//NOTE: We don't need to handle the end here because BTF IT will do this
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <I2C_MasterHandleRXNEIT>:
 * @Note				- The STM code seems much more robust, study that in order to gain full understanding
 * 						- for transmitting, we let the BTF interrupt handle the stop condition
 * 						- I think we should also let BTF interrupt handle the stop condition for receiving
 *
 */
static void I2C_MasterHandleRXNEIT(I2C_Handle_t *pI2CHandle){
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
	//data reception
	if(pI2CHandle->RxSize == 1){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10c      	bne.n	8000c04 <I2C_MasterHandleRXNEIT+0x2a>
//		if(pI2CHandle->repStart == I2C_SR_DISABLED){
//			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
//		}

		//1. load the data in to the DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	701a      	strb	r2, [r3, #0]
		//2. decrement the TxLen
		pI2CHandle->RxLen--;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	e02f      	b.n	8000c64 <I2C_MasterHandleRXNEIT+0x8a>
	} else if (pI2CHandle->RxSize > 1){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d92b      	bls.n	8000c64 <I2C_MasterHandleRXNEIT+0x8a>
		//enable acking, this mimics STM code, not the course
		// this isn't for len = 1 because it is not needed for 1 byte
		if (!(pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR1_ACK)) && (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <I2C_MasterHandleRXNEIT+0x54>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7a5b      	ldrb	r3, [r3, #9]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d105      	bne.n	8000c2e <I2C_MasterHandleRXNEIT+0x54>
			//acking isn't enabled, but should be
			I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2101      	movs	r1, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fa64 	bl	80010f6 <I2C_ManageAcking>
		}

		if (pI2CHandle->RxLen == 2){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d105      	bne.n	8000c42 <I2C_MasterHandleRXNEIT+0x68>
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fa5a 	bl	80010f6 <I2C_ManageAcking>
//					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
//				}
		}

		//1. load the data in to the DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	701a      	strb	r2, [r3, #0]
		//2. decrement the TxLen
		pI2CHandle->RxLen--;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	1e5a      	subs	r2, r3, #1
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	619a      	str	r2, [r3, #24]
		//3. increment the buffer address
		pI2CHandle->pRxBuffer++;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
	}

	if(pI2CHandle->RxLen == 0){
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10f      	bne.n	8000c8c <I2C_MasterHandleRXNEIT+0xb2>
		//instructor code has this here, but according to the RM, this should be sent when there are 2 bytes left
		//to make the stop conditions above work, instead of the one below, must change the line
		//above from pI2CHandle->RxLen == 2 to pI2CHandle->RxLen == 1
		if(pI2CHandle->repStart == I2C_SR_DISABLED){
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d104      	bne.n	8000c7e <I2C_MasterHandleRXNEIT+0xa4>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f9eb 	bl	8001054 <I2C_GenerateStopCondition>
		}
		//close the I2C data reception and notify the application
		//2. Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f808 	bl	8000c94 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000c84:	2101      	movs	r1, #1
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 fba6 	bl	80013d8 <I2C_ApplicationEventCallback>
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <I2C_CloseReceiveData>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	//Would it makes sense to disable the error interrupts?
	//Implement the code to disable the ITERREN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000caa:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cba:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cca:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7a5b      	ldrb	r3, [r3, #9]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d105      	bne.n	8000cf8 <I2C_CloseReceiveData+0x64>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9ff 	bl	80010f6 <I2C_ManageAcking>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <I2C_CloseSendData>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	//Would it makes sense to disable the error interrupts?
	//Implement the code to disable the ITERREN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d16:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d26:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d36:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <I2C_EV_IRQHandling>:
 * 						- STM code seems a lot better than course code
 * 						- uses TRA to determine whether or not to check TXE/RXNE and BTF
 * 						- BTF receive and transmit have their own functions
 * 						- Seems to use only BTF for the last ~4 bytes (disables buffer interrupt)
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of device
	uint32_t eventIT, bufferIT;

	eventIT = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d66:	60fb      	str	r3, [r7, #12]
	bufferIT = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d72:	60bb      	str	r3, [r7, #8]

	//ITEVTEN is enabled

	//1. Handle for interrupt generated by SB event
	//	Note: SB flag is only applicable in Master mode
	if(eventIT && I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_SB)){
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d024      	beq.n	8000dc4 <I2C_EV_IRQHandling+0x70>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f990 	bl	80010a8 <I2C_GetFlagStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d01a      	beq.n	8000dc4 <I2C_EV_IRQHandling+0x70>
		//Interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block, let's execute the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7f1b      	ldrb	r3, [r3, #28]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d108      	bne.n	8000da8 <I2C_EV_IRQHandling+0x54>
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, I2C_WRITE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f5b      	ldrb	r3, [r3, #29]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	f7ff fcea 	bl	800077a <I2C_ExecuteAddressPhase>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000da6:	e0c4      	b.n	8000f32 <I2C_EV_IRQHandling+0x1de>
		} else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7f1b      	ldrb	r3, [r3, #28]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 80c0 	bne.w	8000f32 <I2C_EV_IRQHandling+0x1de>
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, I2C_READ);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7f5b      	ldrb	r3, [r3, #29]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f7ff fcdc 	bl	800077a <I2C_ExecuteAddressPhase>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000dc2:	e0b6      	b.n	8000f32 <I2C_EV_IRQHandling+0x1de>
	//2. Handle for interrupt generated by ADDR event
	//	Note:	When Master mode: Address is sent
	//			When Slave mode : Address matched with own address
	//			Disable acking if in receiving mode and one byte is received
	// bug in the insturctors code: doesn't clear addr if rxSize is > 1
	else if(eventIT && I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_ADDR)){
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d027      	beq.n	8000e1a <I2C_EV_IRQHandling+0xc6>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2202      	movs	r2, #2
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f968 	bl	80010a8 <I2C_GetFlagStatus>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d01d      	beq.n	8000e1a <I2C_EV_IRQHandling+0xc6>
		//ADDR flag is set
		if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR2, I2C_FLAG_MSL)){
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2201      	movs	r2, #1
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f95e 	bl	80010a8 <I2C_GetFlagStatus>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00d      	beq.n	8000e0e <I2C_EV_IRQHandling+0xba>
			//device is master mode
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7f1b      	ldrb	r3, [r3, #28]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d109      	bne.n	8000e0e <I2C_EV_IRQHandling+0xba>
				//device is Receiving
				if(pI2CHandle->RxSize == 1){
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d105      	bne.n	8000e0e <I2C_EV_IRQHandling+0xba>
					//only receiving one byte
					//first disable ack
					I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f974 	bl	80010f6 <I2C_ManageAcking>
				}
			}
		}
		//Clear ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fcd0 	bl	80007b8 <I2C_ClearADDRFlag>
 8000e18:	e090      	b.n	8000f3c <I2C_EV_IRQHandling+0x1e8>

	}

	//3. Handle for interrupt generated by BTF(Byte Transfer Finished) event
	else if(eventIT && I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_BTF)){
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02c      	beq.n	8000e7a <I2C_EV_IRQHandling+0x126>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2204      	movs	r2, #4
 8000e26:	2101      	movs	r1, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f93d 	bl	80010a8 <I2C_GetFlagStatus>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d022      	beq.n	8000e7a <I2C_EV_IRQHandling+0x126>
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7f1b      	ldrb	r3, [r3, #28]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d17c      	bne.n	8000f36 <I2C_EV_IRQHandling+0x1e2>
			//make sure that TXE is also set
			if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_TXE)){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	2101      	movs	r1, #1
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f92f 	bl	80010a8 <I2C_GetFlagStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d072      	beq.n	8000f36 <I2C_EV_IRQHandling+0x1e2>
				//BTF, TXE both 1
				if(pI2CHandle->TxLen == 0){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d16e      	bne.n	8000f36 <I2C_EV_IRQHandling+0x1e2>
					//1. generate STOP condition
					if(pI2CHandle->repStart == I2C_SR_DISABLED){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d104      	bne.n	8000e6a <I2C_EV_IRQHandling+0x116>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f8f5 	bl	8001054 <I2C_GenerateStopCondition>
					}

					//2. rest all member elements of the handle struct
					I2C_CloseSendData(pI2CHandle);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff48 	bl	8000d00 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000e70:	2100      	movs	r1, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fab0 	bl	80013d8 <I2C_ApplicationEventCallback>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e78:	e05d      	b.n	8000f36 <I2C_EV_IRQHandling+0x1e2>
	}

	//4. Handle for interrupt generated by STOPF event
	//	Note: Stop detection flag is applicable only slave mode. For master this flag will never be set
	//RM recommends going through entire process of read SR1 and write CR1 to clear after STOPF is set
	else if(eventIT && I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_STOPF)){
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d014      	beq.n	8000eaa <I2C_EV_IRQHandling+0x156>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2210      	movs	r2, #16
 8000e86:	2101      	movs	r1, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 f90d 	bl	80010a8 <I2C_GetFlagStatus>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00a      	beq.n	8000eaa <I2C_EV_IRQHandling+0x156>

		//STOPF flag is set
		//Clear the STOPF i.e.[ 1) read SR1 2) Write to CR1 ]
		//Already read SR1 above, do we need to write something specific?
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	601a      	str	r2, [r3, #0]

		//notify the appliactiong that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fa98 	bl	80013d8 <I2C_ApplicationEventCallback>
 8000ea8:	e048      	b.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
	}

	//5. Handle for interrupt generated by TXE event
	else if(eventIT && bufferIT && I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_TXE)){
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d01e      	beq.n	8000eee <I2C_EV_IRQHandling+0x19a>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d01b      	beq.n	8000eee <I2C_EV_IRQHandling+0x19a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8f2 	bl	80010a8 <I2C_GetFlagStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d011      	beq.n	8000eee <I2C_EV_IRQHandling+0x19a>
		//check for device mode
		if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR2, I2C_FLAG_MSL)){
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f8e8 	bl	80010a8 <I2C_GetFlagStatus>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d02d      	beq.n	8000f3a <I2C_EV_IRQHandling+0x1e6>
			//device mode is master
			//TXE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX) {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7f1b      	ldrb	r3, [r3, #28]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d129      	bne.n	8000f3a <I2C_EV_IRQHandling+0x1e6>
				I2C_MasterHandleTXEIT(pI2CHandle);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fe5a 	bl	8000ba0 <I2C_MasterHandleTXEIT>
		if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR2, I2C_FLAG_MSL)){
 8000eec:	e025      	b.n	8000f3a <I2C_EV_IRQHandling+0x1e6>
		}

	}

	//6. Handle for interrupt generated by RXNE event
	else if(eventIT && bufferIT && I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_RXNE)){
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d023      	beq.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d020      	beq.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2240      	movs	r2, #64	; 0x40
 8000f00:	2101      	movs	r1, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f8d0 	bl	80010a8 <I2C_GetFlagStatus>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d016      	beq.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
		//check for device mode
		if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR2, I2C_FLAG_MSL)){
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2201      	movs	r2, #1
 8000f14:	2102      	movs	r1, #2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f8c6 	bl	80010a8 <I2C_GetFlagStatus>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00c      	beq.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
			//device mode is master
			//RXNE is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7f1b      	ldrb	r3, [r3, #28]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
				I2C_MasterHandleRXNEIT(pI2CHandle);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fe55 	bl	8000bda <I2C_MasterHandleRXNEIT>
			}
		}
	}
}
 8000f30:	e004      	b.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000f32:	bf00      	nop
 8000f34:	e002      	b.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000f36:	bf00      	nop
 8000f38:	e000      	b.n	8000f3c <I2C_EV_IRQHandling+0x1e8>
		if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR2, I2C_FLAG_MSL)){
 8000f3a:	bf00      	nop
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <I2C_ER_IRQHandling>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	uint32_t errorIT;

	//Know the status of  ITERREN control bit in the CR2
	errorIT = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	60fb      	str	r3, [r7, #12]

	if(errorIT){
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d076      	beq.n	800104c <I2C_ER_IRQHandling+0x108>
		/***********************Check for Bus error************************************/
		if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_BERR))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f89d 	bl	80010a8 <I2C_GetFlagStatus>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00c      	beq.n	8000f8e <I2C_ER_IRQHandling+0x4a>
		{
			//This is Bus error

			//Implement the code to clear the buss error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f82:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_BERR);
 8000f84:	2103      	movs	r1, #3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fa26 	bl	80013d8 <I2C_ApplicationEventCallback>

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_TIMEOUT);
		}
	}
}
 8000f8c:	e05e      	b.n	800104c <I2C_ER_IRQHandling+0x108>
		else if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_ARLO))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f885 	bl	80010a8 <I2C_GetFlagStatus>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00c      	beq.n	8000fbe <I2C_ER_IRQHandling+0x7a>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fb2:	615a      	str	r2, [r3, #20]
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_ARLO);
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fa0e 	bl	80013d8 <I2C_ApplicationEventCallback>
}
 8000fbc:	e046      	b.n	800104c <I2C_ER_IRQHandling+0x108>
		else if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_AF))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f86d 	bl	80010a8 <I2C_GetFlagStatus>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00c      	beq.n	8000fee <I2C_ER_IRQHandling+0xaa>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe2:	615a      	str	r2, [r3, #20]
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_AF);
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f9f6 	bl	80013d8 <I2C_ApplicationEventCallback>
}
 8000fec:	e02e      	b.n	800104c <I2C_ER_IRQHandling+0x108>
		else if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_OVR))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f855 	bl	80010a8 <I2C_GetFlagStatus>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00c      	beq.n	800101e <I2C_ER_IRQHandling+0xda>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001012:	615a      	str	r2, [r3, #20]
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_OVR);
 8001014:	2106      	movs	r1, #6
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f9de 	bl	80013d8 <I2C_ApplicationEventCallback>
}
 800101c:	e016      	b.n	800104c <I2C_ER_IRQHandling+0x108>
		else if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1, I2C_FLAG_TIMEOUT))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f83d 	bl	80010a8 <I2C_GetFlagStatus>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <I2C_ER_IRQHandling+0x108>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001042:	615a      	str	r2, [r3, #20]
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_TIMEOUT);
 8001044:	2107      	movs	r1, #7
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f9c6 	bl	80013d8 <I2C_ApplicationEventCallback>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <I2C_GenerateStopCondition>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <I2C_PeripheralControl>:
 *
 * @return				- none
 *
 * @Note				- none (might implement this in the transmit function)
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enOrDi){
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d106      	bne.n	8001092 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001090:	e005      	b.n	800109e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 0201 	bic.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <I2C_GetFlagStatus>:
 *
 * @return				- none
 *
 * @Note				- TODO find a better way to use this with two SRs, should I just have the user pass the specific SR?
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t* pI2Cx, uint8_t SRx, uint32_t flag){
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	460b      	mov	r3, r1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	72fb      	strb	r3, [r7, #11]
	if(SRx == I2C_SR1){
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d109      	bne.n	80010d0 <I2C_GetFlagStatus+0x28>
		if(pI2Cx->SR1 & flag) {
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <I2C_GetFlagStatus+0x24>
				return SET;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e00f      	b.n	80010ec <I2C_GetFlagStatus+0x44>
			}
		return RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e00d      	b.n	80010ec <I2C_GetFlagStatus+0x44>
	} else if (SRx == I2C_SR2) {
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d109      	bne.n	80010ea <I2C_GetFlagStatus+0x42>
		if(pI2Cx->SR2 & flag) {
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	699a      	ldr	r2, [r3, #24]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <I2C_GetFlagStatus+0x3e>
				return SET;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e002      	b.n	80010ec <I2C_GetFlagStatus+0x44>
			}
		return RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <I2C_GetFlagStatus+0x44>
	}
	return RESET;//return something else to indicate invalid register?
 80010ea:	2300      	movs	r3, #0

}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <I2C_ManageAcking>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_ManageAcking(I2C_RegDef_t* pI2Cx, uint8_t enOrDi){
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE) {
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d106      	bne.n	8001116 <I2C_ManageAcking+0x20>
		//enable acking
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	601a      	str	r2, [r3, #0]
	} else {
		//disable acking
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001114:	e005      	b.n	8001122 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <RCC_GetPLLOutputClock>:
 *
 * @return				- none
 *
 * @Note				- Currently not implemented as the PLL clock is not used
 */
uint32_t RCC_GetPLLOutputClock(void){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
	...

0800113c <RCC_GetPCLK1Value>:
 *
 * @return				- 32 bit PCLK value in Hz
 *
 * @Note				- none
 */
uint32_t RCC_GetPCLK1Value(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
	uint32_t pclk1, systemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);//0's out any bits that we don't want. Probably should create masks/pos vars for this
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <RCC_GetPCLK1Value+0xa0>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8001150:	7a7b      	ldrb	r3, [r7, #9]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <RCC_GetPCLK1Value+0x20>
		systemClk = 16000000;//HSI
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <RCC_GetPCLK1Value+0xa4>)
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	e00b      	b.n	8001174 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1){
 800115c:	7a7b      	ldrb	r3, [r7, #9]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <RCC_GetPCLK1Value+0x2c>
		systemClk = 8000000;//HSE
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <RCC_GetPCLK1Value+0xa8>)
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e005      	b.n	8001174 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 2){
 8001168:	7a7b      	ldrb	r3, [r7, #9]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d102      	bne.n	8001174 <RCC_GetPCLK1Value+0x38>
		systemClk = RCC_GetPLLOutputClock();//PLL (not implemented)
 800116e:	f7ff ffdd 	bl	800112c <RCC_GetPLLOutputClock>
 8001172:	60f8      	str	r0, [r7, #12]
	}

	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <RCC_GetPCLK1Value+0xa0>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	723b      	strb	r3, [r7, #8]

	if(temp < 8) {
 8001182:	7a3b      	ldrb	r3, [r7, #8]
 8001184:	2b07      	cmp	r3, #7
 8001186:	d802      	bhi.n	800118e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	72fb      	strb	r3, [r7, #11]
 800118c:	e005      	b.n	800119a <RCC_GetPCLK1Value+0x5e>
	} else {
		ahbp = AHB_PreScaler[temp-8];
 800118e:	7a3b      	ldrb	r3, [r7, #8]
 8001190:	3b08      	subs	r3, #8
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <RCC_GetPCLK1Value+0xac>)
 8001194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001198:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10) & 0x7);
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <RCC_GetPCLK1Value+0xa0>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	0a9b      	lsrs	r3, r3, #10
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	723b      	strb	r3, [r7, #8]

	if (temp < 4) {
 80011a8:	7a3b      	ldrb	r3, [r7, #8]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d802      	bhi.n	80011b4 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	72bb      	strb	r3, [r7, #10]
 80011b2:	e005      	b.n	80011c0 <RCC_GetPCLK1Value+0x84>
	} else {
		apb1p = APB_PreScaler[temp-4];
 80011b4:	7a3b      	ldrb	r3, [r7, #8]
 80011b6:	3b04      	subs	r3, #4
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <RCC_GetPCLK1Value+0xb0>)
 80011ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011be:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (systemClk/ahbp)/apb1p;
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80011c8:	7abb      	ldrb	r3, [r7, #10]
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	607b      	str	r3, [r7, #4]

	return pclk1;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	00f42400 	.word	0x00f42400
 80011e4:	007a1200 	.word	0x007a1200
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000010 	.word	0x20000010

080011f0 <delay>:
uint8_t rxCmplt = RESET;
void I2C_GPIO_Setup(void);
void GPIO_ButtonInit(void);
void I2C_Setup(void);

void delay(int time){
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<time; i++);
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e002      	b.n	8001204 <delay+0x14>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3301      	adds	r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3f8      	bcc.n	80011fe <delay+0xe>
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
	...

08001218 <main>:
#define COMMAND_READ_DATA		0x52



//NOTE: mishandling if TXE is not cleared, but I2C_MasterReceiveDataIT is not set
int main(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
	uint8_t commandcode;
	uint8_t messageLength;

	printf("Hello World\n");
 800121e:	4830      	ldr	r0, [pc, #192]	; (80012e0 <main+0xc8>)
 8001220:	f000 faf4 	bl	800180c <puts>
	//initizalize button
	GPIO_ButtonInit();
 8001224:	f000 f88e 	bl	8001344 <GPIO_ButtonInit>

	//This function is used to initialize the gpio pins to behave as I2C pins
	I2C_GPIO_Setup();
 8001228:	f000 f866 	bl	80012f8 <I2C_GPIO_Setup>

	//This function is used to initialize the SPI peripheral
	I2C_Setup();
 800122c:	f000 f8a4 	bl	8001378 <I2C_Setup>

	//I2C IRQ Configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 8001230:	2101      	movs	r1, #1
 8001232:	201f      	movs	r0, #31
 8001234:	f7ff fc7c 	bl	8000b30 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 8001238:	2101      	movs	r1, #1
 800123a:	2020      	movs	r0, #32
 800123c:	f7ff fc78 	bl	8000b30 <I2C_IRQInterruptConfig>
	//Course uses the PeripheralControl function to enable I2C here, but I implemented this in the read and write functions
	//course also enables acking here, but I do this in the receive function to match the STM code

	while(1){
		//wait for button to be pressed
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8001240:	bf00      	nop
 8001242:	2100      	movs	r1, #0
 8001244:	4827      	ldr	r0, [pc, #156]	; (80012e4 <main+0xcc>)
 8001246:	f7ff fa6d 	bl	8000724 <GPIO_ReadFromInputPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f8      	beq.n	8001242 <main+0x2a>

		delay(250000); //used for button debouncing
 8001250:	4825      	ldr	r0, [pc, #148]	; (80012e8 <main+0xd0>)
 8001252:	f7ff ffcd 	bl	80011f0 <delay>

		//send command code to read the length of data
		commandcode = COMMAND_READ_LENGTH;
 8001256:	2351      	movs	r3, #81	; 0x51
 8001258:	71fb      	strb	r3, [r7, #7]
//		while(I2C_MasterSendDataIT(&hI2C1, &commandcode, 1, SLAVE_ADDR, I2C_SR_ENABLED) != I2C_READY);
		while(I2C_MasterSendDataIT(&hI2C1, &commandcode, 1, SLAVE_ADDR, I2C_SR_DISABLED) != I2C_READY);
 800125a:	bf00      	nop
 800125c:	1df9      	adds	r1, r7, #7
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2368      	movs	r3, #104	; 0x68
 8001264:	2201      	movs	r2, #1
 8001266:	4821      	ldr	r0, [pc, #132]	; (80012ec <main+0xd4>)
 8001268:	f7ff fbc0 	bl	80009ec <I2C_MasterSendDataIT>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f4      	bne.n	800125c <main+0x44>
		//receive the length from the slave
//		while(I2C_MasterReceiveDataIT(&hI2C1, &messageLength, 1, SLAVE_ADDR, I2C_SR_ENABLED) != I2C_READY);
		while(I2C_MasterReceiveDataIT(&hI2C1, &messageLength, 1, SLAVE_ADDR, I2C_SR_DISABLED) != I2C_READY);
 8001272:	bf00      	nop
 8001274:	1db9      	adds	r1, r7, #6
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2368      	movs	r3, #104	; 0x68
 800127c:	2201      	movs	r2, #1
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <main+0xd4>)
 8001280:	f7ff fc03 	bl	8000a8a <I2C_MasterReceiveDataIT>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f4      	bne.n	8001274 <main+0x5c>

//		//send command code to read the message
		commandcode = COMMAND_READ_DATA;
 800128a:	2352      	movs	r3, #82	; 0x52
 800128c:	71fb      	strb	r3, [r7, #7]
//		while(I2C_MasterSendDataIT(&hI2C1, &commandcode, 1, SLAVE_ADDR, I2C_SR_ENABLED) != I2C_READY);
		while(I2C_MasterSendDataIT(&hI2C1, &commandcode, 1, SLAVE_ADDR, I2C_SR_DISABLED) != I2C_READY);
 800128e:	bf00      	nop
 8001290:	1df9      	adds	r1, r7, #7
 8001292:	2300      	movs	r3, #0
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2368      	movs	r3, #104	; 0x68
 8001298:	2201      	movs	r2, #1
 800129a:	4814      	ldr	r0, [pc, #80]	; (80012ec <main+0xd4>)
 800129c:	f7ff fba6 	bl	80009ec <I2C_MasterSendDataIT>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f4      	bne.n	8001290 <main+0x78>
//		//receive the message from the slave
//		//receive buffer is only 32 bits
		while(I2C_MasterReceiveDataIT(&hI2C1, message, messageLength, SLAVE_ADDR, I2C_SR_DISABLED) != I2C_READY);
 80012a6:	bf00      	nop
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	461a      	mov	r2, r3
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2368      	movs	r3, #104	; 0x68
 80012b2:	490f      	ldr	r1, [pc, #60]	; (80012f0 <main+0xd8>)
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <main+0xd4>)
 80012b6:	f7ff fbe8 	bl	8000a8a <I2C_MasterReceiveDataIT>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f3      	bne.n	80012a8 <main+0x90>
//		//note: why does this work without adding a null character?

		rxCmplt = RESET;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <main+0xdc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
		while(rxCmplt != SET);
 80012c6:	bf00      	nop
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <main+0xdc>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d1fb      	bne.n	80012c8 <main+0xb0>

		printf("%s\n", message);
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <main+0xd8>)
 80012d2:	f000 fa9b 	bl	800180c <puts>

		rxCmplt = RESET;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <main+0xdc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 80012dc:	e7b0      	b.n	8001240 <main+0x28>
 80012de:	bf00      	nop
 80012e0:	0800203c 	.word	0x0800203c
 80012e4:	40020000 	.word	0x40020000
 80012e8:	0003d090 	.word	0x0003d090
 80012ec:	200000a8 	.word	0x200000a8
 80012f0:	200000d0 	.word	0x200000d0
 80012f4:	20000098 	.word	0x20000098

080012f8 <I2C_GPIO_Setup>:
	}

	return 0;
}

void I2C_GPIO_Setup(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

	I2Cpins.pGPIOx = GPIOB;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <I2C_GPIO_Setup+0x44>)
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <I2C_GPIO_Setup+0x48>)
 8001300:	601a      	str	r2, [r3, #0]
	I2Cpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <I2C_GPIO_Setup+0x44>)
 8001304:	2202      	movs	r2, #2
 8001306:	715a      	strb	r2, [r3, #5]
	I2Cpins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <I2C_GPIO_Setup+0x44>)
 800130a:	2204      	movs	r2, #4
 800130c:	725a      	strb	r2, [r3, #9]
	I2Cpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_OD;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <I2C_GPIO_Setup+0x44>)
 8001310:	2201      	movs	r2, #1
 8001312:	721a      	strb	r2, [r3, #8]
	I2Cpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <I2C_GPIO_Setup+0x44>)
 8001316:	2201      	movs	r2, #1
 8001318:	71da      	strb	r2, [r3, #7]
	I2Cpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <I2C_GPIO_Setup+0x44>)
 800131c:	2202      	movs	r2, #2
 800131e:	719a      	strb	r2, [r3, #6]

	//SCL
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <I2C_GPIO_Setup+0x44>)
 8001322:	2206      	movs	r2, #6
 8001324:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&I2Cpins);
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <I2C_GPIO_Setup+0x44>)
 8001328:	f7ff f846 	bl	80003b8 <GPIO_Init>

	//SDL
	//changed from pin 9 because of little glitch (not sure if this is happening on my board, but changing anyway)
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <I2C_GPIO_Setup+0x44>)
 800132e:	2207      	movs	r2, #7
 8001330:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&I2Cpins);
 8001332:	4802      	ldr	r0, [pc, #8]	; (800133c <I2C_GPIO_Setup+0x44>)
 8001334:	f7ff f840 	bl	80003b8 <GPIO_Init>


}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000f0 	.word	0x200000f0
 8001340:	40020400 	.word	0x40020400

08001344 <GPIO_ButtonInit>:
void GPIO_ButtonInit(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

	// configure button
	//Set up PA0 to be an input for the button press
	GpioBtn.pGPIOx = GPIOA;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <GPIO_ButtonInit+0x2c>)
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <GPIO_ButtonInit+0x30>)
 800134c:	601a      	str	r2, [r3, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <GPIO_ButtonInit+0x2c>)
 8001350:	2200      	movs	r2, #0
 8001352:	711a      	strb	r2, [r3, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <GPIO_ButtonInit+0x2c>)
 8001356:	2200      	movs	r2, #0
 8001358:	715a      	strb	r2, [r3, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <GPIO_ButtonInit+0x2c>)
 800135c:	2202      	movs	r2, #2
 800135e:	719a      	strb	r2, [r3, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <GPIO_ButtonInit+0x2c>)
 8001362:	2200      	movs	r2, #0
 8001364:	71da      	strb	r2, [r3, #7]
	GPIO_Init(&GpioBtn);
 8001366:	4802      	ldr	r0, [pc, #8]	; (8001370 <GPIO_ButtonInit+0x2c>)
 8001368:	f7ff f826 	bl	80003b8 <GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200000fc 	.word	0x200000fc
 8001374:	40020000 	.word	0x40020000

08001378 <I2C_Setup>:
void I2C_Setup(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	hI2C1.pI2Cx = I2C1;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <I2C_Setup+0x2c>)
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <I2C_Setup+0x30>)
 8001380:	601a      	str	r2, [r3, #0]
	hI2C1.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <I2C_Setup+0x2c>)
 8001384:	4a09      	ldr	r2, [pc, #36]	; (80013ac <I2C_Setup+0x34>)
 8001386:	605a      	str	r2, [r3, #4]
	hI2C1.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <I2C_Setup+0x2c>)
 800138a:	2261      	movs	r2, #97	; 0x61
 800138c:	721a      	strb	r2, [r3, #8]
	hI2C1.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <I2C_Setup+0x2c>)
 8001390:	2201      	movs	r2, #1
 8001392:	725a      	strb	r2, [r3, #9]
	hI2C1.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <I2C_Setup+0x2c>)
 8001396:	2200      	movs	r2, #0
 8001398:	729a      	strb	r2, [r3, #10]

	I2C_Init(&hI2C1);
 800139a:	4802      	ldr	r0, [pc, #8]	; (80013a4 <I2C_Setup+0x2c>)
 800139c:	f7ff fa74 	bl	8000888 <I2C_Init>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200000a8 	.word	0x200000a8
 80013a8:	40005400 	.word	0x40005400
 80013ac:	000186a0 	.word	0x000186a0

080013b0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&hI2C1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <I2C1_EV_IRQHandler+0x10>)
 80013b6:	f7ff fccd 	bl	8000d54 <I2C_EV_IRQHandling>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200000a8 	.word	0x200000a8

080013c4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&hI2C1);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <I2C1_ER_IRQHandler+0x10>)
 80013ca:	f7ff fdbb 	bl	8000f44 <I2C_ER_IRQHandling>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000a8 	.word	0x200000a8

080013d8 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t appEvent){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
	switch(appEvent)
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	d87a      	bhi.n	80014e0 <I2C_ApplicationEventCallback+0x108>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <I2C_ApplicationEventCallback+0x18>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	08001419 	.word	0x08001419
 80013f4:	08001421 	.word	0x08001421
 80013f8:	0800142f 	.word	0x0800142f
 80013fc:	08001437 	.word	0x08001437
 8001400:	08001469 	.word	0x08001469
 8001404:	08001487 	.word	0x08001487
 8001408:	0800149f 	.word	0x0800149f
 800140c:	080014bd 	.word	0x080014bd
 8001410:	080014d1 	.word	0x080014d1
 8001414:	080014d9 	.word	0x080014d9
	{
	case I2C_EV_TX_CMPLT:
		printf("Tx is completed\n");
 8001418:	4835      	ldr	r0, [pc, #212]	; (80014f0 <I2C_ApplicationEventCallback+0x118>)
 800141a:	f000 f9f7 	bl	800180c <puts>
		break;
 800141e:	e063      	b.n	80014e8 <I2C_ApplicationEventCallback+0x110>
	case I2C_EV_RX_CMPLT:
		printf("Rx is completed\n");
 8001420:	4834      	ldr	r0, [pc, #208]	; (80014f4 <I2C_ApplicationEventCallback+0x11c>)
 8001422:	f000 f9f3 	bl	800180c <puts>
		rxCmplt = SET;
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <I2C_ApplicationEventCallback+0x120>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
		break;
 800142c:	e05c      	b.n	80014e8 <I2C_ApplicationEventCallback+0x110>
	case I2C_EV_STOP:
		printf("Communication stopped\n");
 800142e:	4833      	ldr	r0, [pc, #204]	; (80014fc <I2C_ApplicationEventCallback+0x124>)
 8001430:	f000 f9ec 	bl	800180c <puts>
		break;
 8001434:	e058      	b.n	80014e8 <I2C_ApplicationEventCallback+0x110>
	case I2C_ER_BERR:
		//occurs when a start or stop condition happens in a place it shouldn't
		printf("Error: Bus error\n");
 8001436:	4832      	ldr	r0, [pc, #200]	; (8001500 <I2C_ApplicationEventCallback+0x128>)
 8001438:	f000 f9e8 	bl	800180c <puts>
		I2C_CloseSendData(&hI2C1);
 800143c:	4831      	ldr	r0, [pc, #196]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 800143e:	f7ff fc5f 	bl	8000d00 <I2C_CloseSendData>
		I2C_CloseReceiveData(&hI2C1);
 8001442:	4830      	ldr	r0, [pc, #192]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 8001444:	f7ff fc26 	bl	8000c94 <I2C_CloseReceiveData>
		if(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR2, I2C_FLAG_MSL)){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe29 	bl	80010a8 <I2C_GetFlagStatus>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <I2C_ApplicationEventCallback+0x8e>
			//master mode
			I2C_GenerateStopCondition(hI2C1.pI2Cx);
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fdf7 	bl	8001054 <I2C_GenerateStopCondition>
		}
		while(1);
 8001466:	e7fe      	b.n	8001466 <I2C_ApplicationEventCallback+0x8e>
		break;
	case I2C_ER_ARLO:
		//In master mode, occurs when arbitration is lost to another master
		printf("Error: Arbitration lost\n");
 8001468:	4827      	ldr	r0, [pc, #156]	; (8001508 <I2C_ApplicationEventCallback+0x130>)
 800146a:	f000 f9cf 	bl	800180c <puts>
		I2C_CloseSendData(&hI2C1);
 800146e:	4825      	ldr	r0, [pc, #148]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 8001470:	f7ff fc46 	bl	8000d00 <I2C_CloseSendData>
		I2C_CloseReceiveData(&hI2C1);
 8001474:	4823      	ldr	r0, [pc, #140]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 8001476:	f7ff fc0d 	bl	8000c94 <I2C_CloseReceiveData>
		I2C_GenerateStopCondition(hI2C1.pI2Cx);
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fde8 	bl	8001054 <I2C_GenerateStopCondition>
		while(1);
 8001484:	e7fe      	b.n	8001484 <I2C_ApplicationEventCallback+0xac>
		break;
	case I2C_ER_AF:
		//in master, ack failure occurs when slave fails to send ack for the byte sent by master
		printf("Error : Ack failure\n");
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <I2C_ApplicationEventCallback+0x134>)
 8001488:	f000 f9c0 	bl	800180c <puts>
		I2C_CloseSendData(&hI2C1);
 800148c:	481d      	ldr	r0, [pc, #116]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 800148e:	f7ff fc37 	bl	8000d00 <I2C_CloseSendData>
		I2C_GenerateStopCondition(hI2C1.pI2Cx);
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fddc 	bl	8001054 <I2C_GenerateStopCondition>
		//hang in infinite loop
		while(1);
 800149c:	e7fe      	b.n	800149c <I2C_ApplicationEventCallback+0xc4>
		//this is highly application specific,
		//should probably do something else?
		break;
	case I2C_ER_OVR:
		//In master mode, occurs when data overrun in reception or transmission
		printf("Error: Overrun error\n");
 800149e:	481c      	ldr	r0, [pc, #112]	; (8001510 <I2C_ApplicationEventCallback+0x138>)
 80014a0:	f000 f9b4 	bl	800180c <puts>
		I2C_CloseSendData(&hI2C1);
 80014a4:	4817      	ldr	r0, [pc, #92]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 80014a6:	f7ff fc2b 	bl	8000d00 <I2C_CloseSendData>
		I2C_CloseReceiveData(&hI2C1);
 80014aa:	4816      	ldr	r0, [pc, #88]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 80014ac:	f7ff fbf2 	bl	8000c94 <I2C_CloseReceiveData>
		I2C_GenerateStopCondition(hI2C1.pI2Cx);
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fdcd 	bl	8001054 <I2C_GenerateStopCondition>
		while(1);
 80014ba:	e7fe      	b.n	80014ba <I2C_ApplicationEventCallback+0xe2>
		//SCL remaind low for 25ms
		//or in master mode: cumulative clock low extend time more than 10ms (Tlow:mext)
		//or in slave mode: cumulative clock low extend time more than 25ms (Tlow:mext)
		//In master mode: stop condition sent by hardware
		//In slave mode: slave reset communication and lines are released
		printf("Error: Communication Timeout\n");
 80014bc:	4815      	ldr	r0, [pc, #84]	; (8001514 <I2C_ApplicationEventCallback+0x13c>)
 80014be:	f000 f9a5 	bl	800180c <puts>
		I2C_CloseSendData(&hI2C1);
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 80014c4:	f7ff fc1c 	bl	8000d00 <I2C_CloseSendData>
		I2C_CloseReceiveData(&hI2C1);
 80014c8:	480e      	ldr	r0, [pc, #56]	; (8001504 <I2C_ApplicationEventCallback+0x12c>)
 80014ca:	f7ff fbe3 	bl	8000c94 <I2C_CloseReceiveData>
		while(1);
 80014ce:	e7fe      	b.n	80014ce <I2C_ApplicationEventCallback+0xf6>
		break;
	case I2C_EV_DATA_REQ:
		printf("Data request event\n");
 80014d0:	4811      	ldr	r0, [pc, #68]	; (8001518 <I2C_ApplicationEventCallback+0x140>)
 80014d2:	f000 f99b 	bl	800180c <puts>
		break;
 80014d6:	e007      	b.n	80014e8 <I2C_ApplicationEventCallback+0x110>
	case I2C_EV_DATA_RCV:
		printf("Data receive event\n");
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <I2C_ApplicationEventCallback+0x144>)
 80014da:	f000 f997 	bl	800180c <puts>
		break;
 80014de:	e003      	b.n	80014e8 <I2C_ApplicationEventCallback+0x110>
	default:
		printf("Something unexpected happened\n");
 80014e0:	480f      	ldr	r0, [pc, #60]	; (8001520 <I2C_ApplicationEventCallback+0x148>)
 80014e2:	f000 f993 	bl	800180c <puts>
		while(1);
 80014e6:	e7fe      	b.n	80014e6 <I2C_ApplicationEventCallback+0x10e>
	}
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	08002048 	.word	0x08002048
 80014f4:	08002058 	.word	0x08002058
 80014f8:	20000098 	.word	0x20000098
 80014fc:	08002068 	.word	0x08002068
 8001500:	08002080 	.word	0x08002080
 8001504:	200000a8 	.word	0x200000a8
 8001508:	08002094 	.word	0x08002094
 800150c:	080020ac 	.word	0x080020ac
 8001510:	080020c0 	.word	0x080020c0
 8001514:	080020d8 	.word	0x080020d8
 8001518:	080020f8 	.word	0x080020f8
 800151c:	0800210c 	.word	0x0800210c
 8001520:	08002120 	.word	0x08002120

08001524 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <ITM_SendChar+0x44>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <ITM_SendChar+0x44>)
 8001534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001538:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <ITM_SendChar+0x48>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <ITM_SendChar+0x48>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001546:	bf00      	nop
 8001548:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f8      	beq.n	8001548 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001556:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	6013      	str	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000edfc 	.word	0xe000edfc
 800156c:	e0000e00 	.word	0xe0000e00

08001570 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__ ((weak)) int _read(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e00a      	b.n	8001598 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001582:	f3af 8000 	nop.w
 8001586:	4601      	mov	r1, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf0      	blt.n	8001582 <_read+0x12>
	}
return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_write>:

int _write(int file, char *ptr, int len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e009      	b.n	80015d0 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffad 	bl	8001524 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf1      	blt.n	80015bc <_write+0x12>
	}
	return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_close>:
//
//	return (caddr_t) prev_heap_end;
//}

int _close(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001608:	605a      	str	r2, [r3, #4]
	return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
	return 0;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
	...

08001644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001646:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopForever+0x6>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopForever+0xa>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopForever+0xe>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopForever+0x16>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800166e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001672:	f000 f843 	bl	80016fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001676:	f7ff fdcf 	bl	8001218 <main>

0800167a <LoopForever>:

LoopForever:
    b LoopForever
 800167a:	e7fe      	b.n	800167a <LoopForever>
  ldr   r0, =_estack
 800167c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001688:	080021ac 	.word	0x080021ac
  ldr r2, =_sbss
 800168c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001690:	2000010c 	.word	0x2000010c

08001694 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>
	...

08001698 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x50>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x16>
		heap_end = &end;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <_sbrk+0x50>)
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <_sbrk+0x54>)
 80016ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <_sbrk+0x50>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <_sbrk+0x50>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	466a      	mov	r2, sp
 80016be:	4293      	cmp	r3, r2
 80016c0:	d907      	bls.n	80016d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016c2:	f000 f815 	bl	80016f0 <__errno>
 80016c6:	4602      	mov	r2, r0
 80016c8:	230c      	movs	r3, #12
 80016ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
 80016d0:	e006      	b.n	80016e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <_sbrk+0x50>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <_sbrk+0x50>)
 80016dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000009c 	.word	0x2000009c
 80016ec:	20000110 	.word	0x20000110

080016f0 <__errno>:
 80016f0:	4b01      	ldr	r3, [pc, #4]	; (80016f8 <__errno+0x8>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000018 	.word	0x20000018

080016fc <__libc_init_array>:
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	4e0d      	ldr	r6, [pc, #52]	; (8001734 <__libc_init_array+0x38>)
 8001700:	4c0d      	ldr	r4, [pc, #52]	; (8001738 <__libc_init_array+0x3c>)
 8001702:	1ba4      	subs	r4, r4, r6
 8001704:	10a4      	asrs	r4, r4, #2
 8001706:	2500      	movs	r5, #0
 8001708:	42a5      	cmp	r5, r4
 800170a:	d109      	bne.n	8001720 <__libc_init_array+0x24>
 800170c:	4e0b      	ldr	r6, [pc, #44]	; (800173c <__libc_init_array+0x40>)
 800170e:	4c0c      	ldr	r4, [pc, #48]	; (8001740 <__libc_init_array+0x44>)
 8001710:	f000 fc88 	bl	8002024 <_init>
 8001714:	1ba4      	subs	r4, r4, r6
 8001716:	10a4      	asrs	r4, r4, #2
 8001718:	2500      	movs	r5, #0
 800171a:	42a5      	cmp	r5, r4
 800171c:	d105      	bne.n	800172a <__libc_init_array+0x2e>
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001724:	4798      	blx	r3
 8001726:	3501      	adds	r5, #1
 8001728:	e7ee      	b.n	8001708 <__libc_init_array+0xc>
 800172a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800172e:	4798      	blx	r3
 8001730:	3501      	adds	r5, #1
 8001732:	e7f2      	b.n	800171a <__libc_init_array+0x1e>
 8001734:	080021a4 	.word	0x080021a4
 8001738:	080021a4 	.word	0x080021a4
 800173c:	080021a4 	.word	0x080021a4
 8001740:	080021a8 	.word	0x080021a8

08001744 <memset>:
 8001744:	4402      	add	r2, r0
 8001746:	4603      	mov	r3, r0
 8001748:	4293      	cmp	r3, r2
 800174a:	d100      	bne.n	800174e <memset+0xa>
 800174c:	4770      	bx	lr
 800174e:	f803 1b01 	strb.w	r1, [r3], #1
 8001752:	e7f9      	b.n	8001748 <memset+0x4>

08001754 <_puts_r>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	460e      	mov	r6, r1
 8001758:	4605      	mov	r5, r0
 800175a:	b118      	cbz	r0, 8001764 <_puts_r+0x10>
 800175c:	6983      	ldr	r3, [r0, #24]
 800175e:	b90b      	cbnz	r3, 8001764 <_puts_r+0x10>
 8001760:	f000 fa0c 	bl	8001b7c <__sinit>
 8001764:	69ab      	ldr	r3, [r5, #24]
 8001766:	68ac      	ldr	r4, [r5, #8]
 8001768:	b913      	cbnz	r3, 8001770 <_puts_r+0x1c>
 800176a:	4628      	mov	r0, r5
 800176c:	f000 fa06 	bl	8001b7c <__sinit>
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <_puts_r+0xac>)
 8001772:	429c      	cmp	r4, r3
 8001774:	d117      	bne.n	80017a6 <_puts_r+0x52>
 8001776:	686c      	ldr	r4, [r5, #4]
 8001778:	89a3      	ldrh	r3, [r4, #12]
 800177a:	071b      	lsls	r3, r3, #28
 800177c:	d51d      	bpl.n	80017ba <_puts_r+0x66>
 800177e:	6923      	ldr	r3, [r4, #16]
 8001780:	b1db      	cbz	r3, 80017ba <_puts_r+0x66>
 8001782:	3e01      	subs	r6, #1
 8001784:	68a3      	ldr	r3, [r4, #8]
 8001786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800178a:	3b01      	subs	r3, #1
 800178c:	60a3      	str	r3, [r4, #8]
 800178e:	b9e9      	cbnz	r1, 80017cc <_puts_r+0x78>
 8001790:	2b00      	cmp	r3, #0
 8001792:	da2e      	bge.n	80017f2 <_puts_r+0x9e>
 8001794:	4622      	mov	r2, r4
 8001796:	210a      	movs	r1, #10
 8001798:	4628      	mov	r0, r5
 800179a:	f000 f83f 	bl	800181c <__swbuf_r>
 800179e:	3001      	adds	r0, #1
 80017a0:	d011      	beq.n	80017c6 <_puts_r+0x72>
 80017a2:	200a      	movs	r0, #10
 80017a4:	e011      	b.n	80017ca <_puts_r+0x76>
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <_puts_r+0xb0>)
 80017a8:	429c      	cmp	r4, r3
 80017aa:	d101      	bne.n	80017b0 <_puts_r+0x5c>
 80017ac:	68ac      	ldr	r4, [r5, #8]
 80017ae:	e7e3      	b.n	8001778 <_puts_r+0x24>
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <_puts_r+0xb4>)
 80017b2:	429c      	cmp	r4, r3
 80017b4:	bf08      	it	eq
 80017b6:	68ec      	ldreq	r4, [r5, #12]
 80017b8:	e7de      	b.n	8001778 <_puts_r+0x24>
 80017ba:	4621      	mov	r1, r4
 80017bc:	4628      	mov	r0, r5
 80017be:	f000 f87f 	bl	80018c0 <__swsetup_r>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d0dd      	beq.n	8001782 <_puts_r+0x2e>
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da04      	bge.n	80017da <_puts_r+0x86>
 80017d0:	69a2      	ldr	r2, [r4, #24]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dc06      	bgt.n	80017e4 <_puts_r+0x90>
 80017d6:	290a      	cmp	r1, #10
 80017d8:	d004      	beq.n	80017e4 <_puts_r+0x90>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	6022      	str	r2, [r4, #0]
 80017e0:	7019      	strb	r1, [r3, #0]
 80017e2:	e7cf      	b.n	8001784 <_puts_r+0x30>
 80017e4:	4622      	mov	r2, r4
 80017e6:	4628      	mov	r0, r5
 80017e8:	f000 f818 	bl	800181c <__swbuf_r>
 80017ec:	3001      	adds	r0, #1
 80017ee:	d1c9      	bne.n	8001784 <_puts_r+0x30>
 80017f0:	e7e9      	b.n	80017c6 <_puts_r+0x72>
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	200a      	movs	r0, #10
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	6022      	str	r2, [r4, #0]
 80017fa:	7018      	strb	r0, [r3, #0]
 80017fc:	e7e5      	b.n	80017ca <_puts_r+0x76>
 80017fe:	bf00      	nop
 8001800:	08002164 	.word	0x08002164
 8001804:	08002184 	.word	0x08002184
 8001808:	08002144 	.word	0x08002144

0800180c <puts>:
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <puts+0xc>)
 800180e:	4601      	mov	r1, r0
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	f7ff bf9f 	b.w	8001754 <_puts_r>
 8001816:	bf00      	nop
 8001818:	20000018 	.word	0x20000018

0800181c <__swbuf_r>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	460e      	mov	r6, r1
 8001820:	4614      	mov	r4, r2
 8001822:	4605      	mov	r5, r0
 8001824:	b118      	cbz	r0, 800182e <__swbuf_r+0x12>
 8001826:	6983      	ldr	r3, [r0, #24]
 8001828:	b90b      	cbnz	r3, 800182e <__swbuf_r+0x12>
 800182a:	f000 f9a7 	bl	8001b7c <__sinit>
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <__swbuf_r+0x98>)
 8001830:	429c      	cmp	r4, r3
 8001832:	d12a      	bne.n	800188a <__swbuf_r+0x6e>
 8001834:	686c      	ldr	r4, [r5, #4]
 8001836:	69a3      	ldr	r3, [r4, #24]
 8001838:	60a3      	str	r3, [r4, #8]
 800183a:	89a3      	ldrh	r3, [r4, #12]
 800183c:	071a      	lsls	r2, r3, #28
 800183e:	d52e      	bpl.n	800189e <__swbuf_r+0x82>
 8001840:	6923      	ldr	r3, [r4, #16]
 8001842:	b363      	cbz	r3, 800189e <__swbuf_r+0x82>
 8001844:	6923      	ldr	r3, [r4, #16]
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	1ac0      	subs	r0, r0, r3
 800184a:	6963      	ldr	r3, [r4, #20]
 800184c:	b2f6      	uxtb	r6, r6
 800184e:	4283      	cmp	r3, r0
 8001850:	4637      	mov	r7, r6
 8001852:	dc04      	bgt.n	800185e <__swbuf_r+0x42>
 8001854:	4621      	mov	r1, r4
 8001856:	4628      	mov	r0, r5
 8001858:	f000 f926 	bl	8001aa8 <_fflush_r>
 800185c:	bb28      	cbnz	r0, 80018aa <__swbuf_r+0x8e>
 800185e:	68a3      	ldr	r3, [r4, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	60a3      	str	r3, [r4, #8]
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	6022      	str	r2, [r4, #0]
 800186a:	701e      	strb	r6, [r3, #0]
 800186c:	6963      	ldr	r3, [r4, #20]
 800186e:	3001      	adds	r0, #1
 8001870:	4283      	cmp	r3, r0
 8001872:	d004      	beq.n	800187e <__swbuf_r+0x62>
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	07db      	lsls	r3, r3, #31
 8001878:	d519      	bpl.n	80018ae <__swbuf_r+0x92>
 800187a:	2e0a      	cmp	r6, #10
 800187c:	d117      	bne.n	80018ae <__swbuf_r+0x92>
 800187e:	4621      	mov	r1, r4
 8001880:	4628      	mov	r0, r5
 8001882:	f000 f911 	bl	8001aa8 <_fflush_r>
 8001886:	b190      	cbz	r0, 80018ae <__swbuf_r+0x92>
 8001888:	e00f      	b.n	80018aa <__swbuf_r+0x8e>
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <__swbuf_r+0x9c>)
 800188c:	429c      	cmp	r4, r3
 800188e:	d101      	bne.n	8001894 <__swbuf_r+0x78>
 8001890:	68ac      	ldr	r4, [r5, #8]
 8001892:	e7d0      	b.n	8001836 <__swbuf_r+0x1a>
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <__swbuf_r+0xa0>)
 8001896:	429c      	cmp	r4, r3
 8001898:	bf08      	it	eq
 800189a:	68ec      	ldreq	r4, [r5, #12]
 800189c:	e7cb      	b.n	8001836 <__swbuf_r+0x1a>
 800189e:	4621      	mov	r1, r4
 80018a0:	4628      	mov	r0, r5
 80018a2:	f000 f80d 	bl	80018c0 <__swsetup_r>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d0cc      	beq.n	8001844 <__swbuf_r+0x28>
 80018aa:	f04f 37ff 	mov.w	r7, #4294967295
 80018ae:	4638      	mov	r0, r7
 80018b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08002164 	.word	0x08002164
 80018b8:	08002184 	.word	0x08002184
 80018bc:	08002144 	.word	0x08002144

080018c0 <__swsetup_r>:
 80018c0:	4b32      	ldr	r3, [pc, #200]	; (800198c <__swsetup_r+0xcc>)
 80018c2:	b570      	push	{r4, r5, r6, lr}
 80018c4:	681d      	ldr	r5, [r3, #0]
 80018c6:	4606      	mov	r6, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	b125      	cbz	r5, 80018d6 <__swsetup_r+0x16>
 80018cc:	69ab      	ldr	r3, [r5, #24]
 80018ce:	b913      	cbnz	r3, 80018d6 <__swsetup_r+0x16>
 80018d0:	4628      	mov	r0, r5
 80018d2:	f000 f953 	bl	8001b7c <__sinit>
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <__swsetup_r+0xd0>)
 80018d8:	429c      	cmp	r4, r3
 80018da:	d10f      	bne.n	80018fc <__swsetup_r+0x3c>
 80018dc:	686c      	ldr	r4, [r5, #4]
 80018de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	0715      	lsls	r5, r2, #28
 80018e6:	d42c      	bmi.n	8001942 <__swsetup_r+0x82>
 80018e8:	06d0      	lsls	r0, r2, #27
 80018ea:	d411      	bmi.n	8001910 <__swsetup_r+0x50>
 80018ec:	2209      	movs	r2, #9
 80018ee:	6032      	str	r2, [r6, #0]
 80018f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f4:	81a3      	strh	r3, [r4, #12]
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
 80018fa:	e03e      	b.n	800197a <__swsetup_r+0xba>
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <__swsetup_r+0xd4>)
 80018fe:	429c      	cmp	r4, r3
 8001900:	d101      	bne.n	8001906 <__swsetup_r+0x46>
 8001902:	68ac      	ldr	r4, [r5, #8]
 8001904:	e7eb      	b.n	80018de <__swsetup_r+0x1e>
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <__swsetup_r+0xd8>)
 8001908:	429c      	cmp	r4, r3
 800190a:	bf08      	it	eq
 800190c:	68ec      	ldreq	r4, [r5, #12]
 800190e:	e7e6      	b.n	80018de <__swsetup_r+0x1e>
 8001910:	0751      	lsls	r1, r2, #29
 8001912:	d512      	bpl.n	800193a <__swsetup_r+0x7a>
 8001914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001916:	b141      	cbz	r1, 800192a <__swsetup_r+0x6a>
 8001918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800191c:	4299      	cmp	r1, r3
 800191e:	d002      	beq.n	8001926 <__swsetup_r+0x66>
 8001920:	4630      	mov	r0, r6
 8001922:	f000 fa19 	bl	8001d58 <_free_r>
 8001926:	2300      	movs	r3, #0
 8001928:	6363      	str	r3, [r4, #52]	; 0x34
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001930:	81a3      	strh	r3, [r4, #12]
 8001932:	2300      	movs	r3, #0
 8001934:	6063      	str	r3, [r4, #4]
 8001936:	6923      	ldr	r3, [r4, #16]
 8001938:	6023      	str	r3, [r4, #0]
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	6923      	ldr	r3, [r4, #16]
 8001944:	b94b      	cbnz	r3, 800195a <__swsetup_r+0x9a>
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800194c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001950:	d003      	beq.n	800195a <__swsetup_r+0x9a>
 8001952:	4621      	mov	r1, r4
 8001954:	4630      	mov	r0, r6
 8001956:	f000 f9bf 	bl	8001cd8 <__smakebuf_r>
 800195a:	89a2      	ldrh	r2, [r4, #12]
 800195c:	f012 0301 	ands.w	r3, r2, #1
 8001960:	d00c      	beq.n	800197c <__swsetup_r+0xbc>
 8001962:	2300      	movs	r3, #0
 8001964:	60a3      	str	r3, [r4, #8]
 8001966:	6963      	ldr	r3, [r4, #20]
 8001968:	425b      	negs	r3, r3
 800196a:	61a3      	str	r3, [r4, #24]
 800196c:	6923      	ldr	r3, [r4, #16]
 800196e:	b953      	cbnz	r3, 8001986 <__swsetup_r+0xc6>
 8001970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001974:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001978:	d1ba      	bne.n	80018f0 <__swsetup_r+0x30>
 800197a:	bd70      	pop	{r4, r5, r6, pc}
 800197c:	0792      	lsls	r2, r2, #30
 800197e:	bf58      	it	pl
 8001980:	6963      	ldrpl	r3, [r4, #20]
 8001982:	60a3      	str	r3, [r4, #8]
 8001984:	e7f2      	b.n	800196c <__swsetup_r+0xac>
 8001986:	2000      	movs	r0, #0
 8001988:	e7f7      	b.n	800197a <__swsetup_r+0xba>
 800198a:	bf00      	nop
 800198c:	20000018 	.word	0x20000018
 8001990:	08002164 	.word	0x08002164
 8001994:	08002184 	.word	0x08002184
 8001998:	08002144 	.word	0x08002144

0800199c <__sflush_r>:
 800199c:	898a      	ldrh	r2, [r1, #12]
 800199e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a2:	4605      	mov	r5, r0
 80019a4:	0710      	lsls	r0, r2, #28
 80019a6:	460c      	mov	r4, r1
 80019a8:	d458      	bmi.n	8001a5c <__sflush_r+0xc0>
 80019aa:	684b      	ldr	r3, [r1, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dc05      	bgt.n	80019bc <__sflush_r+0x20>
 80019b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dc02      	bgt.n	80019bc <__sflush_r+0x20>
 80019b6:	2000      	movs	r0, #0
 80019b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019be:	2e00      	cmp	r6, #0
 80019c0:	d0f9      	beq.n	80019b6 <__sflush_r+0x1a>
 80019c2:	2300      	movs	r3, #0
 80019c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019c8:	682f      	ldr	r7, [r5, #0]
 80019ca:	6a21      	ldr	r1, [r4, #32]
 80019cc:	602b      	str	r3, [r5, #0]
 80019ce:	d032      	beq.n	8001a36 <__sflush_r+0x9a>
 80019d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019d2:	89a3      	ldrh	r3, [r4, #12]
 80019d4:	075a      	lsls	r2, r3, #29
 80019d6:	d505      	bpl.n	80019e4 <__sflush_r+0x48>
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	1ac0      	subs	r0, r0, r3
 80019dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019de:	b10b      	cbz	r3, 80019e4 <__sflush_r+0x48>
 80019e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019e2:	1ac0      	subs	r0, r0, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	4602      	mov	r2, r0
 80019e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ea:	6a21      	ldr	r1, [r4, #32]
 80019ec:	4628      	mov	r0, r5
 80019ee:	47b0      	blx	r6
 80019f0:	1c43      	adds	r3, r0, #1
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	d106      	bne.n	8001a04 <__sflush_r+0x68>
 80019f6:	6829      	ldr	r1, [r5, #0]
 80019f8:	291d      	cmp	r1, #29
 80019fa:	d848      	bhi.n	8001a8e <__sflush_r+0xf2>
 80019fc:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <__sflush_r+0x108>)
 80019fe:	40ca      	lsrs	r2, r1
 8001a00:	07d6      	lsls	r6, r2, #31
 8001a02:	d544      	bpl.n	8001a8e <__sflush_r+0xf2>
 8001a04:	2200      	movs	r2, #0
 8001a06:	6062      	str	r2, [r4, #4]
 8001a08:	04d9      	lsls	r1, r3, #19
 8001a0a:	6922      	ldr	r2, [r4, #16]
 8001a0c:	6022      	str	r2, [r4, #0]
 8001a0e:	d504      	bpl.n	8001a1a <__sflush_r+0x7e>
 8001a10:	1c42      	adds	r2, r0, #1
 8001a12:	d101      	bne.n	8001a18 <__sflush_r+0x7c>
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	b903      	cbnz	r3, 8001a1a <__sflush_r+0x7e>
 8001a18:	6560      	str	r0, [r4, #84]	; 0x54
 8001a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a1c:	602f      	str	r7, [r5, #0]
 8001a1e:	2900      	cmp	r1, #0
 8001a20:	d0c9      	beq.n	80019b6 <__sflush_r+0x1a>
 8001a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a26:	4299      	cmp	r1, r3
 8001a28:	d002      	beq.n	8001a30 <__sflush_r+0x94>
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f000 f994 	bl	8001d58 <_free_r>
 8001a30:	2000      	movs	r0, #0
 8001a32:	6360      	str	r0, [r4, #52]	; 0x34
 8001a34:	e7c0      	b.n	80019b8 <__sflush_r+0x1c>
 8001a36:	2301      	movs	r3, #1
 8001a38:	4628      	mov	r0, r5
 8001a3a:	47b0      	blx	r6
 8001a3c:	1c41      	adds	r1, r0, #1
 8001a3e:	d1c8      	bne.n	80019d2 <__sflush_r+0x36>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0c5      	beq.n	80019d2 <__sflush_r+0x36>
 8001a46:	2b1d      	cmp	r3, #29
 8001a48:	d001      	beq.n	8001a4e <__sflush_r+0xb2>
 8001a4a:	2b16      	cmp	r3, #22
 8001a4c:	d101      	bne.n	8001a52 <__sflush_r+0xb6>
 8001a4e:	602f      	str	r7, [r5, #0]
 8001a50:	e7b1      	b.n	80019b6 <__sflush_r+0x1a>
 8001a52:	89a3      	ldrh	r3, [r4, #12]
 8001a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a58:	81a3      	strh	r3, [r4, #12]
 8001a5a:	e7ad      	b.n	80019b8 <__sflush_r+0x1c>
 8001a5c:	690f      	ldr	r7, [r1, #16]
 8001a5e:	2f00      	cmp	r7, #0
 8001a60:	d0a9      	beq.n	80019b6 <__sflush_r+0x1a>
 8001a62:	0793      	lsls	r3, r2, #30
 8001a64:	680e      	ldr	r6, [r1, #0]
 8001a66:	bf08      	it	eq
 8001a68:	694b      	ldreq	r3, [r1, #20]
 8001a6a:	600f      	str	r7, [r1, #0]
 8001a6c:	bf18      	it	ne
 8001a6e:	2300      	movne	r3, #0
 8001a70:	eba6 0807 	sub.w	r8, r6, r7
 8001a74:	608b      	str	r3, [r1, #8]
 8001a76:	f1b8 0f00 	cmp.w	r8, #0
 8001a7a:	dd9c      	ble.n	80019b6 <__sflush_r+0x1a>
 8001a7c:	4643      	mov	r3, r8
 8001a7e:	463a      	mov	r2, r7
 8001a80:	6a21      	ldr	r1, [r4, #32]
 8001a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a84:	4628      	mov	r0, r5
 8001a86:	47b0      	blx	r6
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	dc06      	bgt.n	8001a9a <__sflush_r+0xfe>
 8001a8c:	89a3      	ldrh	r3, [r4, #12]
 8001a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a92:	81a3      	strh	r3, [r4, #12]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	e78e      	b.n	80019b8 <__sflush_r+0x1c>
 8001a9a:	4407      	add	r7, r0
 8001a9c:	eba8 0800 	sub.w	r8, r8, r0
 8001aa0:	e7e9      	b.n	8001a76 <__sflush_r+0xda>
 8001aa2:	bf00      	nop
 8001aa4:	20400001 	.word	0x20400001

08001aa8 <_fflush_r>:
 8001aa8:	b538      	push	{r3, r4, r5, lr}
 8001aaa:	690b      	ldr	r3, [r1, #16]
 8001aac:	4605      	mov	r5, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	b1db      	cbz	r3, 8001aea <_fflush_r+0x42>
 8001ab2:	b118      	cbz	r0, 8001abc <_fflush_r+0x14>
 8001ab4:	6983      	ldr	r3, [r0, #24]
 8001ab6:	b90b      	cbnz	r3, 8001abc <_fflush_r+0x14>
 8001ab8:	f000 f860 	bl	8001b7c <__sinit>
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <_fflush_r+0x48>)
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	d109      	bne.n	8001ad6 <_fflush_r+0x2e>
 8001ac2:	686c      	ldr	r4, [r5, #4]
 8001ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ac8:	b17b      	cbz	r3, 8001aea <_fflush_r+0x42>
 8001aca:	4621      	mov	r1, r4
 8001acc:	4628      	mov	r0, r5
 8001ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ad2:	f7ff bf63 	b.w	800199c <__sflush_r>
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <_fflush_r+0x4c>)
 8001ad8:	429c      	cmp	r4, r3
 8001ada:	d101      	bne.n	8001ae0 <_fflush_r+0x38>
 8001adc:	68ac      	ldr	r4, [r5, #8]
 8001ade:	e7f1      	b.n	8001ac4 <_fflush_r+0x1c>
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <_fflush_r+0x50>)
 8001ae2:	429c      	cmp	r4, r3
 8001ae4:	bf08      	it	eq
 8001ae6:	68ec      	ldreq	r4, [r5, #12]
 8001ae8:	e7ec      	b.n	8001ac4 <_fflush_r+0x1c>
 8001aea:	2000      	movs	r0, #0
 8001aec:	bd38      	pop	{r3, r4, r5, pc}
 8001aee:	bf00      	nop
 8001af0:	08002164 	.word	0x08002164
 8001af4:	08002184 	.word	0x08002184
 8001af8:	08002144 	.word	0x08002144

08001afc <std>:
 8001afc:	2300      	movs	r3, #0
 8001afe:	b510      	push	{r4, lr}
 8001b00:	4604      	mov	r4, r0
 8001b02:	e9c0 3300 	strd	r3, r3, [r0]
 8001b06:	6083      	str	r3, [r0, #8]
 8001b08:	8181      	strh	r1, [r0, #12]
 8001b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8001b0c:	81c2      	strh	r2, [r0, #14]
 8001b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b12:	6183      	str	r3, [r0, #24]
 8001b14:	4619      	mov	r1, r3
 8001b16:	2208      	movs	r2, #8
 8001b18:	305c      	adds	r0, #92	; 0x5c
 8001b1a:	f7ff fe13 	bl	8001744 <memset>
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <std+0x38>)
 8001b20:	6263      	str	r3, [r4, #36]	; 0x24
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <std+0x3c>)
 8001b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <std+0x40>)
 8001b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <std+0x44>)
 8001b2c:	6224      	str	r4, [r4, #32]
 8001b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8001b30:	bd10      	pop	{r4, pc}
 8001b32:	bf00      	nop
 8001b34:	08001ec9 	.word	0x08001ec9
 8001b38:	08001eeb 	.word	0x08001eeb
 8001b3c:	08001f23 	.word	0x08001f23
 8001b40:	08001f47 	.word	0x08001f47

08001b44 <_cleanup_r>:
 8001b44:	4901      	ldr	r1, [pc, #4]	; (8001b4c <_cleanup_r+0x8>)
 8001b46:	f000 b885 	b.w	8001c54 <_fwalk_reent>
 8001b4a:	bf00      	nop
 8001b4c:	08001aa9 	.word	0x08001aa9

08001b50 <__sfmoreglue>:
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	1e4a      	subs	r2, r1, #1
 8001b54:	2568      	movs	r5, #104	; 0x68
 8001b56:	4355      	muls	r5, r2
 8001b58:	460e      	mov	r6, r1
 8001b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b5e:	f000 f949 	bl	8001df4 <_malloc_r>
 8001b62:	4604      	mov	r4, r0
 8001b64:	b140      	cbz	r0, 8001b78 <__sfmoreglue+0x28>
 8001b66:	2100      	movs	r1, #0
 8001b68:	e9c0 1600 	strd	r1, r6, [r0]
 8001b6c:	300c      	adds	r0, #12
 8001b6e:	60a0      	str	r0, [r4, #8]
 8001b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b74:	f7ff fde6 	bl	8001744 <memset>
 8001b78:	4620      	mov	r0, r4
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}

08001b7c <__sinit>:
 8001b7c:	6983      	ldr	r3, [r0, #24]
 8001b7e:	b510      	push	{r4, lr}
 8001b80:	4604      	mov	r4, r0
 8001b82:	bb33      	cbnz	r3, 8001bd2 <__sinit+0x56>
 8001b84:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b88:	6503      	str	r3, [r0, #80]	; 0x50
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <__sinit+0x58>)
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <__sinit+0x5c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6282      	str	r2, [r0, #40]	; 0x28
 8001b92:	4298      	cmp	r0, r3
 8001b94:	bf04      	itt	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	6183      	streq	r3, [r0, #24]
 8001b9a:	f000 f81f 	bl	8001bdc <__sfp>
 8001b9e:	6060      	str	r0, [r4, #4]
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f000 f81b 	bl	8001bdc <__sfp>
 8001ba6:	60a0      	str	r0, [r4, #8]
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f000 f817 	bl	8001bdc <__sfp>
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60e0      	str	r0, [r4, #12]
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	6860      	ldr	r0, [r4, #4]
 8001bb6:	f7ff ffa1 	bl	8001afc <std>
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2109      	movs	r1, #9
 8001bbe:	68a0      	ldr	r0, [r4, #8]
 8001bc0:	f7ff ff9c 	bl	8001afc <std>
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	2112      	movs	r1, #18
 8001bc8:	68e0      	ldr	r0, [r4, #12]
 8001bca:	f7ff ff97 	bl	8001afc <std>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61a3      	str	r3, [r4, #24]
 8001bd2:	bd10      	pop	{r4, pc}
 8001bd4:	08002140 	.word	0x08002140
 8001bd8:	08001b45 	.word	0x08001b45

08001bdc <__sfp>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <__sfp+0x70>)
 8001be0:	681e      	ldr	r6, [r3, #0]
 8001be2:	69b3      	ldr	r3, [r6, #24]
 8001be4:	4607      	mov	r7, r0
 8001be6:	b913      	cbnz	r3, 8001bee <__sfp+0x12>
 8001be8:	4630      	mov	r0, r6
 8001bea:	f7ff ffc7 	bl	8001b7c <__sinit>
 8001bee:	3648      	adds	r6, #72	; 0x48
 8001bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	d503      	bpl.n	8001c00 <__sfp+0x24>
 8001bf8:	6833      	ldr	r3, [r6, #0]
 8001bfa:	b133      	cbz	r3, 8001c0a <__sfp+0x2e>
 8001bfc:	6836      	ldr	r6, [r6, #0]
 8001bfe:	e7f7      	b.n	8001bf0 <__sfp+0x14>
 8001c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c04:	b16d      	cbz	r5, 8001c22 <__sfp+0x46>
 8001c06:	3468      	adds	r4, #104	; 0x68
 8001c08:	e7f4      	b.n	8001bf4 <__sfp+0x18>
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	4638      	mov	r0, r7
 8001c0e:	f7ff ff9f 	bl	8001b50 <__sfmoreglue>
 8001c12:	6030      	str	r0, [r6, #0]
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d1f1      	bne.n	8001bfc <__sfp+0x20>
 8001c18:	230c      	movs	r3, #12
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	4620      	mov	r0, r4
 8001c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <__sfp+0x74>)
 8001c24:	6665      	str	r5, [r4, #100]	; 0x64
 8001c26:	e9c4 5500 	strd	r5, r5, [r4]
 8001c2a:	60a5      	str	r5, [r4, #8]
 8001c2c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001c30:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001c34:	2208      	movs	r2, #8
 8001c36:	4629      	mov	r1, r5
 8001c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c3c:	f7ff fd82 	bl	8001744 <memset>
 8001c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c48:	e7e9      	b.n	8001c1e <__sfp+0x42>
 8001c4a:	bf00      	nop
 8001c4c:	08002140 	.word	0x08002140
 8001c50:	ffff0001 	.word	0xffff0001

08001c54 <_fwalk_reent>:
 8001c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c58:	4680      	mov	r8, r0
 8001c5a:	4689      	mov	r9, r1
 8001c5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c60:	2600      	movs	r6, #0
 8001c62:	b914      	cbnz	r4, 8001c6a <_fwalk_reent+0x16>
 8001c64:	4630      	mov	r0, r6
 8001c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c6e:	3f01      	subs	r7, #1
 8001c70:	d501      	bpl.n	8001c76 <_fwalk_reent+0x22>
 8001c72:	6824      	ldr	r4, [r4, #0]
 8001c74:	e7f5      	b.n	8001c62 <_fwalk_reent+0xe>
 8001c76:	89ab      	ldrh	r3, [r5, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d907      	bls.n	8001c8c <_fwalk_reent+0x38>
 8001c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c80:	3301      	adds	r3, #1
 8001c82:	d003      	beq.n	8001c8c <_fwalk_reent+0x38>
 8001c84:	4629      	mov	r1, r5
 8001c86:	4640      	mov	r0, r8
 8001c88:	47c8      	blx	r9
 8001c8a:	4306      	orrs	r6, r0
 8001c8c:	3568      	adds	r5, #104	; 0x68
 8001c8e:	e7ee      	b.n	8001c6e <_fwalk_reent+0x1a>

08001c90 <__swhatbuf_r>:
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	460e      	mov	r6, r1
 8001c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	b096      	sub	sp, #88	; 0x58
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	da07      	bge.n	8001cb2 <__swhatbuf_r+0x22>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	602b      	str	r3, [r5, #0]
 8001ca6:	89b3      	ldrh	r3, [r6, #12]
 8001ca8:	061a      	lsls	r2, r3, #24
 8001caa:	d410      	bmi.n	8001cce <__swhatbuf_r+0x3e>
 8001cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb0:	e00e      	b.n	8001cd0 <__swhatbuf_r+0x40>
 8001cb2:	466a      	mov	r2, sp
 8001cb4:	f000 f96e 	bl	8001f94 <_fstat_r>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	dbf2      	blt.n	8001ca2 <__swhatbuf_r+0x12>
 8001cbc:	9a01      	ldr	r2, [sp, #4]
 8001cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001cc6:	425a      	negs	r2, r3
 8001cc8:	415a      	adcs	r2, r3
 8001cca:	602a      	str	r2, [r5, #0]
 8001ccc:	e7ee      	b.n	8001cac <__swhatbuf_r+0x1c>
 8001cce:	2340      	movs	r3, #64	; 0x40
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	6023      	str	r3, [r4, #0]
 8001cd4:	b016      	add	sp, #88	; 0x58
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}

08001cd8 <__smakebuf_r>:
 8001cd8:	898b      	ldrh	r3, [r1, #12]
 8001cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cdc:	079d      	lsls	r5, r3, #30
 8001cde:	4606      	mov	r6, r0
 8001ce0:	460c      	mov	r4, r1
 8001ce2:	d507      	bpl.n	8001cf4 <__smakebuf_r+0x1c>
 8001ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ce8:	6023      	str	r3, [r4, #0]
 8001cea:	6123      	str	r3, [r4, #16]
 8001cec:	2301      	movs	r3, #1
 8001cee:	6163      	str	r3, [r4, #20]
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}
 8001cf4:	ab01      	add	r3, sp, #4
 8001cf6:	466a      	mov	r2, sp
 8001cf8:	f7ff ffca 	bl	8001c90 <__swhatbuf_r>
 8001cfc:	9900      	ldr	r1, [sp, #0]
 8001cfe:	4605      	mov	r5, r0
 8001d00:	4630      	mov	r0, r6
 8001d02:	f000 f877 	bl	8001df4 <_malloc_r>
 8001d06:	b948      	cbnz	r0, 8001d1c <__smakebuf_r+0x44>
 8001d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d0c:	059a      	lsls	r2, r3, #22
 8001d0e:	d4ef      	bmi.n	8001cf0 <__smakebuf_r+0x18>
 8001d10:	f023 0303 	bic.w	r3, r3, #3
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	81a3      	strh	r3, [r4, #12]
 8001d1a:	e7e3      	b.n	8001ce4 <__smakebuf_r+0xc>
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <__smakebuf_r+0x7c>)
 8001d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d20:	89a3      	ldrh	r3, [r4, #12]
 8001d22:	6020      	str	r0, [r4, #0]
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	81a3      	strh	r3, [r4, #12]
 8001d2a:	9b00      	ldr	r3, [sp, #0]
 8001d2c:	6163      	str	r3, [r4, #20]
 8001d2e:	9b01      	ldr	r3, [sp, #4]
 8001d30:	6120      	str	r0, [r4, #16]
 8001d32:	b15b      	cbz	r3, 8001d4c <__smakebuf_r+0x74>
 8001d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f000 f93d 	bl	8001fb8 <_isatty_r>
 8001d3e:	b128      	cbz	r0, 8001d4c <__smakebuf_r+0x74>
 8001d40:	89a3      	ldrh	r3, [r4, #12]
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	81a3      	strh	r3, [r4, #12]
 8001d4c:	89a3      	ldrh	r3, [r4, #12]
 8001d4e:	431d      	orrs	r5, r3
 8001d50:	81a5      	strh	r5, [r4, #12]
 8001d52:	e7cd      	b.n	8001cf0 <__smakebuf_r+0x18>
 8001d54:	08001b45 	.word	0x08001b45

08001d58 <_free_r>:
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4605      	mov	r5, r0
 8001d5c:	2900      	cmp	r1, #0
 8001d5e:	d045      	beq.n	8001dec <_free_r+0x94>
 8001d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d64:	1f0c      	subs	r4, r1, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bfb8      	it	lt
 8001d6a:	18e4      	addlt	r4, r4, r3
 8001d6c:	f000 f946 	bl	8001ffc <__malloc_lock>
 8001d70:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <_free_r+0x98>)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	4610      	mov	r0, r2
 8001d76:	b933      	cbnz	r3, 8001d86 <_free_r+0x2e>
 8001d78:	6063      	str	r3, [r4, #4]
 8001d7a:	6014      	str	r4, [r2, #0]
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d82:	f000 b93c 	b.w	8001ffe <__malloc_unlock>
 8001d86:	42a3      	cmp	r3, r4
 8001d88:	d90c      	bls.n	8001da4 <_free_r+0x4c>
 8001d8a:	6821      	ldr	r1, [r4, #0]
 8001d8c:	1862      	adds	r2, r4, r1
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	bf04      	itt	eq
 8001d92:	681a      	ldreq	r2, [r3, #0]
 8001d94:	685b      	ldreq	r3, [r3, #4]
 8001d96:	6063      	str	r3, [r4, #4]
 8001d98:	bf04      	itt	eq
 8001d9a:	1852      	addeq	r2, r2, r1
 8001d9c:	6022      	streq	r2, [r4, #0]
 8001d9e:	6004      	str	r4, [r0, #0]
 8001da0:	e7ec      	b.n	8001d7c <_free_r+0x24>
 8001da2:	4613      	mov	r3, r2
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	b10a      	cbz	r2, 8001dac <_free_r+0x54>
 8001da8:	42a2      	cmp	r2, r4
 8001daa:	d9fa      	bls.n	8001da2 <_free_r+0x4a>
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	1858      	adds	r0, r3, r1
 8001db0:	42a0      	cmp	r0, r4
 8001db2:	d10b      	bne.n	8001dcc <_free_r+0x74>
 8001db4:	6820      	ldr	r0, [r4, #0]
 8001db6:	4401      	add	r1, r0
 8001db8:	1858      	adds	r0, r3, r1
 8001dba:	4282      	cmp	r2, r0
 8001dbc:	6019      	str	r1, [r3, #0]
 8001dbe:	d1dd      	bne.n	8001d7c <_free_r+0x24>
 8001dc0:	6810      	ldr	r0, [r2, #0]
 8001dc2:	6852      	ldr	r2, [r2, #4]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	4401      	add	r1, r0
 8001dc8:	6019      	str	r1, [r3, #0]
 8001dca:	e7d7      	b.n	8001d7c <_free_r+0x24>
 8001dcc:	d902      	bls.n	8001dd4 <_free_r+0x7c>
 8001dce:	230c      	movs	r3, #12
 8001dd0:	602b      	str	r3, [r5, #0]
 8001dd2:	e7d3      	b.n	8001d7c <_free_r+0x24>
 8001dd4:	6820      	ldr	r0, [r4, #0]
 8001dd6:	1821      	adds	r1, r4, r0
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	bf04      	itt	eq
 8001ddc:	6811      	ldreq	r1, [r2, #0]
 8001dde:	6852      	ldreq	r2, [r2, #4]
 8001de0:	6062      	str	r2, [r4, #4]
 8001de2:	bf04      	itt	eq
 8001de4:	1809      	addeq	r1, r1, r0
 8001de6:	6021      	streq	r1, [r4, #0]
 8001de8:	605c      	str	r4, [r3, #4]
 8001dea:	e7c7      	b.n	8001d7c <_free_r+0x24>
 8001dec:	bd38      	pop	{r3, r4, r5, pc}
 8001dee:	bf00      	nop
 8001df0:	200000a0 	.word	0x200000a0

08001df4 <_malloc_r>:
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	1ccd      	adds	r5, r1, #3
 8001df8:	f025 0503 	bic.w	r5, r5, #3
 8001dfc:	3508      	adds	r5, #8
 8001dfe:	2d0c      	cmp	r5, #12
 8001e00:	bf38      	it	cc
 8001e02:	250c      	movcc	r5, #12
 8001e04:	2d00      	cmp	r5, #0
 8001e06:	4606      	mov	r6, r0
 8001e08:	db01      	blt.n	8001e0e <_malloc_r+0x1a>
 8001e0a:	42a9      	cmp	r1, r5
 8001e0c:	d903      	bls.n	8001e16 <_malloc_r+0x22>
 8001e0e:	230c      	movs	r3, #12
 8001e10:	6033      	str	r3, [r6, #0]
 8001e12:	2000      	movs	r0, #0
 8001e14:	bd70      	pop	{r4, r5, r6, pc}
 8001e16:	f000 f8f1 	bl	8001ffc <__malloc_lock>
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <_malloc_r+0xac>)
 8001e1c:	6814      	ldr	r4, [r2, #0]
 8001e1e:	4621      	mov	r1, r4
 8001e20:	b991      	cbnz	r1, 8001e48 <_malloc_r+0x54>
 8001e22:	4c20      	ldr	r4, [pc, #128]	; (8001ea4 <_malloc_r+0xb0>)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	b91b      	cbnz	r3, 8001e30 <_malloc_r+0x3c>
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f000 f83d 	bl	8001ea8 <_sbrk_r>
 8001e2e:	6020      	str	r0, [r4, #0]
 8001e30:	4629      	mov	r1, r5
 8001e32:	4630      	mov	r0, r6
 8001e34:	f000 f838 	bl	8001ea8 <_sbrk_r>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d124      	bne.n	8001e86 <_malloc_r+0x92>
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	6033      	str	r3, [r6, #0]
 8001e40:	4630      	mov	r0, r6
 8001e42:	f000 f8dc 	bl	8001ffe <__malloc_unlock>
 8001e46:	e7e4      	b.n	8001e12 <_malloc_r+0x1e>
 8001e48:	680b      	ldr	r3, [r1, #0]
 8001e4a:	1b5b      	subs	r3, r3, r5
 8001e4c:	d418      	bmi.n	8001e80 <_malloc_r+0x8c>
 8001e4e:	2b0b      	cmp	r3, #11
 8001e50:	d90f      	bls.n	8001e72 <_malloc_r+0x7e>
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	50cd      	str	r5, [r1, r3]
 8001e56:	18cc      	adds	r4, r1, r3
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f000 f8d0 	bl	8001ffe <__malloc_unlock>
 8001e5e:	f104 000b 	add.w	r0, r4, #11
 8001e62:	1d23      	adds	r3, r4, #4
 8001e64:	f020 0007 	bic.w	r0, r0, #7
 8001e68:	1ac3      	subs	r3, r0, r3
 8001e6a:	d0d3      	beq.n	8001e14 <_malloc_r+0x20>
 8001e6c:	425a      	negs	r2, r3
 8001e6e:	50e2      	str	r2, [r4, r3]
 8001e70:	e7d0      	b.n	8001e14 <_malloc_r+0x20>
 8001e72:	428c      	cmp	r4, r1
 8001e74:	684b      	ldr	r3, [r1, #4]
 8001e76:	bf16      	itet	ne
 8001e78:	6063      	strne	r3, [r4, #4]
 8001e7a:	6013      	streq	r3, [r2, #0]
 8001e7c:	460c      	movne	r4, r1
 8001e7e:	e7eb      	b.n	8001e58 <_malloc_r+0x64>
 8001e80:	460c      	mov	r4, r1
 8001e82:	6849      	ldr	r1, [r1, #4]
 8001e84:	e7cc      	b.n	8001e20 <_malloc_r+0x2c>
 8001e86:	1cc4      	adds	r4, r0, #3
 8001e88:	f024 0403 	bic.w	r4, r4, #3
 8001e8c:	42a0      	cmp	r0, r4
 8001e8e:	d005      	beq.n	8001e9c <_malloc_r+0xa8>
 8001e90:	1a21      	subs	r1, r4, r0
 8001e92:	4630      	mov	r0, r6
 8001e94:	f000 f808 	bl	8001ea8 <_sbrk_r>
 8001e98:	3001      	adds	r0, #1
 8001e9a:	d0cf      	beq.n	8001e3c <_malloc_r+0x48>
 8001e9c:	6025      	str	r5, [r4, #0]
 8001e9e:	e7db      	b.n	8001e58 <_malloc_r+0x64>
 8001ea0:	200000a0 	.word	0x200000a0
 8001ea4:	200000a4 	.word	0x200000a4

08001ea8 <_sbrk_r>:
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	4c06      	ldr	r4, [pc, #24]	; (8001ec4 <_sbrk_r+0x1c>)
 8001eac:	2300      	movs	r3, #0
 8001eae:	4605      	mov	r5, r0
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	6023      	str	r3, [r4, #0]
 8001eb4:	f7ff fbf0 	bl	8001698 <_sbrk>
 8001eb8:	1c43      	adds	r3, r0, #1
 8001eba:	d102      	bne.n	8001ec2 <_sbrk_r+0x1a>
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	b103      	cbz	r3, 8001ec2 <_sbrk_r+0x1a>
 8001ec0:	602b      	str	r3, [r5, #0]
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	20000108 	.word	0x20000108

08001ec8 <__sread>:
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	460c      	mov	r4, r1
 8001ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ed0:	f000 f896 	bl	8002000 <_read_r>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	bfab      	itete	ge
 8001ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eda:	89a3      	ldrhlt	r3, [r4, #12]
 8001edc:	181b      	addge	r3, r3, r0
 8001ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ee2:	bfac      	ite	ge
 8001ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ee6:	81a3      	strhlt	r3, [r4, #12]
 8001ee8:	bd10      	pop	{r4, pc}

08001eea <__swrite>:
 8001eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eee:	461f      	mov	r7, r3
 8001ef0:	898b      	ldrh	r3, [r1, #12]
 8001ef2:	05db      	lsls	r3, r3, #23
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	4616      	mov	r6, r2
 8001efa:	d505      	bpl.n	8001f08 <__swrite+0x1e>
 8001efc:	2302      	movs	r3, #2
 8001efe:	2200      	movs	r2, #0
 8001f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f04:	f000 f868 	bl	8001fd8 <_lseek_r>
 8001f08:	89a3      	ldrh	r3, [r4, #12]
 8001f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f12:	81a3      	strh	r3, [r4, #12]
 8001f14:	4632      	mov	r2, r6
 8001f16:	463b      	mov	r3, r7
 8001f18:	4628      	mov	r0, r5
 8001f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f1e:	f000 b817 	b.w	8001f50 <_write_r>

08001f22 <__sseek>:
 8001f22:	b510      	push	{r4, lr}
 8001f24:	460c      	mov	r4, r1
 8001f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f2a:	f000 f855 	bl	8001fd8 <_lseek_r>
 8001f2e:	1c43      	adds	r3, r0, #1
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	bf15      	itete	ne
 8001f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f3e:	81a3      	strheq	r3, [r4, #12]
 8001f40:	bf18      	it	ne
 8001f42:	81a3      	strhne	r3, [r4, #12]
 8001f44:	bd10      	pop	{r4, pc}

08001f46 <__sclose>:
 8001f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f4a:	f000 b813 	b.w	8001f74 <_close_r>
	...

08001f50 <_write_r>:
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	4c07      	ldr	r4, [pc, #28]	; (8001f70 <_write_r+0x20>)
 8001f54:	4605      	mov	r5, r0
 8001f56:	4608      	mov	r0, r1
 8001f58:	4611      	mov	r1, r2
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	6022      	str	r2, [r4, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f7ff fb23 	bl	80015aa <_write>
 8001f64:	1c43      	adds	r3, r0, #1
 8001f66:	d102      	bne.n	8001f6e <_write_r+0x1e>
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	b103      	cbz	r3, 8001f6e <_write_r+0x1e>
 8001f6c:	602b      	str	r3, [r5, #0]
 8001f6e:	bd38      	pop	{r3, r4, r5, pc}
 8001f70:	20000108 	.word	0x20000108

08001f74 <_close_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4c06      	ldr	r4, [pc, #24]	; (8001f90 <_close_r+0x1c>)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	4605      	mov	r5, r0
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	6023      	str	r3, [r4, #0]
 8001f80:	f7ff fb2f 	bl	80015e2 <_close>
 8001f84:	1c43      	adds	r3, r0, #1
 8001f86:	d102      	bne.n	8001f8e <_close_r+0x1a>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	b103      	cbz	r3, 8001f8e <_close_r+0x1a>
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	20000108 	.word	0x20000108

08001f94 <_fstat_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4c07      	ldr	r4, [pc, #28]	; (8001fb4 <_fstat_r+0x20>)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	f7ff fb29 	bl	80015f8 <_fstat>
 8001fa6:	1c43      	adds	r3, r0, #1
 8001fa8:	d102      	bne.n	8001fb0 <_fstat_r+0x1c>
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	b103      	cbz	r3, 8001fb0 <_fstat_r+0x1c>
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	bd38      	pop	{r3, r4, r5, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000108 	.word	0x20000108

08001fb8 <_isatty_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4c06      	ldr	r4, [pc, #24]	; (8001fd4 <_isatty_r+0x1c>)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	4605      	mov	r5, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	6023      	str	r3, [r4, #0]
 8001fc4:	f7ff fb27 	bl	8001616 <_isatty>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	d102      	bne.n	8001fd2 <_isatty_r+0x1a>
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	b103      	cbz	r3, 8001fd2 <_isatty_r+0x1a>
 8001fd0:	602b      	str	r3, [r5, #0]
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}
 8001fd4:	20000108 	.word	0x20000108

08001fd8 <_lseek_r>:
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	4c07      	ldr	r4, [pc, #28]	; (8001ff8 <_lseek_r+0x20>)
 8001fdc:	4605      	mov	r5, r0
 8001fde:	4608      	mov	r0, r1
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	6022      	str	r2, [r4, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f7ff fb1f 	bl	800162a <_lseek>
 8001fec:	1c43      	adds	r3, r0, #1
 8001fee:	d102      	bne.n	8001ff6 <_lseek_r+0x1e>
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	b103      	cbz	r3, 8001ff6 <_lseek_r+0x1e>
 8001ff4:	602b      	str	r3, [r5, #0]
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
 8001ff8:	20000108 	.word	0x20000108

08001ffc <__malloc_lock>:
 8001ffc:	4770      	bx	lr

08001ffe <__malloc_unlock>:
 8001ffe:	4770      	bx	lr

08002000 <_read_r>:
 8002000:	b538      	push	{r3, r4, r5, lr}
 8002002:	4c07      	ldr	r4, [pc, #28]	; (8002020 <_read_r+0x20>)
 8002004:	4605      	mov	r5, r0
 8002006:	4608      	mov	r0, r1
 8002008:	4611      	mov	r1, r2
 800200a:	2200      	movs	r2, #0
 800200c:	6022      	str	r2, [r4, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f7ff faae 	bl	8001570 <_read>
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	d102      	bne.n	800201e <_read_r+0x1e>
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	b103      	cbz	r3, 800201e <_read_r+0x1e>
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	bd38      	pop	{r3, r4, r5, pc}
 8002020:	20000108 	.word	0x20000108

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	bf00      	nop
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
