
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800108c  0800108c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800108c  0800108c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800108c  0800108c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800108c  0800108c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001094  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000004  08001098  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000044  08001098  00020044  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ebc  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005e2  00000000  00000000  00021eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  000224d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00022680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000288c  00000000  00000000  000227f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000014e6  00000000  00000000  00025084  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a794  00000000  00000000  0002656a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030cfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000650  00000000  00000000  00030d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001074 	.word	0x08001074

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08001074 	.word	0x08001074

080001e8 <GPIO_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t enOrDi){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp. register
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

	//check to see if it's already enabled?
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff0c 	bl	80001e8 <GPIO_PeriClockControl>

	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d820      	bhi.n	800041a <GPIO_Init+0x62>
		//this is non-interrupt mode
		//Shift the mode the pin number of bits. Multiple by 2 as a single pin takes two bits
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	791b      	ldrb	r3, [r3, #4]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	fa02 f303 	lsl.w	r3, r2, r3
 80003e8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791b      	ldrb	r3, [r3, #4]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	2103      	movs	r1, #3
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	43db      	mvns	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	400a      	ands	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6819      	ldr	r1, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	430a      	orrs	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	e0dd      	b.n	80005d6 <GPIO_Init+0x21e>
	} else {
		// if the Pin Mode is an interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d117      	bne.n	8000452 <GPIO_Init+0x9a>
			//NOTE: clearing of target bits before setting not required because only 1 bit is used
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000422:	4b4a      	ldr	r3, [pc, #296]	; (800054c <GPIO_Init+0x194>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4611      	mov	r1, r2
 8000432:	4a46      	ldr	r2, [pc, #280]	; (800054c <GPIO_Init+0x194>)
 8000434:	430b      	orrs	r3, r1
 8000436:	60d3      	str	r3, [r2, #12]
			// clear the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <GPIO_Init+0x194>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	43d2      	mvns	r2, r2
 8000448:	4611      	mov	r1, r2
 800044a:	4a40      	ldr	r2, [pc, #256]	; (800054c <GPIO_Init+0x194>)
 800044c:	400b      	ands	r3, r1
 800044e:	6093      	str	r3, [r2, #8]
 8000450:	e035      	b.n	80004be <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	2b05      	cmp	r3, #5
 8000458:	d117      	bne.n	800048a <GPIO_Init+0xd2>
			// 2. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045a:	4b3c      	ldr	r3, [pc, #240]	; (800054c <GPIO_Init+0x194>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	4611      	mov	r1, r2
 800046a:	4a38      	ldr	r2, [pc, #224]	; (800054c <GPIO_Init+0x194>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
			// clear the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	4b36      	ldr	r3, [pc, #216]	; (800054c <GPIO_Init+0x194>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	43d2      	mvns	r2, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a32      	ldr	r2, [pc, #200]	; (800054c <GPIO_Init+0x194>)
 8000484:	400b      	ands	r3, r1
 8000486:	60d3      	str	r3, [r2, #12]
 8000488:	e019      	b.n	80004be <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	2b06      	cmp	r3, #6
 8000490:	d115      	bne.n	80004be <GPIO_Init+0x106>
			// 3. Configure FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000492:	4b2e      	ldr	r3, [pc, #184]	; (800054c <GPIO_Init+0x194>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7912      	ldrb	r2, [r2, #4]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a2a      	ldr	r2, [pc, #168]	; (800054c <GPIO_Init+0x194>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <GPIO_Init+0x194>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a24      	ldr	r2, [pc, #144]	; (800054c <GPIO_Init+0x194>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
		}
		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 80004be:	4b24      	ldr	r3, [pc, #144]	; (8000550 <GPIO_Init+0x198>)
 80004c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c2:	4a23      	ldr	r2, [pc, #140]	; (8000550 <GPIO_Init+0x198>)
 80004c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c8:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t extiCrRegIndex, extiCrPinPos, portcode;
		extiCrRegIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	74fb      	strb	r3, [r7, #19]
		extiCrPinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	f003 0303 	and.w	r3, r3, #3
 80004da:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <GPIO_Init+0x19c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d046      	beq.n	8000574 <GPIO_Init+0x1bc>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <GPIO_Init+0x1a0>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d02b      	beq.n	8000548 <GPIO_Init+0x190>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <GPIO_Init+0x1a4>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d024      	beq.n	8000544 <GPIO_Init+0x18c>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <GPIO_Init+0x1a8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d01d      	beq.n	8000540 <GPIO_Init+0x188>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <GPIO_Init+0x1ac>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d016      	beq.n	800053c <GPIO_Init+0x184>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <GPIO_Init+0x1b0>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d00f      	beq.n	8000538 <GPIO_Init+0x180>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a13      	ldr	r2, [pc, #76]	; (800056c <GPIO_Init+0x1b4>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d008      	beq.n	8000534 <GPIO_Init+0x17c>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <GPIO_Init+0x1b8>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d101      	bne.n	8000530 <GPIO_Init+0x178>
 800052c:	2307      	movs	r3, #7
 800052e:	e022      	b.n	8000576 <GPIO_Init+0x1be>
 8000530:	2300      	movs	r3, #0
 8000532:	e020      	b.n	8000576 <GPIO_Init+0x1be>
 8000534:	2306      	movs	r3, #6
 8000536:	e01e      	b.n	8000576 <GPIO_Init+0x1be>
 8000538:	2305      	movs	r3, #5
 800053a:	e01c      	b.n	8000576 <GPIO_Init+0x1be>
 800053c:	2304      	movs	r3, #4
 800053e:	e01a      	b.n	8000576 <GPIO_Init+0x1be>
 8000540:	2303      	movs	r3, #3
 8000542:	e018      	b.n	8000576 <GPIO_Init+0x1be>
 8000544:	2302      	movs	r3, #2
 8000546:	e016      	b.n	8000576 <GPIO_Init+0x1be>
 8000548:	2301      	movs	r3, #1
 800054a:	e014      	b.n	8000576 <GPIO_Init+0x1be>
 800054c:	40013c00 	.word	0x40013c00
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000
 8000558:	40020400 	.word	0x40020400
 800055c:	40020800 	.word	0x40020800
 8000560:	40020c00 	.word	0x40020c00
 8000564:	40021000 	.word	0x40021000
 8000568:	40021400 	.word	0x40021400
 800056c:	40021800 	.word	0x40021800
 8000570:	40021c00 	.word	0x40021c00
 8000574:	2300      	movs	r3, #0
 8000576:	747b      	strb	r3, [r7, #17]
		temp = portcode << (4 * extiCrPinPos);
 8000578:	7c7a      	ldrb	r2, [r7, #17]
 800057a:	7cbb      	ldrb	r3, [r7, #18]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
		SYSCFG->EXTICR[extiCrRegIndex] &= ~(0xF <<(4 * extiCrPinPos)); //clearing
 8000584:	4a65      	ldr	r2, [pc, #404]	; (800071c <GPIO_Init+0x364>)
 8000586:	7cfb      	ldrb	r3, [r7, #19]
 8000588:	3302      	adds	r3, #2
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	7cbb      	ldrb	r3, [r7, #18]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	210f      	movs	r1, #15
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	495f      	ldr	r1, [pc, #380]	; (800071c <GPIO_Init+0x364>)
 800059e:	7cfb      	ldrb	r3, [r7, #19]
 80005a0:	4002      	ands	r2, r0
 80005a2:	3302      	adds	r3, #2
 80005a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[extiCrRegIndex] |= temp; //setting
 80005a8:	4a5c      	ldr	r2, [pc, #368]	; (800071c <GPIO_Init+0x364>)
 80005aa:	7cfb      	ldrb	r3, [r7, #19]
 80005ac:	3302      	adds	r3, #2
 80005ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005b2:	485a      	ldr	r0, [pc, #360]	; (800071c <GPIO_Init+0x364>)
 80005b4:	7cfb      	ldrb	r3, [r7, #19]
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	3302      	adds	r3, #2
 80005bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// 3. enable exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b57      	ldr	r3, [pc, #348]	; (8000720 <GPIO_Init+0x368>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a53      	ldr	r2, [pc, #332]	; (8000720 <GPIO_Init+0x368>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6013      	str	r3, [r2, #0]
	}

	temp = 0; //is this needed?
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

	// 2. Configure the pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	79db      	ldrb	r3, [r3, #7]
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68da      	ldr	r2, [r3, #12]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	2103      	movs	r1, #3
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	400a      	ands	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68d9      	ldr	r1, [r3, #12]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	430a      	orrs	r2, r1
 8000618:	60da      	str	r2, [r3, #12]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) ||
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	795b      	ldrb	r3, [r3, #5]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d003      	beq.n	800062a <GPIO_Init+0x272>
		(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	795b      	ldrb	r3, [r3, #5]
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) ||
 8000626:	2b02      	cmp	r3, #2
 8000628:	d13d      	bne.n	80006a6 <GPIO_Init+0x2ee>
		// 3. Configure the speed
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	799b      	ldrb	r3, [r3, #6]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	2103      	movs	r1, #3
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	4619      	mov	r1, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	400a      	ands	r2, r1
 8000658:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6899      	ldr	r1, [r3, #8]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	430a      	orrs	r2, r1
 8000668:	609a      	str	r2, [r3, #8]

		// 4. Configure the optype if mode is output or analog
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7a1b      	ldrb	r3, [r3, #8]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2301      	movs	r3, #1
 8000688:	408b      	lsls	r3, r1
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6859      	ldr	r1, [r3, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	605a      	str	r2, [r3, #4]
	}

	// 5. Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	795b      	ldrb	r3, [r3, #5]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d132      	bne.n	8000714 <GPIO_Init+0x35c>
		//configure the alternate function registers
		uint8_t altRegIndex, altRegPinPos;

		altRegIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // pin >8 will return 1, else 0
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	743b      	strb	r3, [r7, #16]
		altRegPinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	73fb      	strb	r3, [r7, #15]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * altRegPinPos);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7a5b      	ldrb	r3, [r3, #9]
 80006c4:	461a      	mov	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[altRegIndex] &= ~(0xF << (4 * altRegPinPos)); //clearing
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	7c3a      	ldrb	r2, [r7, #16]
 80006d6:	3208      	adds	r2, #8
 80006d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	220f      	movs	r2, #15
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7c3a      	ldrb	r2, [r7, #16]
 80006f0:	4001      	ands	r1, r0
 80006f2:	3208      	adds	r2, #8
 80006f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[altRegIndex] |= temp; //setting
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	7c3a      	ldrb	r2, [r7, #16]
 80006fe:	3208      	adds	r2, #8
 8000700:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	7c3a      	ldrb	r2, [r7, #16]
 800070a:	6979      	ldr	r1, [r7, #20]
 800070c:	4301      	orrs	r1, r0
 800070e:	3208      	adds	r2, #8
 8000710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013800 	.word	0x40013800
 8000720:	40013c00 	.word	0x40013c00

08000724 <GPIO_ReadFromInputPin>:
 *
 * @return				- PIN_SET or PIN_RESET ( 0 or 1)
 *
 * @Note				- Uses the Input Data Register to retrieve the value
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t* pGPIOx, uint8_t pinNumber){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
	//Note: STM code uses a 16 bit value for pin and a simple & (no bit shift needed)
	uint8_t value;
	uint16_t GPIO_value = (1 << pinNumber);
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	81bb      	strh	r3, [r7, #12]
	if (pGPIOx->IDR & GPIO_value){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	691a      	ldr	r2, [r3, #16]
 800073e:	89bb      	ldrh	r3, [r7, #12]
 8000740:	4013      	ands	r3, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <GPIO_ReadFromInputPin+0x28>
		value = SET;
 8000746:	2301      	movs	r3, #1
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	e001      	b.n	8000750 <GPIO_ReadFromInputPin+0x2c>
	} else {
		value = RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
	}
	return value;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <SPI_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- SPI4 is reserved and won't be affected by this function
 */
void SPI_PeriClockControl(SPI_RegDef_t* pSPIx, uint8_t enOrDi){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d120      	bne.n	80007b0 <SPI_PeriClockControl+0x54>
			if(pSPIx == SPI1){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a22      	ldr	r2, [pc, #136]	; (80007fc <SPI_PeriClockControl+0xa0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SPI_PeriClockControl+0xa4>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SPI_PeriClockControl+0xa4>)
 800077c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
				SPI2_PCLK_DI();
			} else if (pSPIx == SPI3){
				SPI3_PCLK_DI();
			}
		}
}
 8000782:	e035      	b.n	80007f0 <SPI_PeriClockControl+0x94>
			} else if (pSPIx == SPI2){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <SPI_PeriClockControl+0xa8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <SPI_PeriClockControl+0xa4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <SPI_PeriClockControl+0xa4>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000798:	e02a      	b.n	80007f0 <SPI_PeriClockControl+0x94>
			} else if (pSPIx == SPI3){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <SPI_PeriClockControl+0xac>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d126      	bne.n	80007f0 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ae:	e01f      	b.n	80007f0 <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <SPI_PeriClockControl+0xa0>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <SPI_PeriClockControl+0x6a>
				SPI1_PCLK_DI();
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007c2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007c4:	e014      	b.n	80007f0 <SPI_PeriClockControl+0x94>
			} else if (pSPIx == SPI2){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <SPI_PeriClockControl+0xa8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d106      	bne.n	80007dc <SPI_PeriClockControl+0x80>
				SPI2_PCLK_DI();
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007da:	e009      	b.n	80007f0 <SPI_PeriClockControl+0x94>
			} else if (pSPIx == SPI3){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <SPI_PeriClockControl+0xac>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d105      	bne.n	80007f0 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_DI();
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <SPI_PeriClockControl+0xa4>)
 80007ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40013000 	.word	0x40013000
 8000800:	40023800 	.word	0x40023800
 8000804:	40003800 	.word	0x40003800
 8000808:	40003c00 	.word	0x40003c00

0800080c <SPI_Init>:
 * @return				- none
 *
 * @Note				- I don't like the way this is done, but I'm doing it to be consistent with the course
 * 							Instead, I think the SPIConfig should hold masks, not enum type values
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

	//enable the spi clock
	//should I check this is already enabled?
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff9e 	bl	800075c <SPI_PeriClockControl>

	//disable the specific SPI (concept taken from STM generated code) SPI will be enabled when sending or receiving
	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f953 	bl	8000ad2 <SPI_PeripheralControl>

	//first configure the SPI CR1 register
	uint32_t tempReg = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_DEVICE_MODE_MASTER){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d10b      	bne.n	8000850 <SPI_Init+0x44>
		// if the device is master mode, then the SSI must also be 1 to avoid an error (unless Multi master?)
		// this is only true if SSM is enabled, can we keep this functionality even is SSM is disabled?
		// based on stm generated code, the SSI stays enabled for SSM enabled and disabled
		tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << SPI_CR1_SSI); // this should probably be done in another way
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e006      	b.n	800085e <SPI_Init+0x52>
	} else {
		tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4313      	orrs	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
	}

	//2. configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	795b      	ldrb	r3, [r3, #5]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d104      	bne.n	8000870 <SPI_Init+0x64>
		//bdi should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e010      	b.n	8000892 <SPI_Init+0x86>
	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d104      	bne.n	8000882 <SPI_Init+0x76>
		//bdi should be set
		tempReg |= ~(1 << SPI_CR1_BIDIMODE);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e007      	b.n	8000892 <SPI_Init+0x86>
	} else {
		//bdi should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000888:	60fb      	str	r3, [r7, #12]
		//RXONLY should be set
		tempReg |= (1 << SPI_CR1_RXONLY);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000890:	60fb      	str	r3, [r7, #12]
	}

	//3. configure the clock speed
	tempReg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	799b      	ldrb	r3, [r3, #6]
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	461a      	mov	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4313      	orrs	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	//4. configure the Data frame format
	tempReg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	79db      	ldrb	r3, [r3, #7]
 80008a4:	02db      	lsls	r3, r3, #11
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]

	//5. configure the clock polarity
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7a1b      	ldrb	r3, [r3, #8]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	461a      	mov	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

	//6. configure the clock phase
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7a5b      	ldrb	r3, [r3, #9]
 80008c0:	461a      	mov	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

	//7. determine hardware or software slave management
	tempReg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7a9b      	ldrb	r3, [r3, #10]
 80008cc:	025b      	lsls	r3, r3, #9
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SPI_GetFlagStatus>:

/*
 * Data send and receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t* pSPIx, uint32_t flag){
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flag){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	4013      	ands	r3, r2
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SPI_GetFlagStatus+0x1a>
		return SET;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e000      	b.n	8000902 <SPI_GetFlagStatus+0x1c>
	}
	return RESET;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <SPI_SendDataIT>:
 *
 * @return				- none
 *
 * @Note				- none
 */
uint8_t SPI_SendDataIT(SPI_Handle_t* pSPIHandle, uint8_t *pTxBuffer, uint32_t len){
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	7f1b      	ldrb	r3, [r3, #28]
 800091c:	75fb      	strb	r3, [r7, #23]
	if(state != SPI_BUSY_IN_TX){
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d01d      	beq.n	8000960 <SPI_SendDataIT+0x54>
		//1.	Save the Tx Buffer address and len information in some variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = len;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	615a      	str	r2, [r3, #20]

		//2.	Mark the API state as busy in transmission so that
		//		no other code can take over same API peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2202      	movs	r2, #2
 8000934:	771a      	strb	r2, [r3, #28]

		//3.	Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE); //should I also enable error interrupt?
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000944:	605a      	str	r2, [r3, #4]
//		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_ERRIE)

		//if SPi is not enabled, then enable it
		//I think this should be in the if, because, otherwise it is assumed that it is enabled
		if((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_SPE)) != (1 << SPI_CR1_SPE)){
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000950:	2b40      	cmp	r3, #64	; 0x40
 8000952:	d005      	beq.n	8000960 <SPI_SendDataIT+0x54>
			//SET_BIT(pSPIx->CR1, (1 << SPI_CR1_SPE)); // this is repetitive, should just have a mask,
			SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f8b9 	bl	8000ad2 <SPI_PeripheralControl>
	//why return state here and not pSPIHandle->TxState?
	//if the TxState is not busy, then we configure to send as an intterupt, which presumably executes
	//in this case, state will return as SPI_NOT_BUSY
	//this is intended because this function will only return once the data is all sent
	//if TxState is busy, then this will return, that it is busy, which will allow the while loop to try again
	return state;
 8000960:	7dfb      	ldrb	r3, [r7, #23]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <SPI_ReceiveDataIT>:
 *
 * @return				- none
 *
 * @Note				- none
 */
uint8_t SPI_ReceiveDataIT(SPI_Handle_t* pSPIHandle, uint8_t *pRxBuffer, uint32_t len){
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	7f5b      	ldrb	r3, [r3, #29]
 800097a:	75fb      	strb	r3, [r7, #23]
	if(state != SPI_BUSY_IN_RX){
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d01d      	beq.n	80009be <SPI_ReceiveDataIT+0x54>
		//1.	Save the Tx Buffer address and len information in some variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = len;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	619a      	str	r2, [r3, #24]

		//2.	Mark the API state as busy in transmission so that
		//		no other code can take over same API peripheral until transmission is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2201      	movs	r2, #1
 8000992:	775a      	strb	r2, [r3, #29]

		//3.	Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE); //should I also enable error interrupt?
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009a2:	605a      	str	r2, [r3, #4]

		//if SPi is not enabled, then enable it
		if((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_SPE)) != (1 << SPI_CR1_SPE)){
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	2b40      	cmp	r3, #64	; 0x40
 80009b0:	d005      	beq.n	80009be <SPI_ReceiveDataIT+0x54>
			//SET_BIT(pSPIx->CR1, (1 << SPI_CR1_SPE)); // this is repetitive, should just have a mask,
			SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2101      	movs	r1, #1
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f88a 	bl	8000ad2 <SPI_PeripheralControl>
		}
	}



	return state; //should we return this variable or the struct state variable? will this be consistent with the RxState?
 80009be:	7dfb      	ldrb	r3, [r7, #23]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SPI_IRQInterruptConfig>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enOrDi){
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]
	uint8_t registerIndex, registerBitPos;
	registerIndex = IRQNumber /32;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	73fb      	strb	r3, [r7, #15]
	registerBitPos = IRQNumber % 32;
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 031f 	and.w	r3, r3, #31
 80009e4:	73bb      	strb	r3, [r7, #14]
	if(enOrDi == ENABLE){
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10e      	bne.n	8000a0a <SPI_IRQInterruptConfig+0x42>
		NVIC->ISER[registerIndex] |= 1 << registerBitPos; //setting, no need to clear
 80009ec:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <SPI_IRQInterruptConfig+0x6c>)
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <SPI_IRQInterruptConfig+0x6c>)
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4302      	orrs	r2, r0
 8000a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		NVIC->ICER[registerIndex] |= 1<< registerBitPos; //setting, no need to clear
	}
}
 8000a08:	e00f      	b.n	8000a2a <SPI_IRQInterruptConfig+0x62>
		NVIC->ICER[registerIndex] |= 1<< registerBitPos; //setting, no need to clear
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SPI_IRQInterruptConfig+0x6c>)
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	3320      	adds	r3, #32
 8000a10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
 8000a16:	2101      	movs	r1, #1
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	4905      	ldr	r1, [pc, #20]	; (8000a34 <SPI_IRQInterruptConfig+0x6c>)
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	4302      	orrs	r2, r0
 8000a24:	3320      	adds	r3, #32
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <SPI_IRQHandling>:
 *
 * @return				- none
 *
 * @Note				- Usually check for errors as well, but we aren't concerned at this time
 */
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	uint8_t status, control; //change these?

	//first check for TXE
	status = pSPIHandle->pSPIx->SR & SPI_TXE_FLAG; // will be 1 if TXE is set
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	73fb      	strb	r3, [r7, #15]
	control = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE); // will be 1 if TXEIE is set
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a5a:	73bb      	strb	r3, [r7, #14]

	if ( status && control ) {
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <SPI_IRQHandling+0x36>
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <SPI_IRQHandling+0x36>
		//handle TXE
		spi_txe_interrupt_handle(pSPIHandle);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f89c 	bl	8000ba6 <spi_txe_interrupt_handle>
	}

	// check for RXNE
	status = pSPIHandle->pSPIx->SR & SPI_RXNE_FLAG; // will be 1 if RXNE is set
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
	control = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE); // will be 1 if RXNEIE is set
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a88:	73bb      	strb	r3, [r7, #14]

	if ( status && control ) {
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d005      	beq.n	8000a9c <SPI_IRQHandling+0x64>
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <SPI_IRQHandling+0x64>
		//handle TXE
		spi_rxne_interrupt_handle(pSPIHandle);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f8c0 	bl	8000c1c <spi_rxne_interrupt_handle>
	}

	// check for Overun flag
	status = pSPIHandle->pSPIx->SR & SPI_OVR_FLAG; // will be 1 if OVR is set
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa8:	73fb      	strb	r3, [r7, #15]
	control = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE); // will be 1 if ERRIE is set
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	73bb      	strb	r3, [r7, #14]

	if ( status && control ) {
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d005      	beq.n	8000aca <SPI_IRQHandling+0x92>
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <SPI_IRQHandling+0x92>
		//handle TXE
		spi_ovr_err_interrupt_handle(pSPIHandle);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f8e6 	bl	8000c96 <spi_ovr_err_interrupt_handle>
	}
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <SPI_PeripheralControl>:
 *
 * @return				- none
 *
 * @Note				- I'm implementing this in the transmit function
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t enOrDi){
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	460b      	mov	r3, r1
 8000adc:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d106      	bne.n	8000af2 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000af0:	e005      	b.n	8000afe <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SPI_SSOEConfig>:
 * @Note				- This code is used in the course I'm following,
 * 						but I think it is redundant and bad practice. I will use it bec of consistency
 * 						Otherwise, in the STM generated code, this bit is determine by a NSS value in the init struct
 * 						See: WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t enOrDi){
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d106      	bne.n	8000b28 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f043 0204 	orr.w	r2, r3, #4
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000b26:	e005      	b.n	8000b34 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f023 0204 	bic.w	r2, r3, #4
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	605a      	str	r2, [r3, #4]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <SPI_CloseTransmission>:

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b54:	605a      	str	r2, [r3, #4]
	pSPIHandle->TxLen = 0;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
	pSPIHandle->pTxBuffer = NULL;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxState = SPI_READY;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	771a      	strb	r2, [r3, #28]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b88:	605a      	str	r2, [r3, #4]
	pSPIHandle->RxLen = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
	pSPIHandle->pRxBuffer = NULL;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxState = SPI_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	775a      	strb	r2, [r3, #29]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <spi_txe_interrupt_handle>:
//AS long as the TxLen is above 0, then this will get called again as soon as the DR is empty
//When TxLen is 0, then disable TXEIE, reset handle variables, and Set SPI_READY again
//We then use SPI_ApplicationEventCallback to inform the application that it is done
//Note: when we close transmission, pSPIHandle->pRxBuffer is set to  NULL
//however, the buffer that this originally pointed to will still contain the value read
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]

	// Check DFF in CR1
	if (pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF) ) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d010      	beq.n	8000bde <spi_txe_interrupt_handle+0x38>
		//16 bit dff
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	881a      	ldrh	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen -= 2;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	1e9a      	subs	r2, r3, #2
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	e00f      	b.n	8000bfe <spi_txe_interrupt_handle+0x58>
	} else {
		//8 bit dff
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen){
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d106      	bne.n	8000c14 <spi_txe_interrupt_handle+0x6e>
		//TxLen is zero, so close the spi communication
		//and inform app that TX is over
		//this precents interrupts from setting up of TXE flag
		SPI_CloseTransmission(pSPIHandle);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff99 	bl	8000b3e <SPI_CloseTransmission>

		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f96c 	bl	8000eec <SPI_ApplicationEventCallback>
	}
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

	// Check DFF in CR1
	if (pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF) ) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d011      	beq.n	8000c56 <spi_rxne_interrupt_handle+0x3a>
		//16 bit dff
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	b292      	uxth	r2, r2
 8000c3e:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen-=2;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	1e9a      	subs	r2, r3, #2
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	619a      	str	r2, [r3, #24]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	e010      	b.n	8000c78 <spi_rxne_interrupt_handle+0x5c>
	} else {
		//8 bit dff
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d106      	bne.n	8000c8e <spi_rxne_interrupt_handle+0x72>
		//TxLen is zero, so close the spi communication
		//and inform app that TX is over
		//this precents interrupts from setting up of TXE flag
		SPI_CloseReception(pSPIHandle);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff76 	bl	8000b72 <SPI_CloseReception>

		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000c86:	2101      	movs	r1, #1
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 f92f 	bl	8000eec <SPI_ApplicationEventCallback>
	}
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <spi_ovr_err_interrupt_handle>:

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b084      	sub	sp, #16
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	//1. clear the OVR flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7f1b      	ldrb	r3, [r3, #28]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d007      	beq.n	8000cb6 <spi_ovr_err_interrupt_handle+0x20>
		temp = pSPIHandle->pSPIx->DR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	73fb      	strb	r3, [r7, #15]
	}
	(void) temp;
	//If the SPI is busy in TX, then the error will not be cleared and the application will have to clear bit on own
	//In this case, application should call SPI_ClearOVRFlag
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 f917 	bl	8000eec <SPI_ApplicationEventCallback>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <delay>:
/* Arduino LED */
#define LED_PIN					9


void delay(int time)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < time; i++);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e002      	b.n	8000cda <delay+0x14>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3f8      	bcc.n	8000cd4 <delay+0xe>
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackByte)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	if(ackByte == ACK)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2bf5      	cmp	r3, #245	; 0xf5
 8000cfa:	d101      	bne.n	8000d00 <SPI_VerifyResponse+0x14>
	{
		return 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <main>:

uint8_t dummyWrite = 0xFF;
uint8_t dummyRead;

int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	/* Initialize button */
	GPIO_ButtonInit();
 8000d12:	f000 f949 	bl	8000fa8 <GPIO_ButtonInit>

	/* Initialize GPIO pins to behave as SPI2 pins */
	SPI_GPIO_Setup();
 8000d16:	f000 f8f5 	bl	8000f04 <SPI_GPIO_Setup>

	/* Initialize SPI2 peripheral parameters */
	SPI2_Inits();
 8000d1a:	f000 f921 	bl	8000f60 <SPI2_Inits>

	/* SPI2 IRQ configurations */
	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2024      	movs	r0, #36	; 0x24
 8000d22:	f7ff fe51 	bl	80009c8 <SPI_IRQInterruptConfig>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000d26:	2101      	movs	r1, #1
 8000d28:	4865      	ldr	r0, [pc, #404]	; (8000ec0 <main+0x1b4>)
 8000d2a:	f7ff feed 	bl	8000b08 <SPI_SSOEConfig>

	while(1)
	{
		/* Wait till button is pressed */
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) );
 8000d2e:	bf00      	nop
 8000d30:	2100      	movs	r1, #0
 8000d32:	4864      	ldr	r0, [pc, #400]	; (8000ec4 <main+0x1b8>)
 8000d34:	f7ff fcf6 	bl	8000724 <GPIO_ReadFromInputPin>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f8      	beq.n	8000d30 <main+0x24>

//		printf("SPI communication started!\n");

		/* 200ms delay */
		delay(250000);
 8000d3e:	4862      	ldr	r0, [pc, #392]	; (8000ec8 <main+0x1bc>)
 8000d40:	f7ff ffc1 	bl	8000cc6 <delay>

		/* Enable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, ENABLE);
 8000d44:	2101      	movs	r1, #1
 8000d46:	485e      	ldr	r0, [pc, #376]	; (8000ec0 <main+0x1b4>)
 8000d48:	f7ff fec3 	bl	8000ad2 <SPI_PeripheralControl>

		/* Send SPI data: CMD LED Control */
		uint8_t commandCode = COMMAND_LED_CTRL;
 8000d4c:	2350      	movs	r3, #80	; 0x50
 8000d4e:	71fb      	strb	r3, [r7, #7]
		uint8_t ackByte;

		/* Send command */
		while(SPI_SendDataIT(&SPI2Handle, &commandCode, 1) != SPI_READY);
 8000d50:	bf00      	nop
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	485c      	ldr	r0, [pc, #368]	; (8000ecc <main+0x1c0>)
 8000d5a:	f7ff fdd7 	bl	800090c <SPI_SendDataIT>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f6      	bne.n	8000d52 <main+0x46>

		/* Dummy read to clear off the RXNE */
		while(SPI_ReceiveDataIT(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000d64:	bf00      	nop
 8000d66:	2201      	movs	r2, #1
 8000d68:	4959      	ldr	r1, [pc, #356]	; (8000ed0 <main+0x1c4>)
 8000d6a:	4858      	ldr	r0, [pc, #352]	; (8000ecc <main+0x1c0>)
 8000d6c:	f7ff fdfd 	bl	800096a <SPI_ReceiveDataIT>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f7      	bne.n	8000d66 <main+0x5a>

		/* Send dummy bits (byte) to fetch the response from slave */
		while(SPI_SendDataIT(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 8000d76:	bf00      	nop
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4956      	ldr	r1, [pc, #344]	; (8000ed4 <main+0x1c8>)
 8000d7c:	4853      	ldr	r0, [pc, #332]	; (8000ecc <main+0x1c0>)
 8000d7e:	f7ff fdc5 	bl	800090c <SPI_SendDataIT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f7      	bne.n	8000d78 <main+0x6c>

		/* Receive Acknowledgment byte */

		while(SPI_ReceiveDataIT(&SPI2Handle, &ackByte, 1) != SPI_READY);
 8000d88:	bf00      	nop
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	484e      	ldr	r0, [pc, #312]	; (8000ecc <main+0x1c0>)
 8000d92:	f7ff fdea 	bl	800096a <SPI_ReceiveDataIT>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f6      	bne.n	8000d8a <main+0x7e>

		/* Verify response from SPI slave */
		uint8_t args[2];
		if( SPI_VerifyResponse(ackByte) )
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffa4 	bl	8000cec <SPI_VerifyResponse>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d016      	beq.n	8000dd8 <main+0xcc>
		{
			/* Send arguments */
			args[0] = LED_PIN;
 8000daa:	2309      	movs	r3, #9
 8000dac:	713b      	strb	r3, [r7, #4]
			args[1] = LED_ON;
 8000dae:	2301      	movs	r3, #1
 8000db0:	717b      	strb	r3, [r7, #5]
			while(SPI_SendDataIT(&SPI2Handle, args, 2) != SPI_READY);
 8000db2:	bf00      	nop
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2202      	movs	r2, #2
 8000db8:	4619      	mov	r1, r3
 8000dba:	4844      	ldr	r0, [pc, #272]	; (8000ecc <main+0x1c0>)
 8000dbc:	f7ff fda6 	bl	800090c <SPI_SendDataIT>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f6      	bne.n	8000db4 <main+0xa8>
			/* Dummy read to clear off the RXNE */
			while(SPI_ReceiveDataIT(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000dc6:	bf00      	nop
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4941      	ldr	r1, [pc, #260]	; (8000ed0 <main+0x1c4>)
 8000dcc:	483f      	ldr	r0, [pc, #252]	; (8000ecc <main+0x1c0>)
 8000dce:	f7ff fdcc 	bl	800096a <SPI_ReceiveDataIT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f7      	bne.n	8000dc8 <main+0xbc>
//			printf("Command LED executed!\n");
		}
		/* End of CMD LED Control */

		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) );
 8000dd8:	bf00      	nop
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4839      	ldr	r0, [pc, #228]	; (8000ec4 <main+0x1b8>)
 8000dde:	f7ff fca1 	bl	8000724 <GPIO_ReadFromInputPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f8      	beq.n	8000dda <main+0xce>

		delay(250000);
 8000de8:	4837      	ldr	r0, [pc, #220]	; (8000ec8 <main+0x1bc>)
 8000dea:	f7ff ff6c 	bl	8000cc6 <delay>

		/* Send SPI data: CMD Sensor Read */
		commandCode = COMMAND_SENSOR_READ;
 8000dee:	2351      	movs	r3, #81	; 0x51
 8000df0:	71fb      	strb	r3, [r7, #7]

		/* Send command */
		while(SPI_SendDataIT(&SPI2Handle, &commandCode, 1) != SPI_READY);
 8000df2:	bf00      	nop
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	2201      	movs	r2, #1
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4834      	ldr	r0, [pc, #208]	; (8000ecc <main+0x1c0>)
 8000dfc:	f7ff fd86 	bl	800090c <SPI_SendDataIT>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f6      	bne.n	8000df4 <main+0xe8>

		/* Dummy read to clear off the RXNE */
		while(SPI_ReceiveDataIT(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000e06:	bf00      	nop
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4931      	ldr	r1, [pc, #196]	; (8000ed0 <main+0x1c4>)
 8000e0c:	482f      	ldr	r0, [pc, #188]	; (8000ecc <main+0x1c0>)
 8000e0e:	f7ff fdac 	bl	800096a <SPI_ReceiveDataIT>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f7      	bne.n	8000e08 <main+0xfc>

		/* Send dummy bits (byte) to fetch the response from slave */
		while(SPI_SendDataIT(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 8000e18:	bf00      	nop
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	492d      	ldr	r1, [pc, #180]	; (8000ed4 <main+0x1c8>)
 8000e1e:	482b      	ldr	r0, [pc, #172]	; (8000ecc <main+0x1c0>)
 8000e20:	f7ff fd74 	bl	800090c <SPI_SendDataIT>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f7      	bne.n	8000e1a <main+0x10e>

		/* Receive Acknowledgment byte */
		while(SPI_ReceiveDataIT(&SPI2Handle, &ackByte, 1) != SPI_READY);
 8000e2a:	bf00      	nop
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4619      	mov	r1, r3
 8000e32:	4826      	ldr	r0, [pc, #152]	; (8000ecc <main+0x1c0>)
 8000e34:	f7ff fd99 	bl	800096a <SPI_ReceiveDataIT>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f6      	bne.n	8000e2c <main+0x120>

		/* Verify response from SPI slave */
		uint8_t analogRead;
		if( SPI_VerifyResponse(ackByte) )
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff53 	bl	8000cec <SPI_VerifyResponse>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d02b      	beq.n	8000ea4 <main+0x198>
		{
			/* Send arguments */
			args[0] = ANALOG_PIN0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	713b      	strb	r3, [r7, #4]
			while(SPI_SendDataIT(&SPI2Handle, args, 1) != SPI_READY);
 8000e50:	bf00      	nop
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	481c      	ldr	r0, [pc, #112]	; (8000ecc <main+0x1c0>)
 8000e5a:	f7ff fd57 	bl	800090c <SPI_SendDataIT>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f6      	bne.n	8000e52 <main+0x146>
//			printf("Command Sensor Read executed!\n");

			/* Dummy read to clear off the RXNE */
			while(SPI_ReceiveDataIT(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000e64:	bf00      	nop
 8000e66:	2201      	movs	r2, #1
 8000e68:	4919      	ldr	r1, [pc, #100]	; (8000ed0 <main+0x1c4>)
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <main+0x1c0>)
 8000e6c:	f7ff fd7d 	bl	800096a <SPI_ReceiveDataIT>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f7      	bne.n	8000e66 <main+0x15a>

			/* Wait for Slave to be ready with data */
			delay(25000);
 8000e76:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000e7a:	f7ff ff24 	bl	8000cc6 <delay>

			/* Send dummy bits (byte) to fetch the response from slave */
			while(SPI_SendDataIT(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 8000e7e:	bf00      	nop
 8000e80:	2201      	movs	r2, #1
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <main+0x1c8>)
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <main+0x1c0>)
 8000e86:	f7ff fd41 	bl	800090c <SPI_SendDataIT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f7      	bne.n	8000e80 <main+0x174>
			while(SPI_ReceiveDataIT(&SPI2Handle, &analogRead, 1) != SPI_READY);
 8000e90:	bf00      	nop
 8000e92:	1cfb      	adds	r3, r7, #3
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <main+0x1c0>)
 8000e9a:	f7ff fd66 	bl	800096a <SPI_ReceiveDataIT>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f6      	bne.n	8000e92 <main+0x186>
			/* Dummy read to clear off the RXNE */
		}
		/* End of CMD Sensor Read */

		/* Confirm SPI2 not busy */
		while(SPI_GetFlagStatus(SPI2, SPI_SR_BSY));
 8000ea4:	bf00      	nop
 8000ea6:	2107      	movs	r1, #7
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <main+0x1b4>)
 8000eaa:	f7ff fd1c 	bl	80008e6 <SPI_GetFlagStatus>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f8      	bne.n	8000ea6 <main+0x19a>

		/* Disable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, DISABLE);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <main+0x1b4>)
 8000eb8:	f7ff fe0b 	bl	8000ad2 <SPI_PeripheralControl>
	{
 8000ebc:	e737      	b.n	8000d2e <main+0x22>
 8000ebe:	bf00      	nop
 8000ec0:	40003800 	.word	0x40003800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	0003d090 	.word	0x0003d090
 8000ecc:	20000024 	.word	0x20000024
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <SPI2_IRQHandler>:
	}

	return 0;
}
void SPI2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2Handle);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <SPI2_IRQHandler+0x10>)
 8000ede:	f7ff fdab 	bl	8000a38 <SPI_IRQHandling>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000024 	.word	0x20000024

08000eec <SPI_ApplicationEventCallback>:


void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	}
	else if(AppEv == SPI_EVENT_OVR_ERR)
	{
//		printf("OVR Error triggered!\n");
	}
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <SPI_GPIO_Setup>:


void SPI_GPIO_Setup(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIpins;

	SPIpins.pGPIOx = GPIOB;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <SPI_GPIO_Setup+0x58>)
 8000f0c:	607b      	str	r3, [r7, #4]
	SPIpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000f12:	2305      	movs	r3, #5
 8000f14:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_PP;
 8000f16:	2300      	movs	r3, #0
 8000f18:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	72bb      	strb	r3, [r7, #10]

	//MOSI
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000f22:	230f      	movs	r3, #15
 8000f24:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fa45 	bl	80003b8 <GPIO_Init>


	//MISO
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000f2e:	230e      	movs	r3, #14
 8000f30:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fa3f 	bl	80003b8 <GPIO_Init>

	//SCLK
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000f3a:	230d      	movs	r3, #13
 8000f3c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fa39 	bl	80003b8 <GPIO_Init>

	//NSS
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000f46:	230c      	movs	r3, #12
 8000f48:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fa33 	bl	80003b8 <GPIO_Init>


}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020400 	.word	0x40020400

08000f60 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	SPI2Handle.pSPIx = SPI2;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <SPI2_Inits+0x44>)
 8000f68:	601a      	str	r2, [r3, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	715a      	strb	r2, [r3, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	711a      	strb	r2, [r3, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //2MHz
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	719a      	strb	r2, [r3, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	71da      	strb	r2, [r3, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	721a      	strb	r2, [r3, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	725a      	strb	r2, [r3, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //HW Slave management enabled for NSS pin
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2Handle);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <SPI2_Inits+0x40>)
 8000f96:	f7ff fc39 	bl	800080c <SPI_Init>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000024 	.word	0x20000024
 8000fa4:	40003800 	.word	0x40003800

08000fa8 <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	// configure button
	//Set up PA0 to be an input for the button press
	GpioBtn.pGPIOx = GPIOA;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <GPIO_ButtonInit+0x2c>)
 8000fb0:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioBtn);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f9f7 	bl	80003b8 <GPIO_Init>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <LoopForever+0xe>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <LoopForever+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001002:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001006:	f000 f811 	bl	800102c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100a:	f7ff fe7f 	bl	8000d0c <main>

0800100e <LoopForever>:

LoopForever:
    b LoopForever
 800100e:	e7fe      	b.n	800100e <LoopForever>
  ldr   r0, =_estack
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800101c:	08001094 	.word	0x08001094
  ldr r2, =_sbss
 8001020:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001024:	20000044 	.word	0x20000044

08001028 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <__libc_init_array>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	4e0d      	ldr	r6, [pc, #52]	; (8001064 <__libc_init_array+0x38>)
 8001030:	4c0d      	ldr	r4, [pc, #52]	; (8001068 <__libc_init_array+0x3c>)
 8001032:	1ba4      	subs	r4, r4, r6
 8001034:	10a4      	asrs	r4, r4, #2
 8001036:	2500      	movs	r5, #0
 8001038:	42a5      	cmp	r5, r4
 800103a:	d109      	bne.n	8001050 <__libc_init_array+0x24>
 800103c:	4e0b      	ldr	r6, [pc, #44]	; (800106c <__libc_init_array+0x40>)
 800103e:	4c0c      	ldr	r4, [pc, #48]	; (8001070 <__libc_init_array+0x44>)
 8001040:	f000 f818 	bl	8001074 <_init>
 8001044:	1ba4      	subs	r4, r4, r6
 8001046:	10a4      	asrs	r4, r4, #2
 8001048:	2500      	movs	r5, #0
 800104a:	42a5      	cmp	r5, r4
 800104c:	d105      	bne.n	800105a <__libc_init_array+0x2e>
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001054:	4798      	blx	r3
 8001056:	3501      	adds	r5, #1
 8001058:	e7ee      	b.n	8001038 <__libc_init_array+0xc>
 800105a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800105e:	4798      	blx	r3
 8001060:	3501      	adds	r5, #1
 8001062:	e7f2      	b.n	800104a <__libc_init_array+0x1e>
 8001064:	0800108c 	.word	0x0800108c
 8001068:	0800108c 	.word	0x0800108c
 800106c:	0800108c 	.word	0x0800108c
 8001070:	08001090 	.word	0x08001090

08001074 <_init>:
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	bf00      	nop
 8001078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107a:	bc08      	pop	{r3}
 800107c:	469e      	mov	lr, r3
 800107e:	4770      	bx	lr

08001080 <_fini>:
 8001080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001082:	bf00      	nop
 8001084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001086:	bc08      	pop	{r3}
 8001088:	469e      	mov	lr, r3
 800108a:	4770      	bx	lr
