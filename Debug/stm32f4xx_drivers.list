
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e38  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001fe0  08001fe0  00011fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002064  08002064  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08002064  08002064  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002064  08002064  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002068  08002068  00012068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800206c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000009c  08002108  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000118  08002108  00020118  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d5c  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ac4  00000000  00000000  00023e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000300  00000000  00000000  000248e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000298  00000000  00000000  00024be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ce5  00000000  00000000  00024e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002999  00000000  00000000  00028b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000cfcb  00000000  00000000  0002b4fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000384c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f4  00000000  00000000  00038544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001fc8 	.word	0x08001fc8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	08001fc8 	.word	0x08001fc8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t enOrDi){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d162      	bne.n	80002d0 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a63      	ldr	r2, [pc, #396]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 800021e:	e0b9      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB){
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a61      	ldr	r2, [pc, #388]	; (80003a8 <GPIO_PeriClockControl+0x1b0>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a5d      	ldr	r2, [pc, #372]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e0ae      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC){
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a5c      	ldr	r2, [pc, #368]	; (80003ac <GPIO_PeriClockControl+0x1b4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a58      	ldr	r2, [pc, #352]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e0a3      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD){
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <GPIO_PeriClockControl+0x1b8>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000254:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a52      	ldr	r2, [pc, #328]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e098      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a53      	ldr	r2, [pc, #332]	; (80003b4 <GPIO_PeriClockControl+0x1bc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800026a:	4b4e      	ldr	r3, [pc, #312]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e08d      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4f      	ldr	r2, [pc, #316]	; (80003b8 <GPIO_PeriClockControl+0x1c0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000280:	4b48      	ldr	r3, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a47      	ldr	r2, [pc, #284]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e082      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PeriClockControl+0x1c4>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e077      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH){
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PeriClockControl+0x1c8>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80002ac:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e06c      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PeriClockControl+0x1cc>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d168      	bne.n	8000394 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a37      	ldr	r2, [pc, #220]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e061      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a31      	ldr	r2, [pc, #196]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e056      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB){
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a2f      	ldr	r2, [pc, #188]	; (80003a8 <GPIO_PeriClockControl+0x1b0>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 80002f4:	f023 0302 	bic.w	r3, r3, #2
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e04b      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PeriClockControl+0x1b4>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800030a:	f023 0304 	bic.w	r3, r3, #4
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e040      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <GPIO_PeriClockControl+0x1b8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e035      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <GPIO_PeriClockControl+0x1bc>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e02a      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <GPIO_PeriClockControl+0x1c0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e01f      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PeriClockControl+0x1c4>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e014      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <GPIO_PeriClockControl+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 8000378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e009      	b.n	8000394 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PeriClockControl+0x1cc>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <GPIO_PeriClockControl+0x1ac>)
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40021400 	.word	0x40021400
 80003bc:	40021800 	.word	0x40021800
 80003c0:	40021c00 	.word	0x40021c00
 80003c4:	40022000 	.word	0x40022000

080003c8 <GPIO_Init>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp. register
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

	//check to see if it's already enabled?
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff0c 	bl	80001f8 <GPIO_PeriClockControl>

	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d820      	bhi.n	800042a <GPIO_Init+0x62>
		//this is non-interrupt mode
		//Shift the mode the pin number of bits. Multiple by 2 as a single pin takes two bits
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	e0dd      	b.n	80005e6 <GPIO_Init+0x21e>
	} else {
		// if the Pin Mode is an interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b04      	cmp	r3, #4
 8000430:	d117      	bne.n	8000462 <GPIO_Init+0x9a>
			//NOTE: clearing of target bits before setting not required because only 1 bit is used
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000432:	4b4a      	ldr	r3, [pc, #296]	; (800055c <GPIO_Init+0x194>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a46      	ldr	r2, [pc, #280]	; (800055c <GPIO_Init+0x194>)
 8000444:	430b      	orrs	r3, r1
 8000446:	60d3      	str	r3, [r2, #12]
			// clear the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000448:	4b44      	ldr	r3, [pc, #272]	; (800055c <GPIO_Init+0x194>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	43d2      	mvns	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a40      	ldr	r2, [pc, #256]	; (800055c <GPIO_Init+0x194>)
 800045c:	400b      	ands	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
 8000460:	e035      	b.n	80004ce <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	795b      	ldrb	r3, [r3, #5]
 8000466:	2b05      	cmp	r3, #5
 8000468:	d117      	bne.n	800049a <GPIO_Init+0xd2>
			// 2. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046a:	4b3c      	ldr	r3, [pc, #240]	; (800055c <GPIO_Init+0x194>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a38      	ldr	r2, [pc, #224]	; (800055c <GPIO_Init+0x194>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6093      	str	r3, [r2, #8]
			// clear the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000480:	4b36      	ldr	r3, [pc, #216]	; (800055c <GPIO_Init+0x194>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	43d2      	mvns	r2, r2
 8000490:	4611      	mov	r1, r2
 8000492:	4a32      	ldr	r2, [pc, #200]	; (800055c <GPIO_Init+0x194>)
 8000494:	400b      	ands	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
 8000498:	e019      	b.n	80004ce <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	795b      	ldrb	r3, [r3, #5]
 800049e:	2b06      	cmp	r3, #6
 80004a0:	d115      	bne.n	80004ce <GPIO_Init+0x106>
			// 3. Configure FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a2:	4b2e      	ldr	r3, [pc, #184]	; (800055c <GPIO_Init+0x194>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a2a      	ldr	r2, [pc, #168]	; (800055c <GPIO_Init+0x194>)
 80004b4:	430b      	orrs	r3, r1
 80004b6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <GPIO_Init+0x194>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a24      	ldr	r2, [pc, #144]	; (800055c <GPIO_Init+0x194>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
		}
		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 80004ce:	4b24      	ldr	r3, [pc, #144]	; (8000560 <GPIO_Init+0x198>)
 80004d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d2:	4a23      	ldr	r2, [pc, #140]	; (8000560 <GPIO_Init+0x198>)
 80004d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d8:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t extiCrRegIndex, extiCrPinPos, portcode;
		extiCrRegIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	089b      	lsrs	r3, r3, #2
 80004e0:	74fb      	strb	r3, [r7, #19]
		extiCrPinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	f003 0303 	and.w	r3, r3, #3
 80004ea:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <GPIO_Init+0x19c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d046      	beq.n	8000584 <GPIO_Init+0x1bc>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <GPIO_Init+0x1a0>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d02b      	beq.n	8000558 <GPIO_Init+0x190>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a19      	ldr	r2, [pc, #100]	; (800056c <GPIO_Init+0x1a4>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d024      	beq.n	8000554 <GPIO_Init+0x18c>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a18      	ldr	r2, [pc, #96]	; (8000570 <GPIO_Init+0x1a8>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d01d      	beq.n	8000550 <GPIO_Init+0x188>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a16      	ldr	r2, [pc, #88]	; (8000574 <GPIO_Init+0x1ac>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d016      	beq.n	800054c <GPIO_Init+0x184>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <GPIO_Init+0x1b0>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d00f      	beq.n	8000548 <GPIO_Init+0x180>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a13      	ldr	r2, [pc, #76]	; (800057c <GPIO_Init+0x1b4>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d008      	beq.n	8000544 <GPIO_Init+0x17c>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <GPIO_Init+0x1b8>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d101      	bne.n	8000540 <GPIO_Init+0x178>
 800053c:	2307      	movs	r3, #7
 800053e:	e022      	b.n	8000586 <GPIO_Init+0x1be>
 8000540:	2300      	movs	r3, #0
 8000542:	e020      	b.n	8000586 <GPIO_Init+0x1be>
 8000544:	2306      	movs	r3, #6
 8000546:	e01e      	b.n	8000586 <GPIO_Init+0x1be>
 8000548:	2305      	movs	r3, #5
 800054a:	e01c      	b.n	8000586 <GPIO_Init+0x1be>
 800054c:	2304      	movs	r3, #4
 800054e:	e01a      	b.n	8000586 <GPIO_Init+0x1be>
 8000550:	2303      	movs	r3, #3
 8000552:	e018      	b.n	8000586 <GPIO_Init+0x1be>
 8000554:	2302      	movs	r3, #2
 8000556:	e016      	b.n	8000586 <GPIO_Init+0x1be>
 8000558:	2301      	movs	r3, #1
 800055a:	e014      	b.n	8000586 <GPIO_Init+0x1be>
 800055c:	40013c00 	.word	0x40013c00
 8000560:	40023800 	.word	0x40023800
 8000564:	40020000 	.word	0x40020000
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800
 8000570:	40020c00 	.word	0x40020c00
 8000574:	40021000 	.word	0x40021000
 8000578:	40021400 	.word	0x40021400
 800057c:	40021800 	.word	0x40021800
 8000580:	40021c00 	.word	0x40021c00
 8000584:	2300      	movs	r3, #0
 8000586:	747b      	strb	r3, [r7, #17]
		temp = portcode << (4 * extiCrPinPos);
 8000588:	7c7a      	ldrb	r2, [r7, #17]
 800058a:	7cbb      	ldrb	r3, [r7, #18]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	617b      	str	r3, [r7, #20]
		SYSCFG->EXTICR[extiCrRegIndex] &= ~(0xF <<(4 * extiCrPinPos)); //clearing
 8000594:	4a65      	ldr	r2, [pc, #404]	; (800072c <GPIO_Init+0x364>)
 8000596:	7cfb      	ldrb	r3, [r7, #19]
 8000598:	3302      	adds	r3, #2
 800059a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800059e:	7cbb      	ldrb	r3, [r7, #18]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	210f      	movs	r1, #15
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	495f      	ldr	r1, [pc, #380]	; (800072c <GPIO_Init+0x364>)
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
 80005b0:	4002      	ands	r2, r0
 80005b2:	3302      	adds	r3, #2
 80005b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[extiCrRegIndex] |= temp; //setting
 80005b8:	4a5c      	ldr	r2, [pc, #368]	; (800072c <GPIO_Init+0x364>)
 80005ba:	7cfb      	ldrb	r3, [r7, #19]
 80005bc:	3302      	adds	r3, #2
 80005be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005c2:	485a      	ldr	r0, [pc, #360]	; (800072c <GPIO_Init+0x364>)
 80005c4:	7cfb      	ldrb	r3, [r7, #19]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	3302      	adds	r3, #2
 80005cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// 3. enable exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b57      	ldr	r3, [pc, #348]	; (8000730 <GPIO_Init+0x368>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a53      	ldr	r2, [pc, #332]	; (8000730 <GPIO_Init+0x368>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6013      	str	r3, [r2, #0]
	}

	temp = 0; //is this needed?
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

	// 2. Configure the pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68da      	ldr	r2, [r3, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	2103      	movs	r1, #3
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	400a      	ands	r2, r1
 8000618:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68d9      	ldr	r1, [r3, #12]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	430a      	orrs	r2, r1
 8000628:	60da      	str	r2, [r3, #12]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) ||
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	795b      	ldrb	r3, [r3, #5]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d003      	beq.n	800063a <GPIO_Init+0x272>
		(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	795b      	ldrb	r3, [r3, #5]
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) ||
 8000636:	2b02      	cmp	r3, #2
 8000638:	d13d      	bne.n	80006b6 <GPIO_Init+0x2ee>
		// 3. Configure the speed
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	799b      	ldrb	r3, [r3, #6]
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2103      	movs	r1, #3
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6899      	ldr	r1, [r3, #8]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	430a      	orrs	r2, r1
 8000678:	609a      	str	r2, [r3, #8]

		// 4. Configure the optype if mode is output or analog
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7a1b      	ldrb	r3, [r3, #8]
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	4619      	mov	r1, r3
 8000696:	2301      	movs	r3, #1
 8000698:	408b      	lsls	r3, r1
 800069a:	43db      	mvns	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	400a      	ands	r2, r1
 80006a4:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6859      	ldr	r1, [r3, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	605a      	str	r2, [r3, #4]
	}

	// 5. Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795b      	ldrb	r3, [r3, #5]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d132      	bne.n	8000724 <GPIO_Init+0x35c>
		//configure the alternate function registers
		uint8_t altRegIndex, altRegPinPos;

		altRegIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // pin >8 will return 1, else 0
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	743b      	strb	r3, [r7, #16]
		altRegPinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	73fb      	strb	r3, [r7, #15]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * altRegPinPos);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7a5b      	ldrb	r3, [r3, #9]
 80006d4:	461a      	mov	r2, r3
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[altRegIndex] &= ~(0xF << (4 * altRegPinPos)); //clearing
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7c3a      	ldrb	r2, [r7, #16]
 80006e6:	3208      	adds	r2, #8
 80006e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	220f      	movs	r2, #15
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	7c3a      	ldrb	r2, [r7, #16]
 8000700:	4001      	ands	r1, r0
 8000702:	3208      	adds	r2, #8
 8000704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[altRegIndex] |= temp; //setting
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7c3a      	ldrb	r2, [r7, #16]
 800070e:	3208      	adds	r2, #8
 8000710:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	7c3a      	ldrb	r2, [r7, #16]
 800071a:	6979      	ldr	r1, [r7, #20]
 800071c:	4301      	orrs	r1, r0
 800071e:	3208      	adds	r2, #8
 8000720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013800 	.word	0x40013800
 8000730:	40013c00 	.word	0x40013c00

08000734 <I2C_ExecuteAddressPhase>:
 *
 * @return				- none
 *
 * @Note				- none
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr, uint8_t readOrWrite){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	4613      	mov	r3, r2
 8000742:	70bb      	strb	r3, [r7, #2]
	//make space for the R/nW bit
	slaveAddr = slaveAddr << 1;
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	70fb      	strb	r3, [r7, #3]
	if (readOrWrite == I2C_READ){
 800074a:	78bb      	ldrb	r3, [r7, #2]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d104      	bne.n	800075a <I2C_ExecuteAddressPhase+0x26>
		slaveAddr |= 1;//slave address is address plus Read bit (1)
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	70fb      	strb	r3, [r7, #3]
 8000758:	e003      	b.n	8000762 <I2C_ExecuteAddressPhase+0x2e>
	} else {
		slaveAddr &= ~(1);//slave address is address plus Write bit	(0)
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	f023 0301 	bic.w	r3, r3, #1
 8000760:	70fb      	strb	r3, [r7, #3]
	}
	pI2Cx->DR = slaveAddr;
 8000762:	78fa      	ldrb	r2, [r7, #3]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	611a      	str	r2, [r3, #16]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <I2C_ClearADDRFlag>:
 * @return				- none
 *
 * @Note				- why not use the GetFlagStatus function? we don't need a specific flag
 *						- because we read SR1 before we call this, could this just read SR2? do we need a function?
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 8000772:	b480      	push	{r7}
 8000774:	b085      	sub	sp, #20
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2Cx->SR1;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;//type cast to void so the compiler doesn't throw and unused warning
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <I2C_ClearSTOPFFlag>:

static void I2C_ClearSTOPFFlag(I2C_RegDef_t *pI2Cx){
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	uint16_t dummyWrite = (1 << I2C_CR1_PE);
 8000798:	2301      	movs	r3, #1
 800079a:	81fb      	strh	r3, [r7, #14]
	dummyRead = pI2Cx->SR1;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	60bb      	str	r3, [r7, #8]
	(void)dummyRead;//type cast to void so the compiler doesn't throw and unused warning
	pI2Cx->CR1 |= dummyWrite;//need to write to the CR1 to clear the flag. taken from STM generated code
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <I2C_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_PeriClockControl(I2C_RegDef_t* pI2Cx, uint8_t enOrDi){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d120      	bne.n	800080c <I2C_PeriClockControl+0x54>
			if(pI2Cx == I2C1){
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <I2C_PeriClockControl+0xa0>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d106      	bne.n	80007e0 <I2C_PeriClockControl+0x28>
				I2C1_PCLK_EN();
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <I2C_PeriClockControl+0xa4>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <I2C_PeriClockControl+0xa4>)
 80007d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
				I2C2_PCLK_DI();
			} else if (pI2Cx == I2C3){
				I2C3_PCLK_DI();
			}
		}
}
 80007de:	e035      	b.n	800084c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C2){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <I2C_PeriClockControl+0xa8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d106      	bne.n	80007f6 <I2C_PeriClockControl+0x3e>
				I2C2_PCLK_EN();
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <I2C_PeriClockControl+0xa4>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <I2C_PeriClockControl+0xa4>)
 80007ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007f4:	e02a      	b.n	800084c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C3){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <I2C_PeriClockControl+0xac>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d126      	bne.n	800084c <I2C_PeriClockControl+0x94>
				I2C3_PCLK_EN();
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <I2C_PeriClockControl+0xa4>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <I2C_PeriClockControl+0xa4>)
 8000804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
}
 800080a:	e01f      	b.n	800084c <I2C_PeriClockControl+0x94>
			if(pI2Cx == I2C1){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <I2C_PeriClockControl+0xa0>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <I2C_PeriClockControl+0x6a>
				I2C1_PCLK_DI();
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <I2C_PeriClockControl+0xa4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a10      	ldr	r2, [pc, #64]	; (800085c <I2C_PeriClockControl+0xa4>)
 800081a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000820:	e014      	b.n	800084c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C2){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <I2C_PeriClockControl+0xa8>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <I2C_PeriClockControl+0x80>
				I2C2_PCLK_DI();
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <I2C_PeriClockControl+0xa4>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <I2C_PeriClockControl+0xa4>)
 8000830:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000836:	e009      	b.n	800084c <I2C_PeriClockControl+0x94>
			} else if (pI2Cx == I2C3){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <I2C_PeriClockControl+0xac>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d105      	bne.n	800084c <I2C_PeriClockControl+0x94>
				I2C3_PCLK_DI();
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <I2C_PeriClockControl+0xa4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a05      	ldr	r2, [pc, #20]	; (800085c <I2C_PeriClockControl+0xa4>)
 8000846:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40005400 	.word	0x40005400
 800085c:	40023800 	.word	0x40023800
 8000860:	40005800 	.word	0x40005800
 8000864:	40005c00 	.word	0x40005c00

08000868 <I2C_Init>:
 * @return				- none
 *
 * @Note				- I don't like the way this is done, but I'm doing it to be consistent with the course
 * 							Instead, I think the SPIConfig should hold masks
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

	//enable the I2C clock
	//should I check this is already enabled?
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff9e 	bl	80007b8 <I2C_PeriClockControl>

	//disable the specific I2C (concept imitated from STM SPI generated code) I2C will be enabled when sending or receiving
	I2C_PeripheralControl(pI2CHandle->pI2Cx, DISABLE);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fc17 	bl	80010b6 <I2C_PeripheralControl>

	uint32_t tempreg = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	//ack control bit
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle->pI2Cx->CR1 = tempreg; // equals or |=

	//configure the FREQ field of CR2
	tempreg = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;//divide by 1 MHz to get 16 (not 16 mil)
 8000890:	f000 fc90 	bl	80011b4 <RCC_GetPCLK1Value>
 8000894:	4602      	mov	r2, r0
 8000896:	4b4a      	ldr	r3, [pc, #296]	; (80009c0 <I2C_Init+0x158>)
 8000898:	fba3 2302 	umull	r2, r3, r3, r2
 800089c:	0c9b      	lsrs	r3, r3, #18
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all bits except first 5
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008ae:	605a      	str	r2, [r3, #4]

	//configure the devices address
	tempreg = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1; //assuming 7-bit slave address
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
	//if using 10-bit mode, address will not be shifted, and bit 15 of will need to be set
	tempreg |= (1 << 14); // this bit needs to be set according to RM. replace 14 with variable
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccrValue = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=  I2C_SCL_SPEED_SM){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	4a39      	ldr	r2, [pc, #228]	; (80009c4 <I2C_Init+0x15c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d80f      	bhi.n	8000904 <I2C_Init+0x9c>
		//mode is standard mode
		ccrValue = RCC_GetPCLK1Value() / (2 *pI2CHandle->I2C_Config.I2C_SCLSpeed); // CCR = FPCLK1/2*FSCL (frequency)
 80008e4:	f000 fc66 	bl	80011b4 <RCC_GetPCLK1Value>
 80008e8:	4602      	mov	r2, r0
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f4:	817b      	strh	r3, [r7, #10]
		tempreg |= ccrValue & 0xFFF; //only use 12 bits (CCR->CCR requirement
 80008f6:	897b      	ldrh	r3, [r7, #10]
 80008f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	4313      	orrs	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	e02b      	b.n	800095c <I2C_Init+0xf4>
	} else {
		//mode is fast mode
		tempreg |= (1 << 15); //program the mode
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090a:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14); // set the duty cycle
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7a9b      	ldrb	r3, [r3, #10]
 8000910:	039b      	lsls	r3, r3, #14
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4313      	orrs	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7a9b      	ldrb	r3, [r3, #10]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10b      	bne.n	800093a <I2C_Init+0xd2>
			ccrValue = RCC_GetPCLK1Value() / (3 *pI2CHandle->I2C_Config.I2C_SCLSpeed); // CCR = FPCLK1/3*FSCL (frequency)
 8000922:	f000 fc47 	bl	80011b4 <RCC_GetPCLK1Value>
 8000926:	4601      	mov	r1, r0
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	fbb1 f3f3 	udiv	r3, r1, r3
 8000936:	817b      	strh	r3, [r7, #10]
 8000938:	e00c      	b.n	8000954 <I2C_Init+0xec>
		} else {
			ccrValue = RCC_GetPCLK1Value() / (25 *pI2CHandle->I2C_Config.I2C_SCLSpeed); // CCR = FPCLK1/25*FSCL (frequency)
 800093a:	f000 fc3b 	bl	80011b4 <RCC_GetPCLK1Value>
 800093e:	4601      	mov	r1, r0
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	009a      	lsls	r2, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000952:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccrValue;
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	4313      	orrs	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	61da      	str	r2, [r3, #28]

	//configure TRISE
	tempreg = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=  I2C_SCL_SPEED_SM){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <I2C_Init+0x15c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d80e      	bhi.n	8000990 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = ((RCC_GetPCLK1Value()*I2C_MAX_TRISE_SM)/1000000000U) + 1;//take into account ns
 8000972:	f000 fc1f 	bl	80011b4 <RCC_GetPCLK1Value>
 8000976:	4602      	mov	r2, r0
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	fb03 f302 	mul.w	r3, r3, r2
 8000980:	0a5b      	lsrs	r3, r3, #9
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <I2C_Init+0x160>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	09db      	lsrs	r3, r3, #7
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e00d      	b.n	80009ac <I2C_Init+0x144>
	} else {
		//mode is fast mode
		tempreg = ((RCC_GetPCLK1Value()*I2C_MAX_TRISE_FM)/1000000000U) + 1;// take into account ns
 8000990:	f000 fc10 	bl	80011b4 <RCC_GetPCLK1Value>
 8000994:	4602      	mov	r2, r0
 8000996:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800099a:	fb03 f302 	mul.w	r3, r3, r2
 800099e:	0a5b      	lsrs	r3, r3, #9
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <I2C_Init+0x160>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	09db      	lsrs	r3, r3, #7
 80009a8:	3301      	adds	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009b6:	621a      	str	r2, [r3, #32]
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	000186a0 	.word	0x000186a0
 80009c8:	00044b83 	.word	0x00044b83

080009cc <I2C_SlaveSendDataIT>:

	return busystate;
}

uint8_t I2C_SlaveSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	uint8_t busystate = pI2CHandle->TxRxState;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	7f1b      	ldrb	r3, [r3, #28]
 80009dc:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d036      	beq.n	8000a52 <I2C_SlaveSendDataIT+0x86>
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d033      	beq.n	8000a52 <I2C_SlaveSendDataIT+0x86>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = len;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2202      	movs	r2, #2
 80009fa:	771a      	strb	r2, [r3, #28]

		//if I2C is not enabled, then enable it
		if(! ( pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_PE) ) ){
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d105      	bne.n	8000a16 <I2C_SlaveSendDataIT+0x4a>
			I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fb50 	bl	80010b6 <I2C_PeripheralControl>
		}

		//enable address acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fb65 	bl	80010ec <I2C_ManageAcking>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a30:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a40:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a50:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <I2C_SlaveReceiveDataIT>:

//NOTE: Do we need a length here?
//Yes: we probably don't want the master to be able to send unlimited data

uint8_t I2C_SlaveReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint32_t len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	7f1b      	ldrb	r3, [r3, #28]
 8000a6c:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d039      	beq.n	8000ae8 <I2C_SlaveReceiveDataIT+0x8c>
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d036      	beq.n	8000ae8 <I2C_SlaveReceiveDataIT+0x8c>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = len;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = len; //Rxsize is used in the ISR code to manage the data reception
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	621a      	str	r2, [r3, #32]

		//if I2C is not enabled, then enable it
		if(! ( pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_PE) ) ){
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d105      	bne.n	8000aac <I2C_SlaveReceiveDataIT+0x50>
			I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fb05 	bl	80010b6 <I2C_PeripheralControl>
		}

		//enable address acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fb1a 	bl	80010ec <I2C_ManageAcking>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ac6:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ad6:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ae6:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <I2C_IRQInterruptConfig>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enOrDi){
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71bb      	strb	r3, [r7, #6]
	uint8_t registerIndex, registerBitPos;
	registerIndex = IRQNumber /32;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	73fb      	strb	r3, [r7, #15]
	registerBitPos = IRQNumber % 32;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 031f 	and.w	r3, r3, #31
 8000b10:	73bb      	strb	r3, [r7, #14]
	if(enOrDi == ENABLE){
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d10e      	bne.n	8000b36 <I2C_IRQInterruptConfig+0x42>
		NVIC->ISER[registerIndex] |= 1 << registerBitPos; //setting, no need to clear
 8000b18:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <I2C_IRQInterruptConfig+0x6c>)
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	490d      	ldr	r1, [pc, #52]	; (8000b60 <I2C_IRQInterruptConfig+0x6c>)
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	4302      	orrs	r2, r0
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		NVIC->ICER[registerIndex] |= 1<< registerBitPos; //setting, no need to clear
	}
}
 8000b34:	e00f      	b.n	8000b56 <I2C_IRQInterruptConfig+0x62>
		NVIC->ICER[registerIndex] |= 1<< registerBitPos; //setting, no need to clear
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <I2C_IRQInterruptConfig+0x6c>)
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	3320      	adds	r3, #32
 8000b3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	2101      	movs	r1, #1
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	4905      	ldr	r1, [pc, #20]	; (8000b60 <I2C_IRQInterruptConfig+0x6c>)
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	4302      	orrs	r2, r0
 8000b50:	3320      	adds	r3, #32
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <I2C_MasterHandleTXEIT>:
 *
 * @return				- none
 *
 * @Note				- none
 */
static void I2C_MasterHandleTXEIT(I2C_Handle_t *pI2CHandle){
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	//we have to transmit data
	if(pI2CHandle->TxLen > 0){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00f      	beq.n	8000b94 <I2C_MasterHandleTXEIT+0x30>
		//1. load the data in to the DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
	}
	//NOTE: We don't need to handle the end here because BTF IT will do this
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <I2C_MasterHandleRXNEIT>:
 * @Note				- The STM code seems much more robust, study that in order to gain full understanding
 * 						- for transmitting, we let the BTF interrupt handle the stop condition
 * 						- I think we should also let BTF interrupt handle the stop condition for receiving
 *
 */
static void I2C_MasterHandleRXNEIT(I2C_Handle_t *pI2CHandle){
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	//data reception
	if(pI2CHandle->RxSize == 1){
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d10c      	bne.n	8000bc8 <I2C_MasterHandleRXNEIT+0x2a>
//		if(pI2CHandle->repStart == I2C_SR_DISABLED){
//			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
//		}

		//1. load the data in to the DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	701a      	strb	r2, [r3, #0]
		//2. decrement the TxLen
		pI2CHandle->RxLen--;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	619a      	str	r2, [r3, #24]
 8000bc6:	e02f      	b.n	8000c28 <I2C_MasterHandleRXNEIT+0x8a>
	} else if (pI2CHandle->RxSize > 1){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d92b      	bls.n	8000c28 <I2C_MasterHandleRXNEIT+0x8a>
		//enable acking, this mimics STM code, not the course
		// this isn't for len = 1 because it is not needed for 1 byte
		if (!(pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR1_ACK)) && (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d109      	bne.n	8000bf2 <I2C_MasterHandleRXNEIT+0x54>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7a5b      	ldrb	r3, [r3, #9]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d105      	bne.n	8000bf2 <I2C_MasterHandleRXNEIT+0x54>
			//acking isn't enabled, but should be
			I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2101      	movs	r1, #1
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fa7d 	bl	80010ec <I2C_ManageAcking>
		}

		if (pI2CHandle->RxLen == 2){
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d105      	bne.n	8000c06 <I2C_MasterHandleRXNEIT+0x68>
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fa73 	bl	80010ec <I2C_ManageAcking>
//					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
//				}
		}

		//1. load the data in to the DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	701a      	strb	r2, [r3, #0]
		//2. decrement the TxLen
		pI2CHandle->RxLen--;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	619a      	str	r2, [r3, #24]
		//3. increment the buffer address
		pI2CHandle->pRxBuffer++;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	611a      	str	r2, [r3, #16]
	}

	if(pI2CHandle->RxLen == 0){
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10f      	bne.n	8000c50 <I2C_MasterHandleRXNEIT+0xb2>
		//instructor code has this here, but according to the RM, this should be sent when there are 2 bytes left
		//to make the stop conditions above work, instead of the one below, must change the line
		//above from pI2CHandle->RxLen == 2 to pI2CHandle->RxLen == 1
		if(pI2CHandle->repStart == I2C_SR_DISABLED){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d104      	bne.n	8000c42 <I2C_MasterHandleRXNEIT+0xa4>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fa70 	bl	8001122 <I2C_GenerateStopCondition>
		}
		//close the I2C data reception and notify the application
		//2. Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f843 	bl	8000cce <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_MASTER_RX_CMPLT);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 fc06 	bl	800145c <I2C_ApplicationEventCallback>
	}
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <I2C_SlaveHandleTXEIT>:

static void I2C_SlaveHandleTXEIT(I2C_Handle_t *pI2CHandle)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	//we have to transmit data
	if(pI2CHandle->TxLen > 0){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00f      	beq.n	8000c88 <I2C_SlaveHandleTXEIT+0x30>
		//1. load the data in to the DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	60da      	str	r2, [r3, #12]
	}
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <I2C_SlaveHandleRXNEIT>:

static void I2C_SlaveHandleRXNEIT(I2C_Handle_t *pI2CHandle)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	//we have to receive data
	if(pI2CHandle->RxLen > 0){
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d010      	beq.n	8000cc4 <I2C_SlaveHandleRXNEIT+0x32>
		//1. load the data in to the DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	701a      	strb	r2, [r3, #0]

		//2. decrement the TxLen
		pI2CHandle->RxLen--;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]

		//3. increment the buffer address
		pI2CHandle->pRxBuffer++;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	611a      	str	r2, [r3, #16]
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <I2C_CloseReceiveData>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
	//Would it makes sense to disable the error interrupts?
	//Implement the code to disable the ITERREN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ce4:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cf4:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d04:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]

	//do we need this here if we are enabling acking else where?
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7a5b      	ldrb	r3, [r3, #9]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d105      	bne.n	8000d32 <I2C_CloseReceiveData+0x64>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f9dd 	bl	80010ec <I2C_ManageAcking>
	}
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <I2C_CloseSendData>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	//Would it makes sense to disable the error interrupts?
	//Implement the code to disable the ITERREN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d50:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d60:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d70:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <I2C_EV_IRQHandling>:
 * 						- uses TRA to determine whether or not to check TXE/RXNE and BTF
 * 						- BTF receive and transmit have their own functions
 * 						- STM code disables the BUF it in reception when data is at 3 bits and relies on BTF ITs to finish reception
 * 						-TODO: implement slave transfer and receive so this doesn't have to occur in the callback code
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]

	//Interrupt handling for both master and slave mode of device
	uint32_t eventIT, bufferIT;
	uint16_t sr1IT, sr2IT;

	eventIT = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da0:	617b      	str	r3, [r7, #20]
	bufferIT = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dac:	613b      	str	r3, [r7, #16]
	sr1IT= pI2CHandle->pI2Cx->SR1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	81fb      	strh	r3, [r7, #14]
	sr2IT= pI2CHandle->pI2Cx->SR2;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	81bb      	strh	r3, [r7, #12]

	//ITEVTEN is enabled

	//1. Handle for interrupt generated by SB event
	//	Note: SB flag is only applicable in Master mode
	if(eventIT && (sr1IT & I2C_FLAG_SB) )
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d01f      	beq.n	8000e04 <I2C_EV_IRQHandling+0x76>
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d01a      	beq.n	8000e04 <I2C_EV_IRQHandling+0x76>
	{
		//Interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block, let's execute the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7f1b      	ldrb	r3, [r3, #28]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d108      	bne.n	8000de8 <I2C_EV_IRQHandling+0x5a>
		{
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, I2C_WRITE);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7f5b      	ldrb	r3, [r3, #29]
 8000dde:	2200      	movs	r2, #0
 8000de0:	4619      	mov	r1, r3
 8000de2:	f7ff fca7 	bl	8000734 <I2C_ExecuteAddressPhase>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000de6:	e0cf      	b.n	8000f88 <I2C_EV_IRQHandling+0x1fa>
		} else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7f1b      	ldrb	r3, [r3, #28]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	f040 80cb 	bne.w	8000f88 <I2C_EV_IRQHandling+0x1fa>
		{
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, I2C_READ);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7f5b      	ldrb	r3, [r3, #29]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fc99 	bl	8000734 <I2C_ExecuteAddressPhase>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e02:	e0c1      	b.n	8000f88 <I2C_EV_IRQHandling+0x1fa>
	//2. Handle for interrupt generated by ADDR event
	//	Note:	When Master mode: Address is sent
	//			When Slave mode : Address matched with own address
	//			Disable acking if in receiving mode and one byte is received
	// bug in the insturctors code: doesn't clear addr if rxSize is > 1
	else if(eventIT && (sr1IT & I2C_FLAG_ADDR) )
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d01d      	beq.n	8000e46 <I2C_EV_IRQHandling+0xb8>
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d018      	beq.n	8000e46 <I2C_EV_IRQHandling+0xb8>
	{
		//ADDR flag is set
		if(sr2IT & I2C_FLAG_MSL)
 8000e14:	89bb      	ldrh	r3, [r7, #12]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00d      	beq.n	8000e3a <I2C_EV_IRQHandling+0xac>
		{
			//device is master mode
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7f1b      	ldrb	r3, [r3, #28]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d109      	bne.n	8000e3a <I2C_EV_IRQHandling+0xac>
			{
				//device is Receiving
				if(pI2CHandle->RxSize == 1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d105      	bne.n	8000e3a <I2C_EV_IRQHandling+0xac>
				{
					//only receiving one byte
					//first disable ack
					I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f959 	bl	80010ec <I2C_ManageAcking>
				}
			}
		}
		//Clear ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc97 	bl	8000772 <I2C_ClearADDRFlag>
 8000e44:	e0a7      	b.n	8000f96 <I2C_EV_IRQHandling+0x208>

	}

	//3. Handle for interrupt generated by BTF(Byte Transfer Finished) event
	else if(eventIT && (sr1IT & I2C_FLAG_BTF) )
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d02b      	beq.n	8000ea4 <I2C_EV_IRQHandling+0x116>
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d026      	beq.n	8000ea4 <I2C_EV_IRQHandling+0x116>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7f1b      	ldrb	r3, [r3, #28]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	f040 8096 	bne.w	8000f8c <I2C_EV_IRQHandling+0x1fe>
		{
			if(sr2IT & I2C_FLAG_MSL ){
 8000e60:	89bb      	ldrh	r3, [r7, #12]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8090 	beq.w	8000f8c <I2C_EV_IRQHandling+0x1fe>
				//make sure that TXE is also set
				if( sr1IT & I2C_FLAG_TXE )
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 808a 	beq.w	8000f8c <I2C_EV_IRQHandling+0x1fe>
				{
					//BTF, TXE both 1
					if(pI2CHandle->TxLen == 0)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f040 8085 	bne.w	8000f8c <I2C_EV_IRQHandling+0x1fe>
					{
						//1. generate STOP condition
						if(pI2CHandle->repStart == I2C_SR_DISABLED)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d104      	bne.n	8000e94 <I2C_EV_IRQHandling+0x106>
						{
							I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f947 	bl	8001122 <I2C_GenerateStopCondition>
						}

						//2. rest all member elements of the handle struct
						I2C_CloseSendData(pI2CHandle);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff50 	bl	8000d3a <I2C_CloseSendData>

						//3. notify the application about transmission complete
						I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_MASTER_TX_CMPLT);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fadd 	bl	800145c <I2C_ApplicationEventCallback>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000ea2:	e073      	b.n	8000f8c <I2C_EV_IRQHandling+0x1fe>

	//4. Handle for interrupt generated by STOPF event
	//	Note: Stop detection flag is applicable only slave mode. For master this flag will never be set
	//RM recommends going through entire process of read SR1 and write CR1 to clear after STOPF is set
	//ADDR flag should also be cleared
	else if(eventIT && (sr1IT & I2C_FLAG_STOPF ))
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d024      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x166>
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01f      	beq.n	8000ef4 <I2C_EV_IRQHandling+0x166>
	{
		//close data reception
		I2C_CloseReceiveData(pI2CHandle);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff0a 	bl	8000cce <I2C_CloseReceiveData>

		//STOPF flag is set
		//Clear the STOPF i.e.[ 1) read SR1 2) Write to CR1 ]
		//Already read SR1 above, do we need to write something specific?
		//NOTE: The RM states that for either STOPF or ADDR set evetns, both STOPF and ADDR should be checked and cleared
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fc57 	bl	8000772 <I2C_ClearADDRFlag>

		I2C_ClearSTOPFFlag(pI2CHandle->pI2Cx);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc61 	bl	8000790 <I2C_ClearSTOPFFlag>

		//disable acking
		//acking might be enabled in close receivedata, should check if this is necessary
		I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f909 	bl	80010ec <I2C_ManageAcking>
//		pI2CHandle->pI2Cx->CR1 |= 0x0000;

//		//notify the appliaction that RX is complete is detected
		//should probably implement more checking to confirm this occurs at the correct time.
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX || pI2CHandle->RxSize == 0){
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7f1b      	ldrb	r3, [r3, #28]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d003      	beq.n	8000eea <I2C_EV_IRQHandling+0x15c>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d152      	bne.n	8000f90 <I2C_EV_IRQHandling+0x202>
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_SLAVE_RX_CMPLT);
 8000eea:	2103      	movs	r1, #3
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fab5 	bl	800145c <I2C_ApplicationEventCallback>
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX || pI2CHandle->RxSize == 0){
 8000ef2:	e04d      	b.n	8000f90 <I2C_EV_IRQHandling+0x202>
		}
		//else throw an exception probably
	}

	//5. Handle for interrupt generated by TXE event
	else if(eventIT && bufferIT && (sr1IT & I2C_FLAG_TXE))
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d021      	beq.n	8000f3e <I2C_EV_IRQHandling+0x1b0>
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d01e      	beq.n	8000f3e <I2C_EV_IRQHandling+0x1b0>
 8000f00:	89fb      	ldrh	r3, [r7, #14]
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d019      	beq.n	8000f3e <I2C_EV_IRQHandling+0x1b0>
	{
		//check for device mode
		if(sr2IT & I2C_FLAG_MSL )
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d007      	beq.n	8000f24 <I2C_EV_IRQHandling+0x196>
		{
			//device mode is master
			//TXE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7f1b      	ldrb	r3, [r3, #28]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d13b      	bne.n	8000f94 <I2C_EV_IRQHandling+0x206>
			{
				I2C_MasterHandleTXEIT(pI2CHandle);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fe21 	bl	8000b64 <I2C_MasterHandleTXEIT>
		if(sr2IT & I2C_FLAG_MSL )
 8000f22:	e037      	b.n	8000f94 <I2C_EV_IRQHandling+0x206>
			}
		} else
		{
			//device mode is slave
			//should we check TRA in master mode too?
			if( sr2IT & I2C_FLAG_TRA && pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f24:	89bb      	ldrh	r3, [r7, #12]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d032      	beq.n	8000f94 <I2C_EV_IRQHandling+0x206>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7f1b      	ldrb	r3, [r3, #28]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d12e      	bne.n	8000f94 <I2C_EV_IRQHandling+0x206>
			{
				//device is transmitting
				I2C_SlaveHandleTXEIT(pI2CHandle);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fe8e 	bl	8000c58 <I2C_SlaveHandleTXEIT>
		if(sr2IT & I2C_FLAG_MSL )
 8000f3c:	e02a      	b.n	8000f94 <I2C_EV_IRQHandling+0x206>

		}
	}

	//6. Handle for interrupt generated by RXNE event
	else if(eventIT && bufferIT && (sr1IT & I2C_FLAG_RXNE) ){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d028      	beq.n	8000f96 <I2C_EV_IRQHandling+0x208>
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d025      	beq.n	8000f96 <I2C_EV_IRQHandling+0x208>
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d020      	beq.n	8000f96 <I2C_EV_IRQHandling+0x208>
		//check for device mode
		if(sr2IT & I2C_FLAG_MSL){
 8000f54:	89bb      	ldrh	r3, [r7, #12]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <I2C_EV_IRQHandling+0x1e0>
			//device mode is master
			//RXNE is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7f1b      	ldrb	r3, [r3, #28]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d117      	bne.n	8000f96 <I2C_EV_IRQHandling+0x208>
				I2C_MasterHandleRXNEIT(pI2CHandle);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fe19 	bl	8000b9e <I2C_MasterHandleRXNEIT>
				I2C_SlaveHandleRXNEIT(pI2CHandle);
//				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000f6c:	e013      	b.n	8000f96 <I2C_EV_IRQHandling+0x208>
			if((! (sr2IT & I2C_FLAG_TRA)) && (pI2CHandle->TxRxState == I2C_BUSY_IN_RX) )
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10e      	bne.n	8000f96 <I2C_EV_IRQHandling+0x208>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7f1b      	ldrb	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d10a      	bne.n	8000f96 <I2C_EV_IRQHandling+0x208>
				I2C_SlaveHandleRXNEIT(pI2CHandle);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fe86 	bl	8000c92 <I2C_SlaveHandleRXNEIT>
}
 8000f86:	e006      	b.n	8000f96 <I2C_EV_IRQHandling+0x208>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f88:	bf00      	nop
 8000f8a:	e004      	b.n	8000f96 <I2C_EV_IRQHandling+0x208>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f8c:	bf00      	nop
 8000f8e:	e002      	b.n	8000f96 <I2C_EV_IRQHandling+0x208>
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX || pI2CHandle->RxSize == 0){
 8000f90:	bf00      	nop
 8000f92:	e000      	b.n	8000f96 <I2C_EV_IRQHandling+0x208>
		if(sr2IT & I2C_FLAG_MSL )
 8000f94:	bf00      	nop
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <I2C_ER_IRQHandling>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	uint32_t errorIT;
	uint16_t sr1IT, sr2IT;

	//Know the status of  ITERREN control bit in the CR2
	errorIT = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	60fb      	str	r3, [r7, #12]

	//get static value for the SR registers
	sr1IT= pI2CHandle->pI2Cx->SR1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	817b      	strh	r3, [r7, #10]
	sr2IT= pI2CHandle->pI2Cx->SR2;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	813b      	strh	r3, [r7, #8]

	if(errorIT){
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d072      	beq.n	80010ae <I2C_ER_IRQHandling+0x110>
		/***********************Check for Bus error************************************/
		if(sr1IT & I2C_FLAG_BERR)
 8000fc8:	897b      	ldrh	r3, [r7, #10]
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00c      	beq.n	8000fec <I2C_ER_IRQHandling+0x4e>
		{
			//This is Bus error

			//Implement the code to clear the buss error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fe0:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_BERR);
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fa39 	bl	800145c <I2C_ApplicationEventCallback>

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_TIMEOUT);
		}
	}
}
 8000fea:	e060      	b.n	80010ae <I2C_ER_IRQHandling+0x110>
		else if(sr1IT & I2C_FLAG_ARLO)
 8000fec:	897b      	ldrh	r3, [r7, #10]
 8000fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00c      	beq.n	8001010 <I2C_ER_IRQHandling+0x72>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001004:	615a      	str	r2, [r3, #20]
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_ARLO);
 8001006:	2106      	movs	r1, #6
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa27 	bl	800145c <I2C_ApplicationEventCallback>
}
 800100e:	e04e      	b.n	80010ae <I2C_ER_IRQHandling+0x110>
		else if(sr1IT & I2C_FLAG_AF)
 8001010:	897b      	ldrh	r3, [r7, #10]
 8001012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001016:	2b00      	cmp	r3, #0
 8001018:	d026      	beq.n	8001068 <I2C_ER_IRQHandling+0xca>
			if(sr2IT & I2C_FLAG_MSL)
 800101a:	893b      	ldrh	r3, [r7, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <I2C_ER_IRQHandling+0x90>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_AF);
 8001024:	2107      	movs	r1, #7
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fa18 	bl	800145c <I2C_ApplicationEventCallback>
 800102c:	e013      	b.n	8001056 <I2C_ER_IRQHandling+0xb8>
				if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7f1b      	ldrb	r3, [r3, #28]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d10f      	bne.n	8001056 <I2C_ER_IRQHandling+0xb8>
					if (pI2CHandle->TxLen == 0)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d107      	bne.n	800104e <I2C_ER_IRQHandling+0xb0>
						I2C_CloseSendData(pI2CHandle);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fe7b 	bl	8000d3a <I2C_CloseSendData>
						I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_SLAVE_TX_CMPLT);
 8001044:	2102      	movs	r1, #2
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fa08 	bl	800145c <I2C_ApplicationEventCallback>
 800104c:	e003      	b.n	8001056 <I2C_ER_IRQHandling+0xb8>
						I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_AF);
 800104e:	2107      	movs	r1, #7
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fa03 	bl	800145c <I2C_ApplicationEventCallback>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001064:	615a      	str	r2, [r3, #20]
}
 8001066:	e022      	b.n	80010ae <I2C_ER_IRQHandling+0x110>
		else if(sr1IT & I2C_FLAG_OVR)
 8001068:	897b      	ldrh	r3, [r7, #10]
 800106a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00c      	beq.n	800108c <I2C_ER_IRQHandling+0xee>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001080:	615a      	str	r2, [r3, #20]
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_OVR);
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9e9 	bl	800145c <I2C_ApplicationEventCallback>
}
 800108a:	e010      	b.n	80010ae <I2C_ER_IRQHandling+0x110>
		else if(sr1IT & I2C_FLAG_TIMEOUT)
 800108c:	897b      	ldrh	r3, [r7, #10]
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <I2C_ER_IRQHandling+0x110>
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010a4:	615a      	str	r2, [r3, #20]
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ER_TIMEOUT);
 80010a6:	2109      	movs	r1, #9
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f9d7 	bl	800145c <I2C_ApplicationEventCallback>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <I2C_PeripheralControl>:
 *
 * @return				- none
 *
 * @Note				- none (might implement this in the transmit function)
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enOrDi){
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d106      	bne.n	80010d6 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80010d4:	e005      	b.n	80010e2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 0201 	bic.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <I2C_ManageAcking>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_ManageAcking(I2C_RegDef_t* pI2Cx, uint8_t enOrDi){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE) {
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d106      	bne.n	800110c <I2C_ManageAcking+0x20>
		//enable acking
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
	} else {
		//disable acking
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 800110a:	e005      	b.n	8001118 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <I2C_GenerateStopCondition>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <I2C_SlaveControlCallbackEvents>:
 * @return				- none
 *
 * @Note				- none
 */
void I2C_SlaveControlCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t enOrDi)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE)
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d112      	bne.n	8001178 <I2C_SlaveControlCallbackEvents+0x38>
	{
		pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
	{
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	}
}
 8001176:	e011      	b.n	800119c <I2C_SlaveControlCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	605a      	str	r2, [r3, #4]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <RCC_GetPLLOutputClock>:
 *
 * @return				- none
 *
 * @Note				- Currently not implemented as the PLL clock is not used
 */
uint32_t RCC_GetPLLOutputClock(void){
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
	return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <RCC_GetPCLK1Value>:
 *
 * @return				- 32 bit PCLK value in Hz
 *
 * @Note				- none
 */
uint32_t RCC_GetPCLK1Value(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
	uint32_t pclk1, systemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);//0's out any bits that we don't want. Probably should create masks/pos vars for this
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <RCC_GetPCLK1Value+0xa0>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 80011c8:	7a7b      	ldrb	r3, [r7, #9]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <RCC_GetPCLK1Value+0x20>
		systemClk = 16000000;//HSI
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <RCC_GetPCLK1Value+0xa4>)
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e00b      	b.n	80011ec <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1){
 80011d4:	7a7b      	ldrb	r3, [r7, #9]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d102      	bne.n	80011e0 <RCC_GetPCLK1Value+0x2c>
		systemClk = 8000000;//HSE
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <RCC_GetPCLK1Value+0xa8>)
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e005      	b.n	80011ec <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 2){
 80011e0:	7a7b      	ldrb	r3, [r7, #9]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d102      	bne.n	80011ec <RCC_GetPCLK1Value+0x38>
		systemClk = RCC_GetPLLOutputClock();//PLL (not implemented)
 80011e6:	f7ff ffde 	bl	80011a6 <RCC_GetPLLOutputClock>
 80011ea:	60f8      	str	r0, [r7, #12]
	}

	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <RCC_GetPCLK1Value+0xa0>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	723b      	strb	r3, [r7, #8]

	if(temp < 8) {
 80011fa:	7a3b      	ldrb	r3, [r7, #8]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d802      	bhi.n	8001206 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	72fb      	strb	r3, [r7, #11]
 8001204:	e005      	b.n	8001212 <RCC_GetPCLK1Value+0x5e>
	} else {
		ahbp = AHB_PreScaler[temp-8];
 8001206:	7a3b      	ldrb	r3, [r7, #8]
 8001208:	3b08      	subs	r3, #8
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <RCC_GetPCLK1Value+0xac>)
 800120c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001210:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10) & 0x7);
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <RCC_GetPCLK1Value+0xa0>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0a9b      	lsrs	r3, r3, #10
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	723b      	strb	r3, [r7, #8]

	if (temp < 4) {
 8001220:	7a3b      	ldrb	r3, [r7, #8]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d802      	bhi.n	800122c <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	72bb      	strb	r3, [r7, #10]
 800122a:	e005      	b.n	8001238 <RCC_GetPCLK1Value+0x84>
	} else {
		apb1p = APB_PreScaler[temp-4];
 800122c:	7a3b      	ldrb	r3, [r7, #8]
 800122e:	3b04      	subs	r3, #4
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <RCC_GetPCLK1Value+0xb0>)
 8001232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001236:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (systemClk/ahbp)/apb1p;
 8001238:	7afb      	ldrb	r3, [r7, #11]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	00f42400 	.word	0x00f42400
 800125c:	007a1200 	.word	0x007a1200
 8001260:	20000000 	.word	0x20000000
 8001264:	20000010 	.word	0x20000010

08001268 <I2C_IT_ENABLE>:
#define COMMAND_READ_LENGTH		0x51
#define COMMAND_READ_DATA		0x52


void I2C_IT_ENABLE(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	//must enable interrupt control bits
	I2C_SlaveControlCallbackEvents(hI2C1.pI2Cx, ENABLE);
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <I2C_IT_ENABLE+0x48>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff64 	bl	8001140 <I2C_SlaveControlCallbackEvents>

	//if I2C is not enabled, then enable it
	if(! ( hI2C1.pI2Cx->CR1 & (1 << I2C_CR1_PE) ) ){
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <I2C_IT_ENABLE+0x48>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <I2C_IT_ENABLE+0x2a>
		I2C_PeripheralControl(hI2C1.pI2Cx, ENABLE);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <I2C_IT_ENABLE+0x48>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2101      	movs	r1, #1
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff12 	bl	80010b6 <I2C_PeripheralControl>
	}

	//enable acking so address phase can be acked
	if(! (hI2C1.pI2Cx->CR1 & (1 << I2C_CR1_ACK) ) )
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <I2C_IT_ENABLE+0x48>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d105      	bne.n	80012ac <I2C_IT_ENABLE+0x44>
	{
		I2C_ManageAcking(hI2C1.pI2Cx, ENABLE);
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <I2C_IT_ENABLE+0x48>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff20 	bl	80010ec <I2C_ManageAcking>
	}
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200000d0 	.word	0x200000d0

080012b4 <main>:

//NOTE: mishandling if TXE is not cleared, but I2C_MasterReceiveDataIT is not set
int main(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
//	printf("Hello World\n");
	messageLength = strlen((char*)MESSAGE);
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <main+0x34>)
 80012ba:	f7fe ff95 	bl	80001e8 <strlen>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <main+0x38>)
 80012c2:	601a      	str	r2, [r3, #0]

	//initizalize button
	GPIO_ButtonInit();
 80012c4:	f000 f83a 	bl	800133c <GPIO_ButtonInit>

	//This function is used to initialize the gpio pins to behave as I2C pins
	I2C_GPIO_Setup();
 80012c8:	f000 f812 	bl	80012f0 <I2C_GPIO_Setup>

	//This function is used to initialize the SPI peripheral
	I2C_Setup();
 80012cc:	f000 f850 	bl	8001370 <I2C_Setup>

	//I2C IRQ Configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80012d0:	2101      	movs	r1, #1
 80012d2:	201f      	movs	r0, #31
 80012d4:	f7ff fc0e 	bl	8000af4 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80012d8:	2101      	movs	r1, #1
 80012da:	2020      	movs	r0, #32
 80012dc:	f7ff fc0a 	bl	8000af4 <I2C_IRQInterruptConfig>

	I2C_IT_ENABLE();
 80012e0:	f7ff ffc2 	bl	8001268 <I2C_IT_ENABLE>

	while(1);
 80012e4:	e7fe      	b.n	80012e4 <main+0x30>
 80012e6:	bf00      	nop
 80012e8:	20000018 	.word	0x20000018
 80012ec:	200000f8 	.word	0x200000f8

080012f0 <I2C_GPIO_Setup>:

}

void I2C_GPIO_Setup(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

	I2Cpins.pGPIOx = GPIOB;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <I2C_GPIO_Setup+0x44>)
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <I2C_GPIO_Setup+0x48>)
 80012f8:	601a      	str	r2, [r3, #0]
	I2Cpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <I2C_GPIO_Setup+0x44>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	715a      	strb	r2, [r3, #5]
	I2Cpins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <I2C_GPIO_Setup+0x44>)
 8001302:	2204      	movs	r2, #4
 8001304:	725a      	strb	r2, [r3, #9]
	I2Cpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_OD;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <I2C_GPIO_Setup+0x44>)
 8001308:	2201      	movs	r2, #1
 800130a:	721a      	strb	r2, [r3, #8]
	I2Cpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <I2C_GPIO_Setup+0x44>)
 800130e:	2201      	movs	r2, #1
 8001310:	71da      	strb	r2, [r3, #7]
	I2Cpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <I2C_GPIO_Setup+0x44>)
 8001314:	2202      	movs	r2, #2
 8001316:	719a      	strb	r2, [r3, #6]

	//SCL
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <I2C_GPIO_Setup+0x44>)
 800131a:	2206      	movs	r2, #6
 800131c:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&I2Cpins);
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <I2C_GPIO_Setup+0x44>)
 8001320:	f7ff f852 	bl	80003c8 <GPIO_Init>

	//SDL
	//changed from pin 9 because of little glitch (not sure if this is happening on my board, but changing anyway)
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <I2C_GPIO_Setup+0x44>)
 8001326:	2207      	movs	r2, #7
 8001328:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&I2Cpins);
 800132a:	4802      	ldr	r0, [pc, #8]	; (8001334 <I2C_GPIO_Setup+0x44>)
 800132c:	f7ff f84c 	bl	80003c8 <GPIO_Init>


}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000fc 	.word	0x200000fc
 8001338:	40020400 	.word	0x40020400

0800133c <GPIO_ButtonInit>:
void GPIO_ButtonInit(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

	// configure button
	//Set up PA0 to be an input for the button press
	GpioBtn.pGPIOx = GPIOA;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <GPIO_ButtonInit+0x2c>)
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <GPIO_ButtonInit+0x30>)
 8001344:	601a      	str	r2, [r3, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <GPIO_ButtonInit+0x2c>)
 8001348:	2200      	movs	r2, #0
 800134a:	711a      	strb	r2, [r3, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <GPIO_ButtonInit+0x2c>)
 800134e:	2200      	movs	r2, #0
 8001350:	715a      	strb	r2, [r3, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <GPIO_ButtonInit+0x2c>)
 8001354:	2202      	movs	r2, #2
 8001356:	719a      	strb	r2, [r3, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <GPIO_ButtonInit+0x2c>)
 800135a:	2200      	movs	r2, #0
 800135c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(&GpioBtn);
 800135e:	4802      	ldr	r0, [pc, #8]	; (8001368 <GPIO_ButtonInit+0x2c>)
 8001360:	f7ff f832 	bl	80003c8 <GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000108 	.word	0x20000108
 800136c:	40020000 	.word	0x40020000

08001370 <I2C_Setup>:
void I2C_Setup(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	hI2C1.pI2Cx = I2C1;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <I2C_Setup+0x2c>)
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <I2C_Setup+0x30>)
 8001378:	601a      	str	r2, [r3, #0]
	hI2C1.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <I2C_Setup+0x2c>)
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <I2C_Setup+0x34>)
 800137e:	605a      	str	r2, [r3, #4]
	hI2C1.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <I2C_Setup+0x2c>)
 8001382:	2268      	movs	r2, #104	; 0x68
 8001384:	721a      	strb	r2, [r3, #8]
	hI2C1.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <I2C_Setup+0x2c>)
 8001388:	2201      	movs	r2, #1
 800138a:	725a      	strb	r2, [r3, #9]
	hI2C1.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <I2C_Setup+0x2c>)
 800138e:	2200      	movs	r2, #0
 8001390:	729a      	strb	r2, [r3, #10]

	I2C_Init(&hI2C1);
 8001392:	4802      	ldr	r0, [pc, #8]	; (800139c <I2C_Setup+0x2c>)
 8001394:	f7ff fa68 	bl	8000868 <I2C_Init>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200000d0 	.word	0x200000d0
 80013a0:	40005400 	.word	0x40005400
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <I2C1_EV_IRQHandler>:
//Seems like one would have to write an entirely new handler to deal with this situation or get interrupts working
//NOTE: calling an interrupt whenever RXNE or TXE is sort of redundant
//		these functions are used to enable reception, the data is not actually ever collected
//Seems more and more like you would have to write an enitrely different handler here, or directly read, write in the handler
//What about triggering the interrupt no matter what? so interupt will trigger the configure, then read
void I2C1_EV_IRQHandler(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

	uint32_t sr1 = hI2C1.pI2Cx->SR1;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <I2C1_EV_IRQHandler+0x8c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	607b      	str	r3, [r7, #4]
	if (sr1 & I2C_FLAG_RXNE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d009      	beq.n	80013d4 <I2C1_EV_IRQHandler+0x2c>
	{
		while(I2C_SlaveReceiveDataIT(&hI2C1, &commandCode, COMMAND_CODE_LENGTH) != I2C_READY);
 80013c0:	bf00      	nop
 80013c2:	2201      	movs	r2, #1
 80013c4:	491c      	ldr	r1, [pc, #112]	; (8001438 <I2C1_EV_IRQHandler+0x90>)
 80013c6:	481b      	ldr	r0, [pc, #108]	; (8001434 <I2C1_EV_IRQHandler+0x8c>)
 80013c8:	f7ff fb48 	bl	8000a5c <I2C_SlaveReceiveDataIT>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f7      	bne.n	80013c2 <I2C1_EV_IRQHandler+0x1a>
 80013d2:	e028      	b.n	8001426 <I2C1_EV_IRQHandler+0x7e>
	}
	else if (sr1 & I2C_FLAG_TXE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d023      	beq.n	8001426 <I2C1_EV_IRQHandler+0x7e>
	{
		if(commandCode == 0x51)
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <I2C1_EV_IRQHandler+0x90>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b51      	cmp	r3, #81	; 0x51
 80013e4:	d109      	bne.n	80013fa <I2C1_EV_IRQHandler+0x52>
		{
			//send the length information to the master
			while(I2C_SlaveSendDataIT(&hI2C1, (uint8_t*) &messageLength, 1) != I2C_READY);
 80013e6:	bf00      	nop
 80013e8:	2201      	movs	r2, #1
 80013ea:	4914      	ldr	r1, [pc, #80]	; (800143c <I2C1_EV_IRQHandler+0x94>)
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <I2C1_EV_IRQHandler+0x8c>)
 80013ee:	f7ff faed 	bl	80009cc <I2C_SlaveSendDataIT>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f7      	bne.n	80013e8 <I2C1_EV_IRQHandler+0x40>
 80013f8:	e015      	b.n	8001426 <I2C1_EV_IRQHandler+0x7e>
		} else if (commandCode == 0x52)
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <I2C1_EV_IRQHandler+0x90>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b52      	cmp	r3, #82	; 0x52
 8001400:	d111      	bne.n	8001426 <I2C1_EV_IRQHandler+0x7e>
		{
			//send the contents of MESSAGE
			while(I2C_SlaveSendDataIT(&hI2C1, &MESSAGE[wPtr], 1) != I2C_READY);
 8001402:	bf00      	nop
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <I2C1_EV_IRQHandler+0x98>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <I2C1_EV_IRQHandler+0x9c>)
 800140a:	4413      	add	r3, r2
 800140c:	2201      	movs	r2, #1
 800140e:	4619      	mov	r1, r3
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <I2C1_EV_IRQHandler+0x8c>)
 8001412:	f7ff fadb 	bl	80009cc <I2C_SlaveSendDataIT>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f3      	bne.n	8001404 <I2C1_EV_IRQHandler+0x5c>
			wPtr++;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <I2C1_EV_IRQHandler+0x98>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <I2C1_EV_IRQHandler+0x98>)
 8001424:	6013      	str	r3, [r2, #0]
		}
	}
	I2C_EV_IRQHandling(&hI2C1);
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <I2C1_EV_IRQHandler+0x8c>)
 8001428:	f7ff fcb1 	bl	8000d8e <I2C_EV_IRQHandling>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000d0 	.word	0x200000d0
 8001438:	200000c0 	.word	0x200000c0
 800143c:	200000f8 	.word	0x200000f8
 8001440:	200000bc 	.word	0x200000bc
 8001444:	20000018 	.word	0x20000018

08001448 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&hI2C1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <I2C1_ER_IRQHandler+0x10>)
 800144e:	f7ff fda6 	bl	8000f9e <I2C_ER_IRQHandling>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000d0 	.word	0x200000d0

0800145c <I2C_ApplicationEventCallback>:


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t appEvent){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	// and shouldn't this be implemented in the driver code?
	//EDIT: In terms of sending the data, this method might be the only one that works
	// 		because you need to first check the command code to determine what data needs to be sent.
	//		An alternative might be to use the callbacks to modify a volatile variable that would then
	//		send the data. This means that the
	switch(appEvent)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	3b02      	subs	r3, #2
 800146c:	2b05      	cmp	r3, #5
 800146e:	d81b      	bhi.n	80014a8 <I2C_ApplicationEventCallback+0x4c>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <I2C_ApplicationEventCallback+0x1c>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	08001497 	.word	0x08001497
 800147c:	08001491 	.word	0x08001491
 8001480:	080014b1 	.word	0x080014b1
 8001484:	080014a9 	.word	0x080014a9
 8001488:	080014a9 	.word	0x080014a9
 800148c:	080014b1 	.word	0x080014b1
	{
	case I2C_EV_SLAVE_RX_CMPLT:
		I2C_IT_ENABLE();
 8001490:	f7ff feea 	bl	8001268 <I2C_IT_ENABLE>
		break;
 8001494:	e00d      	b.n	80014b2 <I2C_ApplicationEventCallback+0x56>
	case I2C_EV_SLAVE_TX_CMPLT:
		I2C_IT_ENABLE();
 8001496:	f7ff fee7 	bl	8001268 <I2C_IT_ENABLE>
		wPtr = 0;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <I2C_ApplicationEventCallback+0x60>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
		commandCode = 0;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <I2C_ApplicationEventCallback+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
		break;
 80014a6:	e004      	b.n	80014b2 <I2C_ApplicationEventCallback+0x56>
	case I2C_EV_STOPF:
		break;
	case I2C_ER_AF:
		break;
	default:
		printf("Something unexpected happened\n");
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <I2C_ApplicationEventCallback+0x68>)
 80014aa:	f000 f981 	bl	80017b0 <puts>
		while(1);
 80014ae:	e7fe      	b.n	80014ae <I2C_ApplicationEventCallback+0x52>
		break;
 80014b0:	bf00      	nop
	}
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200000bc 	.word	0x200000bc
 80014c0:	200000c0 	.word	0x200000c0
 80014c4:	08001fe0 	.word	0x08001fe0

080014c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <ITM_SendChar+0x44>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0d      	ldr	r2, [pc, #52]	; (800150c <ITM_SendChar+0x44>)
 80014d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <ITM_SendChar+0x48>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <ITM_SendChar+0x48>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80014ea:	bf00      	nop
 80014ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f8      	beq.n	80014ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80014fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	6013      	str	r3, [r2, #0]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	e000edfc 	.word	0xe000edfc
 8001510:	e0000e00 	.word	0xe0000e00

08001514 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__ ((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
	}
return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_write>:

int _write(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e009      	b.n	8001574 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ffad 	bl	80014c8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_write+0x12>
	}
	return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_close>:
//
//	return (caddr_t) prev_heap_end;
//}

int _close(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ac:	605a      	str	r2, [r3, #4]
	return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <_isatty>:

int _isatty(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
	return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ee:	490e      	ldr	r1, [pc, #56]	; (8001628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <LoopForever+0xe>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001604:	4c0b      	ldr	r4, [pc, #44]	; (8001634 <LoopForever+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001612:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001616:	f000 f843 	bl	80016a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161a:	f7ff fe4b 	bl	80012b4 <main>

0800161e <LoopForever>:

LoopForever:
    b LoopForever
 800161e:	e7fe      	b.n	800161e <LoopForever>
  ldr   r0, =_estack
 8001620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800162c:	0800206c 	.word	0x0800206c
  ldr r2, =_sbss
 8001630:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001634:	20000118 	.word	0x20000118

08001638 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC_IRQHandler>
	...

0800163c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <_sbrk+0x50>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x16>
		heap_end = &end;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <_sbrk+0x50>)
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <_sbrk+0x54>)
 8001650:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <_sbrk+0x50>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <_sbrk+0x50>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	466a      	mov	r2, sp
 8001662:	4293      	cmp	r3, r2
 8001664:	d907      	bls.n	8001676 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001666:	f000 f815 	bl	8001694 <__errno>
 800166a:	4602      	mov	r2, r0
 800166c:	230c      	movs	r3, #12
 800166e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	e006      	b.n	8001684 <_sbrk+0x48>
	}

	heap_end += incr;
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <_sbrk+0x50>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a03      	ldr	r2, [pc, #12]	; (800168c <_sbrk+0x50>)
 8001680:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200000c4 	.word	0x200000c4
 8001690:	20000118 	.word	0x20000118

08001694 <__errno>:
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <__errno+0x8>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000038 	.word	0x20000038

080016a0 <__libc_init_array>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	4e0d      	ldr	r6, [pc, #52]	; (80016d8 <__libc_init_array+0x38>)
 80016a4:	4c0d      	ldr	r4, [pc, #52]	; (80016dc <__libc_init_array+0x3c>)
 80016a6:	1ba4      	subs	r4, r4, r6
 80016a8:	10a4      	asrs	r4, r4, #2
 80016aa:	2500      	movs	r5, #0
 80016ac:	42a5      	cmp	r5, r4
 80016ae:	d109      	bne.n	80016c4 <__libc_init_array+0x24>
 80016b0:	4e0b      	ldr	r6, [pc, #44]	; (80016e0 <__libc_init_array+0x40>)
 80016b2:	4c0c      	ldr	r4, [pc, #48]	; (80016e4 <__libc_init_array+0x44>)
 80016b4:	f000 fc88 	bl	8001fc8 <_init>
 80016b8:	1ba4      	subs	r4, r4, r6
 80016ba:	10a4      	asrs	r4, r4, #2
 80016bc:	2500      	movs	r5, #0
 80016be:	42a5      	cmp	r5, r4
 80016c0:	d105      	bne.n	80016ce <__libc_init_array+0x2e>
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016c8:	4798      	blx	r3
 80016ca:	3501      	adds	r5, #1
 80016cc:	e7ee      	b.n	80016ac <__libc_init_array+0xc>
 80016ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016d2:	4798      	blx	r3
 80016d4:	3501      	adds	r5, #1
 80016d6:	e7f2      	b.n	80016be <__libc_init_array+0x1e>
 80016d8:	08002064 	.word	0x08002064
 80016dc:	08002064 	.word	0x08002064
 80016e0:	08002064 	.word	0x08002064
 80016e4:	08002068 	.word	0x08002068

080016e8 <memset>:
 80016e8:	4402      	add	r2, r0
 80016ea:	4603      	mov	r3, r0
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d100      	bne.n	80016f2 <memset+0xa>
 80016f0:	4770      	bx	lr
 80016f2:	f803 1b01 	strb.w	r1, [r3], #1
 80016f6:	e7f9      	b.n	80016ec <memset+0x4>

080016f8 <_puts_r>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	460e      	mov	r6, r1
 80016fc:	4605      	mov	r5, r0
 80016fe:	b118      	cbz	r0, 8001708 <_puts_r+0x10>
 8001700:	6983      	ldr	r3, [r0, #24]
 8001702:	b90b      	cbnz	r3, 8001708 <_puts_r+0x10>
 8001704:	f000 fa0c 	bl	8001b20 <__sinit>
 8001708:	69ab      	ldr	r3, [r5, #24]
 800170a:	68ac      	ldr	r4, [r5, #8]
 800170c:	b913      	cbnz	r3, 8001714 <_puts_r+0x1c>
 800170e:	4628      	mov	r0, r5
 8001710:	f000 fa06 	bl	8001b20 <__sinit>
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <_puts_r+0xac>)
 8001716:	429c      	cmp	r4, r3
 8001718:	d117      	bne.n	800174a <_puts_r+0x52>
 800171a:	686c      	ldr	r4, [r5, #4]
 800171c:	89a3      	ldrh	r3, [r4, #12]
 800171e:	071b      	lsls	r3, r3, #28
 8001720:	d51d      	bpl.n	800175e <_puts_r+0x66>
 8001722:	6923      	ldr	r3, [r4, #16]
 8001724:	b1db      	cbz	r3, 800175e <_puts_r+0x66>
 8001726:	3e01      	subs	r6, #1
 8001728:	68a3      	ldr	r3, [r4, #8]
 800172a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800172e:	3b01      	subs	r3, #1
 8001730:	60a3      	str	r3, [r4, #8]
 8001732:	b9e9      	cbnz	r1, 8001770 <_puts_r+0x78>
 8001734:	2b00      	cmp	r3, #0
 8001736:	da2e      	bge.n	8001796 <_puts_r+0x9e>
 8001738:	4622      	mov	r2, r4
 800173a:	210a      	movs	r1, #10
 800173c:	4628      	mov	r0, r5
 800173e:	f000 f83f 	bl	80017c0 <__swbuf_r>
 8001742:	3001      	adds	r0, #1
 8001744:	d011      	beq.n	800176a <_puts_r+0x72>
 8001746:	200a      	movs	r0, #10
 8001748:	e011      	b.n	800176e <_puts_r+0x76>
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <_puts_r+0xb0>)
 800174c:	429c      	cmp	r4, r3
 800174e:	d101      	bne.n	8001754 <_puts_r+0x5c>
 8001750:	68ac      	ldr	r4, [r5, #8]
 8001752:	e7e3      	b.n	800171c <_puts_r+0x24>
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_puts_r+0xb4>)
 8001756:	429c      	cmp	r4, r3
 8001758:	bf08      	it	eq
 800175a:	68ec      	ldreq	r4, [r5, #12]
 800175c:	e7de      	b.n	800171c <_puts_r+0x24>
 800175e:	4621      	mov	r1, r4
 8001760:	4628      	mov	r0, r5
 8001762:	f000 f87f 	bl	8001864 <__swsetup_r>
 8001766:	2800      	cmp	r0, #0
 8001768:	d0dd      	beq.n	8001726 <_puts_r+0x2e>
 800176a:	f04f 30ff 	mov.w	r0, #4294967295
 800176e:	bd70      	pop	{r4, r5, r6, pc}
 8001770:	2b00      	cmp	r3, #0
 8001772:	da04      	bge.n	800177e <_puts_r+0x86>
 8001774:	69a2      	ldr	r2, [r4, #24]
 8001776:	429a      	cmp	r2, r3
 8001778:	dc06      	bgt.n	8001788 <_puts_r+0x90>
 800177a:	290a      	cmp	r1, #10
 800177c:	d004      	beq.n	8001788 <_puts_r+0x90>
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	6022      	str	r2, [r4, #0]
 8001784:	7019      	strb	r1, [r3, #0]
 8001786:	e7cf      	b.n	8001728 <_puts_r+0x30>
 8001788:	4622      	mov	r2, r4
 800178a:	4628      	mov	r0, r5
 800178c:	f000 f818 	bl	80017c0 <__swbuf_r>
 8001790:	3001      	adds	r0, #1
 8001792:	d1c9      	bne.n	8001728 <_puts_r+0x30>
 8001794:	e7e9      	b.n	800176a <_puts_r+0x72>
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	200a      	movs	r0, #10
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	6022      	str	r2, [r4, #0]
 800179e:	7018      	strb	r0, [r3, #0]
 80017a0:	e7e5      	b.n	800176e <_puts_r+0x76>
 80017a2:	bf00      	nop
 80017a4:	08002024 	.word	0x08002024
 80017a8:	08002044 	.word	0x08002044
 80017ac:	08002004 	.word	0x08002004

080017b0 <puts>:
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <puts+0xc>)
 80017b2:	4601      	mov	r1, r0
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	f7ff bf9f 	b.w	80016f8 <_puts_r>
 80017ba:	bf00      	nop
 80017bc:	20000038 	.word	0x20000038

080017c0 <__swbuf_r>:
 80017c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c2:	460e      	mov	r6, r1
 80017c4:	4614      	mov	r4, r2
 80017c6:	4605      	mov	r5, r0
 80017c8:	b118      	cbz	r0, 80017d2 <__swbuf_r+0x12>
 80017ca:	6983      	ldr	r3, [r0, #24]
 80017cc:	b90b      	cbnz	r3, 80017d2 <__swbuf_r+0x12>
 80017ce:	f000 f9a7 	bl	8001b20 <__sinit>
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <__swbuf_r+0x98>)
 80017d4:	429c      	cmp	r4, r3
 80017d6:	d12a      	bne.n	800182e <__swbuf_r+0x6e>
 80017d8:	686c      	ldr	r4, [r5, #4]
 80017da:	69a3      	ldr	r3, [r4, #24]
 80017dc:	60a3      	str	r3, [r4, #8]
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	071a      	lsls	r2, r3, #28
 80017e2:	d52e      	bpl.n	8001842 <__swbuf_r+0x82>
 80017e4:	6923      	ldr	r3, [r4, #16]
 80017e6:	b363      	cbz	r3, 8001842 <__swbuf_r+0x82>
 80017e8:	6923      	ldr	r3, [r4, #16]
 80017ea:	6820      	ldr	r0, [r4, #0]
 80017ec:	1ac0      	subs	r0, r0, r3
 80017ee:	6963      	ldr	r3, [r4, #20]
 80017f0:	b2f6      	uxtb	r6, r6
 80017f2:	4283      	cmp	r3, r0
 80017f4:	4637      	mov	r7, r6
 80017f6:	dc04      	bgt.n	8001802 <__swbuf_r+0x42>
 80017f8:	4621      	mov	r1, r4
 80017fa:	4628      	mov	r0, r5
 80017fc:	f000 f926 	bl	8001a4c <_fflush_r>
 8001800:	bb28      	cbnz	r0, 800184e <__swbuf_r+0x8e>
 8001802:	68a3      	ldr	r3, [r4, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	60a3      	str	r3, [r4, #8]
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	6022      	str	r2, [r4, #0]
 800180e:	701e      	strb	r6, [r3, #0]
 8001810:	6963      	ldr	r3, [r4, #20]
 8001812:	3001      	adds	r0, #1
 8001814:	4283      	cmp	r3, r0
 8001816:	d004      	beq.n	8001822 <__swbuf_r+0x62>
 8001818:	89a3      	ldrh	r3, [r4, #12]
 800181a:	07db      	lsls	r3, r3, #31
 800181c:	d519      	bpl.n	8001852 <__swbuf_r+0x92>
 800181e:	2e0a      	cmp	r6, #10
 8001820:	d117      	bne.n	8001852 <__swbuf_r+0x92>
 8001822:	4621      	mov	r1, r4
 8001824:	4628      	mov	r0, r5
 8001826:	f000 f911 	bl	8001a4c <_fflush_r>
 800182a:	b190      	cbz	r0, 8001852 <__swbuf_r+0x92>
 800182c:	e00f      	b.n	800184e <__swbuf_r+0x8e>
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <__swbuf_r+0x9c>)
 8001830:	429c      	cmp	r4, r3
 8001832:	d101      	bne.n	8001838 <__swbuf_r+0x78>
 8001834:	68ac      	ldr	r4, [r5, #8]
 8001836:	e7d0      	b.n	80017da <__swbuf_r+0x1a>
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <__swbuf_r+0xa0>)
 800183a:	429c      	cmp	r4, r3
 800183c:	bf08      	it	eq
 800183e:	68ec      	ldreq	r4, [r5, #12]
 8001840:	e7cb      	b.n	80017da <__swbuf_r+0x1a>
 8001842:	4621      	mov	r1, r4
 8001844:	4628      	mov	r0, r5
 8001846:	f000 f80d 	bl	8001864 <__swsetup_r>
 800184a:	2800      	cmp	r0, #0
 800184c:	d0cc      	beq.n	80017e8 <__swbuf_r+0x28>
 800184e:	f04f 37ff 	mov.w	r7, #4294967295
 8001852:	4638      	mov	r0, r7
 8001854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001856:	bf00      	nop
 8001858:	08002024 	.word	0x08002024
 800185c:	08002044 	.word	0x08002044
 8001860:	08002004 	.word	0x08002004

08001864 <__swsetup_r>:
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <__swsetup_r+0xcc>)
 8001866:	b570      	push	{r4, r5, r6, lr}
 8001868:	681d      	ldr	r5, [r3, #0]
 800186a:	4606      	mov	r6, r0
 800186c:	460c      	mov	r4, r1
 800186e:	b125      	cbz	r5, 800187a <__swsetup_r+0x16>
 8001870:	69ab      	ldr	r3, [r5, #24]
 8001872:	b913      	cbnz	r3, 800187a <__swsetup_r+0x16>
 8001874:	4628      	mov	r0, r5
 8001876:	f000 f953 	bl	8001b20 <__sinit>
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <__swsetup_r+0xd0>)
 800187c:	429c      	cmp	r4, r3
 800187e:	d10f      	bne.n	80018a0 <__swsetup_r+0x3c>
 8001880:	686c      	ldr	r4, [r5, #4]
 8001882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001886:	b29a      	uxth	r2, r3
 8001888:	0715      	lsls	r5, r2, #28
 800188a:	d42c      	bmi.n	80018e6 <__swsetup_r+0x82>
 800188c:	06d0      	lsls	r0, r2, #27
 800188e:	d411      	bmi.n	80018b4 <__swsetup_r+0x50>
 8001890:	2209      	movs	r2, #9
 8001892:	6032      	str	r2, [r6, #0]
 8001894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001898:	81a3      	strh	r3, [r4, #12]
 800189a:	f04f 30ff 	mov.w	r0, #4294967295
 800189e:	e03e      	b.n	800191e <__swsetup_r+0xba>
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <__swsetup_r+0xd4>)
 80018a2:	429c      	cmp	r4, r3
 80018a4:	d101      	bne.n	80018aa <__swsetup_r+0x46>
 80018a6:	68ac      	ldr	r4, [r5, #8]
 80018a8:	e7eb      	b.n	8001882 <__swsetup_r+0x1e>
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <__swsetup_r+0xd8>)
 80018ac:	429c      	cmp	r4, r3
 80018ae:	bf08      	it	eq
 80018b0:	68ec      	ldreq	r4, [r5, #12]
 80018b2:	e7e6      	b.n	8001882 <__swsetup_r+0x1e>
 80018b4:	0751      	lsls	r1, r2, #29
 80018b6:	d512      	bpl.n	80018de <__swsetup_r+0x7a>
 80018b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018ba:	b141      	cbz	r1, 80018ce <__swsetup_r+0x6a>
 80018bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018c0:	4299      	cmp	r1, r3
 80018c2:	d002      	beq.n	80018ca <__swsetup_r+0x66>
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 fa19 	bl	8001cfc <_free_r>
 80018ca:	2300      	movs	r3, #0
 80018cc:	6363      	str	r3, [r4, #52]	; 0x34
 80018ce:	89a3      	ldrh	r3, [r4, #12]
 80018d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80018d4:	81a3      	strh	r3, [r4, #12]
 80018d6:	2300      	movs	r3, #0
 80018d8:	6063      	str	r3, [r4, #4]
 80018da:	6923      	ldr	r3, [r4, #16]
 80018dc:	6023      	str	r3, [r4, #0]
 80018de:	89a3      	ldrh	r3, [r4, #12]
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	81a3      	strh	r3, [r4, #12]
 80018e6:	6923      	ldr	r3, [r4, #16]
 80018e8:	b94b      	cbnz	r3, 80018fe <__swsetup_r+0x9a>
 80018ea:	89a3      	ldrh	r3, [r4, #12]
 80018ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80018f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f4:	d003      	beq.n	80018fe <__swsetup_r+0x9a>
 80018f6:	4621      	mov	r1, r4
 80018f8:	4630      	mov	r0, r6
 80018fa:	f000 f9bf 	bl	8001c7c <__smakebuf_r>
 80018fe:	89a2      	ldrh	r2, [r4, #12]
 8001900:	f012 0301 	ands.w	r3, r2, #1
 8001904:	d00c      	beq.n	8001920 <__swsetup_r+0xbc>
 8001906:	2300      	movs	r3, #0
 8001908:	60a3      	str	r3, [r4, #8]
 800190a:	6963      	ldr	r3, [r4, #20]
 800190c:	425b      	negs	r3, r3
 800190e:	61a3      	str	r3, [r4, #24]
 8001910:	6923      	ldr	r3, [r4, #16]
 8001912:	b953      	cbnz	r3, 800192a <__swsetup_r+0xc6>
 8001914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001918:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800191c:	d1ba      	bne.n	8001894 <__swsetup_r+0x30>
 800191e:	bd70      	pop	{r4, r5, r6, pc}
 8001920:	0792      	lsls	r2, r2, #30
 8001922:	bf58      	it	pl
 8001924:	6963      	ldrpl	r3, [r4, #20]
 8001926:	60a3      	str	r3, [r4, #8]
 8001928:	e7f2      	b.n	8001910 <__swsetup_r+0xac>
 800192a:	2000      	movs	r0, #0
 800192c:	e7f7      	b.n	800191e <__swsetup_r+0xba>
 800192e:	bf00      	nop
 8001930:	20000038 	.word	0x20000038
 8001934:	08002024 	.word	0x08002024
 8001938:	08002044 	.word	0x08002044
 800193c:	08002004 	.word	0x08002004

08001940 <__sflush_r>:
 8001940:	898a      	ldrh	r2, [r1, #12]
 8001942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001946:	4605      	mov	r5, r0
 8001948:	0710      	lsls	r0, r2, #28
 800194a:	460c      	mov	r4, r1
 800194c:	d458      	bmi.n	8001a00 <__sflush_r+0xc0>
 800194e:	684b      	ldr	r3, [r1, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dc05      	bgt.n	8001960 <__sflush_r+0x20>
 8001954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	dc02      	bgt.n	8001960 <__sflush_r+0x20>
 800195a:	2000      	movs	r0, #0
 800195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001962:	2e00      	cmp	r6, #0
 8001964:	d0f9      	beq.n	800195a <__sflush_r+0x1a>
 8001966:	2300      	movs	r3, #0
 8001968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800196c:	682f      	ldr	r7, [r5, #0]
 800196e:	6a21      	ldr	r1, [r4, #32]
 8001970:	602b      	str	r3, [r5, #0]
 8001972:	d032      	beq.n	80019da <__sflush_r+0x9a>
 8001974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001976:	89a3      	ldrh	r3, [r4, #12]
 8001978:	075a      	lsls	r2, r3, #29
 800197a:	d505      	bpl.n	8001988 <__sflush_r+0x48>
 800197c:	6863      	ldr	r3, [r4, #4]
 800197e:	1ac0      	subs	r0, r0, r3
 8001980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001982:	b10b      	cbz	r3, 8001988 <__sflush_r+0x48>
 8001984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001986:	1ac0      	subs	r0, r0, r3
 8001988:	2300      	movs	r3, #0
 800198a:	4602      	mov	r2, r0
 800198c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800198e:	6a21      	ldr	r1, [r4, #32]
 8001990:	4628      	mov	r0, r5
 8001992:	47b0      	blx	r6
 8001994:	1c43      	adds	r3, r0, #1
 8001996:	89a3      	ldrh	r3, [r4, #12]
 8001998:	d106      	bne.n	80019a8 <__sflush_r+0x68>
 800199a:	6829      	ldr	r1, [r5, #0]
 800199c:	291d      	cmp	r1, #29
 800199e:	d848      	bhi.n	8001a32 <__sflush_r+0xf2>
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <__sflush_r+0x108>)
 80019a2:	40ca      	lsrs	r2, r1
 80019a4:	07d6      	lsls	r6, r2, #31
 80019a6:	d544      	bpl.n	8001a32 <__sflush_r+0xf2>
 80019a8:	2200      	movs	r2, #0
 80019aa:	6062      	str	r2, [r4, #4]
 80019ac:	04d9      	lsls	r1, r3, #19
 80019ae:	6922      	ldr	r2, [r4, #16]
 80019b0:	6022      	str	r2, [r4, #0]
 80019b2:	d504      	bpl.n	80019be <__sflush_r+0x7e>
 80019b4:	1c42      	adds	r2, r0, #1
 80019b6:	d101      	bne.n	80019bc <__sflush_r+0x7c>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b903      	cbnz	r3, 80019be <__sflush_r+0x7e>
 80019bc:	6560      	str	r0, [r4, #84]	; 0x54
 80019be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019c0:	602f      	str	r7, [r5, #0]
 80019c2:	2900      	cmp	r1, #0
 80019c4:	d0c9      	beq.n	800195a <__sflush_r+0x1a>
 80019c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019ca:	4299      	cmp	r1, r3
 80019cc:	d002      	beq.n	80019d4 <__sflush_r+0x94>
 80019ce:	4628      	mov	r0, r5
 80019d0:	f000 f994 	bl	8001cfc <_free_r>
 80019d4:	2000      	movs	r0, #0
 80019d6:	6360      	str	r0, [r4, #52]	; 0x34
 80019d8:	e7c0      	b.n	800195c <__sflush_r+0x1c>
 80019da:	2301      	movs	r3, #1
 80019dc:	4628      	mov	r0, r5
 80019de:	47b0      	blx	r6
 80019e0:	1c41      	adds	r1, r0, #1
 80019e2:	d1c8      	bne.n	8001976 <__sflush_r+0x36>
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0c5      	beq.n	8001976 <__sflush_r+0x36>
 80019ea:	2b1d      	cmp	r3, #29
 80019ec:	d001      	beq.n	80019f2 <__sflush_r+0xb2>
 80019ee:	2b16      	cmp	r3, #22
 80019f0:	d101      	bne.n	80019f6 <__sflush_r+0xb6>
 80019f2:	602f      	str	r7, [r5, #0]
 80019f4:	e7b1      	b.n	800195a <__sflush_r+0x1a>
 80019f6:	89a3      	ldrh	r3, [r4, #12]
 80019f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fc:	81a3      	strh	r3, [r4, #12]
 80019fe:	e7ad      	b.n	800195c <__sflush_r+0x1c>
 8001a00:	690f      	ldr	r7, [r1, #16]
 8001a02:	2f00      	cmp	r7, #0
 8001a04:	d0a9      	beq.n	800195a <__sflush_r+0x1a>
 8001a06:	0793      	lsls	r3, r2, #30
 8001a08:	680e      	ldr	r6, [r1, #0]
 8001a0a:	bf08      	it	eq
 8001a0c:	694b      	ldreq	r3, [r1, #20]
 8001a0e:	600f      	str	r7, [r1, #0]
 8001a10:	bf18      	it	ne
 8001a12:	2300      	movne	r3, #0
 8001a14:	eba6 0807 	sub.w	r8, r6, r7
 8001a18:	608b      	str	r3, [r1, #8]
 8001a1a:	f1b8 0f00 	cmp.w	r8, #0
 8001a1e:	dd9c      	ble.n	800195a <__sflush_r+0x1a>
 8001a20:	4643      	mov	r3, r8
 8001a22:	463a      	mov	r2, r7
 8001a24:	6a21      	ldr	r1, [r4, #32]
 8001a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a28:	4628      	mov	r0, r5
 8001a2a:	47b0      	blx	r6
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	dc06      	bgt.n	8001a3e <__sflush_r+0xfe>
 8001a30:	89a3      	ldrh	r3, [r4, #12]
 8001a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a36:	81a3      	strh	r3, [r4, #12]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	e78e      	b.n	800195c <__sflush_r+0x1c>
 8001a3e:	4407      	add	r7, r0
 8001a40:	eba8 0800 	sub.w	r8, r8, r0
 8001a44:	e7e9      	b.n	8001a1a <__sflush_r+0xda>
 8001a46:	bf00      	nop
 8001a48:	20400001 	.word	0x20400001

08001a4c <_fflush_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	690b      	ldr	r3, [r1, #16]
 8001a50:	4605      	mov	r5, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	b1db      	cbz	r3, 8001a8e <_fflush_r+0x42>
 8001a56:	b118      	cbz	r0, 8001a60 <_fflush_r+0x14>
 8001a58:	6983      	ldr	r3, [r0, #24]
 8001a5a:	b90b      	cbnz	r3, 8001a60 <_fflush_r+0x14>
 8001a5c:	f000 f860 	bl	8001b20 <__sinit>
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <_fflush_r+0x48>)
 8001a62:	429c      	cmp	r4, r3
 8001a64:	d109      	bne.n	8001a7a <_fflush_r+0x2e>
 8001a66:	686c      	ldr	r4, [r5, #4]
 8001a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a6c:	b17b      	cbz	r3, 8001a8e <_fflush_r+0x42>
 8001a6e:	4621      	mov	r1, r4
 8001a70:	4628      	mov	r0, r5
 8001a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a76:	f7ff bf63 	b.w	8001940 <__sflush_r>
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <_fflush_r+0x4c>)
 8001a7c:	429c      	cmp	r4, r3
 8001a7e:	d101      	bne.n	8001a84 <_fflush_r+0x38>
 8001a80:	68ac      	ldr	r4, [r5, #8]
 8001a82:	e7f1      	b.n	8001a68 <_fflush_r+0x1c>
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <_fflush_r+0x50>)
 8001a86:	429c      	cmp	r4, r3
 8001a88:	bf08      	it	eq
 8001a8a:	68ec      	ldreq	r4, [r5, #12]
 8001a8c:	e7ec      	b.n	8001a68 <_fflush_r+0x1c>
 8001a8e:	2000      	movs	r0, #0
 8001a90:	bd38      	pop	{r3, r4, r5, pc}
 8001a92:	bf00      	nop
 8001a94:	08002024 	.word	0x08002024
 8001a98:	08002044 	.word	0x08002044
 8001a9c:	08002004 	.word	0x08002004

08001aa0 <std>:
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	b510      	push	{r4, lr}
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8001aaa:	6083      	str	r3, [r0, #8]
 8001aac:	8181      	strh	r1, [r0, #12]
 8001aae:	6643      	str	r3, [r0, #100]	; 0x64
 8001ab0:	81c2      	strh	r2, [r0, #14]
 8001ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ab6:	6183      	str	r3, [r0, #24]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2208      	movs	r2, #8
 8001abc:	305c      	adds	r0, #92	; 0x5c
 8001abe:	f7ff fe13 	bl	80016e8 <memset>
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <std+0x38>)
 8001ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <std+0x3c>)
 8001ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <std+0x40>)
 8001acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <std+0x44>)
 8001ad0:	6224      	str	r4, [r4, #32]
 8001ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8001ad4:	bd10      	pop	{r4, pc}
 8001ad6:	bf00      	nop
 8001ad8:	08001e6d 	.word	0x08001e6d
 8001adc:	08001e8f 	.word	0x08001e8f
 8001ae0:	08001ec7 	.word	0x08001ec7
 8001ae4:	08001eeb 	.word	0x08001eeb

08001ae8 <_cleanup_r>:
 8001ae8:	4901      	ldr	r1, [pc, #4]	; (8001af0 <_cleanup_r+0x8>)
 8001aea:	f000 b885 	b.w	8001bf8 <_fwalk_reent>
 8001aee:	bf00      	nop
 8001af0:	08001a4d 	.word	0x08001a4d

08001af4 <__sfmoreglue>:
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	1e4a      	subs	r2, r1, #1
 8001af8:	2568      	movs	r5, #104	; 0x68
 8001afa:	4355      	muls	r5, r2
 8001afc:	460e      	mov	r6, r1
 8001afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b02:	f000 f949 	bl	8001d98 <_malloc_r>
 8001b06:	4604      	mov	r4, r0
 8001b08:	b140      	cbz	r0, 8001b1c <__sfmoreglue+0x28>
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8001b10:	300c      	adds	r0, #12
 8001b12:	60a0      	str	r0, [r4, #8]
 8001b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b18:	f7ff fde6 	bl	80016e8 <memset>
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}

08001b20 <__sinit>:
 8001b20:	6983      	ldr	r3, [r0, #24]
 8001b22:	b510      	push	{r4, lr}
 8001b24:	4604      	mov	r4, r0
 8001b26:	bb33      	cbnz	r3, 8001b76 <__sinit+0x56>
 8001b28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b2c:	6503      	str	r3, [r0, #80]	; 0x50
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <__sinit+0x58>)
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <__sinit+0x5c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6282      	str	r2, [r0, #40]	; 0x28
 8001b36:	4298      	cmp	r0, r3
 8001b38:	bf04      	itt	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	6183      	streq	r3, [r0, #24]
 8001b3e:	f000 f81f 	bl	8001b80 <__sfp>
 8001b42:	6060      	str	r0, [r4, #4]
 8001b44:	4620      	mov	r0, r4
 8001b46:	f000 f81b 	bl	8001b80 <__sfp>
 8001b4a:	60a0      	str	r0, [r4, #8]
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f000 f817 	bl	8001b80 <__sfp>
 8001b52:	2200      	movs	r2, #0
 8001b54:	60e0      	str	r0, [r4, #12]
 8001b56:	2104      	movs	r1, #4
 8001b58:	6860      	ldr	r0, [r4, #4]
 8001b5a:	f7ff ffa1 	bl	8001aa0 <std>
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2109      	movs	r1, #9
 8001b62:	68a0      	ldr	r0, [r4, #8]
 8001b64:	f7ff ff9c 	bl	8001aa0 <std>
 8001b68:	2202      	movs	r2, #2
 8001b6a:	2112      	movs	r1, #18
 8001b6c:	68e0      	ldr	r0, [r4, #12]
 8001b6e:	f7ff ff97 	bl	8001aa0 <std>
 8001b72:	2301      	movs	r3, #1
 8001b74:	61a3      	str	r3, [r4, #24]
 8001b76:	bd10      	pop	{r4, pc}
 8001b78:	08002000 	.word	0x08002000
 8001b7c:	08001ae9 	.word	0x08001ae9

08001b80 <__sfp>:
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <__sfp+0x70>)
 8001b84:	681e      	ldr	r6, [r3, #0]
 8001b86:	69b3      	ldr	r3, [r6, #24]
 8001b88:	4607      	mov	r7, r0
 8001b8a:	b913      	cbnz	r3, 8001b92 <__sfp+0x12>
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f7ff ffc7 	bl	8001b20 <__sinit>
 8001b92:	3648      	adds	r6, #72	; 0x48
 8001b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	d503      	bpl.n	8001ba4 <__sfp+0x24>
 8001b9c:	6833      	ldr	r3, [r6, #0]
 8001b9e:	b133      	cbz	r3, 8001bae <__sfp+0x2e>
 8001ba0:	6836      	ldr	r6, [r6, #0]
 8001ba2:	e7f7      	b.n	8001b94 <__sfp+0x14>
 8001ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ba8:	b16d      	cbz	r5, 8001bc6 <__sfp+0x46>
 8001baa:	3468      	adds	r4, #104	; 0x68
 8001bac:	e7f4      	b.n	8001b98 <__sfp+0x18>
 8001bae:	2104      	movs	r1, #4
 8001bb0:	4638      	mov	r0, r7
 8001bb2:	f7ff ff9f 	bl	8001af4 <__sfmoreglue>
 8001bb6:	6030      	str	r0, [r6, #0]
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d1f1      	bne.n	8001ba0 <__sfp+0x20>
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <__sfp+0x74>)
 8001bc8:	6665      	str	r5, [r4, #100]	; 0x64
 8001bca:	e9c4 5500 	strd	r5, r5, [r4]
 8001bce:	60a5      	str	r5, [r4, #8]
 8001bd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001bd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001be0:	f7ff fd82 	bl	80016e8 <memset>
 8001be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001bec:	e7e9      	b.n	8001bc2 <__sfp+0x42>
 8001bee:	bf00      	nop
 8001bf0:	08002000 	.word	0x08002000
 8001bf4:	ffff0001 	.word	0xffff0001

08001bf8 <_fwalk_reent>:
 8001bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	4680      	mov	r8, r0
 8001bfe:	4689      	mov	r9, r1
 8001c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c04:	2600      	movs	r6, #0
 8001c06:	b914      	cbnz	r4, 8001c0e <_fwalk_reent+0x16>
 8001c08:	4630      	mov	r0, r6
 8001c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c12:	3f01      	subs	r7, #1
 8001c14:	d501      	bpl.n	8001c1a <_fwalk_reent+0x22>
 8001c16:	6824      	ldr	r4, [r4, #0]
 8001c18:	e7f5      	b.n	8001c06 <_fwalk_reent+0xe>
 8001c1a:	89ab      	ldrh	r3, [r5, #12]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d907      	bls.n	8001c30 <_fwalk_reent+0x38>
 8001c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c24:	3301      	adds	r3, #1
 8001c26:	d003      	beq.n	8001c30 <_fwalk_reent+0x38>
 8001c28:	4629      	mov	r1, r5
 8001c2a:	4640      	mov	r0, r8
 8001c2c:	47c8      	blx	r9
 8001c2e:	4306      	orrs	r6, r0
 8001c30:	3568      	adds	r5, #104	; 0x68
 8001c32:	e7ee      	b.n	8001c12 <_fwalk_reent+0x1a>

08001c34 <__swhatbuf_r>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	460e      	mov	r6, r1
 8001c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c3c:	2900      	cmp	r1, #0
 8001c3e:	b096      	sub	sp, #88	; 0x58
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	da07      	bge.n	8001c56 <__swhatbuf_r+0x22>
 8001c46:	2300      	movs	r3, #0
 8001c48:	602b      	str	r3, [r5, #0]
 8001c4a:	89b3      	ldrh	r3, [r6, #12]
 8001c4c:	061a      	lsls	r2, r3, #24
 8001c4e:	d410      	bmi.n	8001c72 <__swhatbuf_r+0x3e>
 8001c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c54:	e00e      	b.n	8001c74 <__swhatbuf_r+0x40>
 8001c56:	466a      	mov	r2, sp
 8001c58:	f000 f96e 	bl	8001f38 <_fstat_r>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	dbf2      	blt.n	8001c46 <__swhatbuf_r+0x12>
 8001c60:	9a01      	ldr	r2, [sp, #4]
 8001c62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c6a:	425a      	negs	r2, r3
 8001c6c:	415a      	adcs	r2, r3
 8001c6e:	602a      	str	r2, [r5, #0]
 8001c70:	e7ee      	b.n	8001c50 <__swhatbuf_r+0x1c>
 8001c72:	2340      	movs	r3, #64	; 0x40
 8001c74:	2000      	movs	r0, #0
 8001c76:	6023      	str	r3, [r4, #0]
 8001c78:	b016      	add	sp, #88	; 0x58
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}

08001c7c <__smakebuf_r>:
 8001c7c:	898b      	ldrh	r3, [r1, #12]
 8001c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c80:	079d      	lsls	r5, r3, #30
 8001c82:	4606      	mov	r6, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	d507      	bpl.n	8001c98 <__smakebuf_r+0x1c>
 8001c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c8c:	6023      	str	r3, [r4, #0]
 8001c8e:	6123      	str	r3, [r4, #16]
 8001c90:	2301      	movs	r3, #1
 8001c92:	6163      	str	r3, [r4, #20]
 8001c94:	b002      	add	sp, #8
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	ab01      	add	r3, sp, #4
 8001c9a:	466a      	mov	r2, sp
 8001c9c:	f7ff ffca 	bl	8001c34 <__swhatbuf_r>
 8001ca0:	9900      	ldr	r1, [sp, #0]
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	f000 f877 	bl	8001d98 <_malloc_r>
 8001caa:	b948      	cbnz	r0, 8001cc0 <__smakebuf_r+0x44>
 8001cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cb0:	059a      	lsls	r2, r3, #22
 8001cb2:	d4ef      	bmi.n	8001c94 <__smakebuf_r+0x18>
 8001cb4:	f023 0303 	bic.w	r3, r3, #3
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	81a3      	strh	r3, [r4, #12]
 8001cbe:	e7e3      	b.n	8001c88 <__smakebuf_r+0xc>
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <__smakebuf_r+0x7c>)
 8001cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001cc4:	89a3      	ldrh	r3, [r4, #12]
 8001cc6:	6020      	str	r0, [r4, #0]
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	81a3      	strh	r3, [r4, #12]
 8001cce:	9b00      	ldr	r3, [sp, #0]
 8001cd0:	6163      	str	r3, [r4, #20]
 8001cd2:	9b01      	ldr	r3, [sp, #4]
 8001cd4:	6120      	str	r0, [r4, #16]
 8001cd6:	b15b      	cbz	r3, 8001cf0 <__smakebuf_r+0x74>
 8001cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cdc:	4630      	mov	r0, r6
 8001cde:	f000 f93d 	bl	8001f5c <_isatty_r>
 8001ce2:	b128      	cbz	r0, 8001cf0 <__smakebuf_r+0x74>
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	81a3      	strh	r3, [r4, #12]
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	431d      	orrs	r5, r3
 8001cf4:	81a5      	strh	r5, [r4, #12]
 8001cf6:	e7cd      	b.n	8001c94 <__smakebuf_r+0x18>
 8001cf8:	08001ae9 	.word	0x08001ae9

08001cfc <_free_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4605      	mov	r5, r0
 8001d00:	2900      	cmp	r1, #0
 8001d02:	d045      	beq.n	8001d90 <_free_r+0x94>
 8001d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d08:	1f0c      	subs	r4, r1, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bfb8      	it	lt
 8001d0e:	18e4      	addlt	r4, r4, r3
 8001d10:	f000 f946 	bl	8001fa0 <__malloc_lock>
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <_free_r+0x98>)
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	4610      	mov	r0, r2
 8001d1a:	b933      	cbnz	r3, 8001d2a <_free_r+0x2e>
 8001d1c:	6063      	str	r3, [r4, #4]
 8001d1e:	6014      	str	r4, [r2, #0]
 8001d20:	4628      	mov	r0, r5
 8001d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d26:	f000 b93c 	b.w	8001fa2 <__malloc_unlock>
 8001d2a:	42a3      	cmp	r3, r4
 8001d2c:	d90c      	bls.n	8001d48 <_free_r+0x4c>
 8001d2e:	6821      	ldr	r1, [r4, #0]
 8001d30:	1862      	adds	r2, r4, r1
 8001d32:	4293      	cmp	r3, r2
 8001d34:	bf04      	itt	eq
 8001d36:	681a      	ldreq	r2, [r3, #0]
 8001d38:	685b      	ldreq	r3, [r3, #4]
 8001d3a:	6063      	str	r3, [r4, #4]
 8001d3c:	bf04      	itt	eq
 8001d3e:	1852      	addeq	r2, r2, r1
 8001d40:	6022      	streq	r2, [r4, #0]
 8001d42:	6004      	str	r4, [r0, #0]
 8001d44:	e7ec      	b.n	8001d20 <_free_r+0x24>
 8001d46:	4613      	mov	r3, r2
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	b10a      	cbz	r2, 8001d50 <_free_r+0x54>
 8001d4c:	42a2      	cmp	r2, r4
 8001d4e:	d9fa      	bls.n	8001d46 <_free_r+0x4a>
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	1858      	adds	r0, r3, r1
 8001d54:	42a0      	cmp	r0, r4
 8001d56:	d10b      	bne.n	8001d70 <_free_r+0x74>
 8001d58:	6820      	ldr	r0, [r4, #0]
 8001d5a:	4401      	add	r1, r0
 8001d5c:	1858      	adds	r0, r3, r1
 8001d5e:	4282      	cmp	r2, r0
 8001d60:	6019      	str	r1, [r3, #0]
 8001d62:	d1dd      	bne.n	8001d20 <_free_r+0x24>
 8001d64:	6810      	ldr	r0, [r2, #0]
 8001d66:	6852      	ldr	r2, [r2, #4]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	4401      	add	r1, r0
 8001d6c:	6019      	str	r1, [r3, #0]
 8001d6e:	e7d7      	b.n	8001d20 <_free_r+0x24>
 8001d70:	d902      	bls.n	8001d78 <_free_r+0x7c>
 8001d72:	230c      	movs	r3, #12
 8001d74:	602b      	str	r3, [r5, #0]
 8001d76:	e7d3      	b.n	8001d20 <_free_r+0x24>
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	1821      	adds	r1, r4, r0
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	bf04      	itt	eq
 8001d80:	6811      	ldreq	r1, [r2, #0]
 8001d82:	6852      	ldreq	r2, [r2, #4]
 8001d84:	6062      	str	r2, [r4, #4]
 8001d86:	bf04      	itt	eq
 8001d88:	1809      	addeq	r1, r1, r0
 8001d8a:	6021      	streq	r1, [r4, #0]
 8001d8c:	605c      	str	r4, [r3, #4]
 8001d8e:	e7c7      	b.n	8001d20 <_free_r+0x24>
 8001d90:	bd38      	pop	{r3, r4, r5, pc}
 8001d92:	bf00      	nop
 8001d94:	200000c8 	.word	0x200000c8

08001d98 <_malloc_r>:
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	1ccd      	adds	r5, r1, #3
 8001d9c:	f025 0503 	bic.w	r5, r5, #3
 8001da0:	3508      	adds	r5, #8
 8001da2:	2d0c      	cmp	r5, #12
 8001da4:	bf38      	it	cc
 8001da6:	250c      	movcc	r5, #12
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	4606      	mov	r6, r0
 8001dac:	db01      	blt.n	8001db2 <_malloc_r+0x1a>
 8001dae:	42a9      	cmp	r1, r5
 8001db0:	d903      	bls.n	8001dba <_malloc_r+0x22>
 8001db2:	230c      	movs	r3, #12
 8001db4:	6033      	str	r3, [r6, #0]
 8001db6:	2000      	movs	r0, #0
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
 8001dba:	f000 f8f1 	bl	8001fa0 <__malloc_lock>
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <_malloc_r+0xac>)
 8001dc0:	6814      	ldr	r4, [r2, #0]
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	b991      	cbnz	r1, 8001dec <_malloc_r+0x54>
 8001dc6:	4c20      	ldr	r4, [pc, #128]	; (8001e48 <_malloc_r+0xb0>)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	b91b      	cbnz	r3, 8001dd4 <_malloc_r+0x3c>
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f000 f83d 	bl	8001e4c <_sbrk_r>
 8001dd2:	6020      	str	r0, [r4, #0]
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f000 f838 	bl	8001e4c <_sbrk_r>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d124      	bne.n	8001e2a <_malloc_r+0x92>
 8001de0:	230c      	movs	r3, #12
 8001de2:	6033      	str	r3, [r6, #0]
 8001de4:	4630      	mov	r0, r6
 8001de6:	f000 f8dc 	bl	8001fa2 <__malloc_unlock>
 8001dea:	e7e4      	b.n	8001db6 <_malloc_r+0x1e>
 8001dec:	680b      	ldr	r3, [r1, #0]
 8001dee:	1b5b      	subs	r3, r3, r5
 8001df0:	d418      	bmi.n	8001e24 <_malloc_r+0x8c>
 8001df2:	2b0b      	cmp	r3, #11
 8001df4:	d90f      	bls.n	8001e16 <_malloc_r+0x7e>
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	50cd      	str	r5, [r1, r3]
 8001dfa:	18cc      	adds	r4, r1, r3
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f000 f8d0 	bl	8001fa2 <__malloc_unlock>
 8001e02:	f104 000b 	add.w	r0, r4, #11
 8001e06:	1d23      	adds	r3, r4, #4
 8001e08:	f020 0007 	bic.w	r0, r0, #7
 8001e0c:	1ac3      	subs	r3, r0, r3
 8001e0e:	d0d3      	beq.n	8001db8 <_malloc_r+0x20>
 8001e10:	425a      	negs	r2, r3
 8001e12:	50e2      	str	r2, [r4, r3]
 8001e14:	e7d0      	b.n	8001db8 <_malloc_r+0x20>
 8001e16:	428c      	cmp	r4, r1
 8001e18:	684b      	ldr	r3, [r1, #4]
 8001e1a:	bf16      	itet	ne
 8001e1c:	6063      	strne	r3, [r4, #4]
 8001e1e:	6013      	streq	r3, [r2, #0]
 8001e20:	460c      	movne	r4, r1
 8001e22:	e7eb      	b.n	8001dfc <_malloc_r+0x64>
 8001e24:	460c      	mov	r4, r1
 8001e26:	6849      	ldr	r1, [r1, #4]
 8001e28:	e7cc      	b.n	8001dc4 <_malloc_r+0x2c>
 8001e2a:	1cc4      	adds	r4, r0, #3
 8001e2c:	f024 0403 	bic.w	r4, r4, #3
 8001e30:	42a0      	cmp	r0, r4
 8001e32:	d005      	beq.n	8001e40 <_malloc_r+0xa8>
 8001e34:	1a21      	subs	r1, r4, r0
 8001e36:	4630      	mov	r0, r6
 8001e38:	f000 f808 	bl	8001e4c <_sbrk_r>
 8001e3c:	3001      	adds	r0, #1
 8001e3e:	d0cf      	beq.n	8001de0 <_malloc_r+0x48>
 8001e40:	6025      	str	r5, [r4, #0]
 8001e42:	e7db      	b.n	8001dfc <_malloc_r+0x64>
 8001e44:	200000c8 	.word	0x200000c8
 8001e48:	200000cc 	.word	0x200000cc

08001e4c <_sbrk_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4c06      	ldr	r4, [pc, #24]	; (8001e68 <_sbrk_r+0x1c>)
 8001e50:	2300      	movs	r3, #0
 8001e52:	4605      	mov	r5, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	6023      	str	r3, [r4, #0]
 8001e58:	f7ff fbf0 	bl	800163c <_sbrk>
 8001e5c:	1c43      	adds	r3, r0, #1
 8001e5e:	d102      	bne.n	8001e66 <_sbrk_r+0x1a>
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	b103      	cbz	r3, 8001e66 <_sbrk_r+0x1a>
 8001e64:	602b      	str	r3, [r5, #0]
 8001e66:	bd38      	pop	{r3, r4, r5, pc}
 8001e68:	20000114 	.word	0x20000114

08001e6c <__sread>:
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	460c      	mov	r4, r1
 8001e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e74:	f000 f896 	bl	8001fa4 <_read_r>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	bfab      	itete	ge
 8001e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8001e80:	181b      	addge	r3, r3, r0
 8001e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e86:	bfac      	ite	ge
 8001e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e8a:	81a3      	strhlt	r3, [r4, #12]
 8001e8c:	bd10      	pop	{r4, pc}

08001e8e <__swrite>:
 8001e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e92:	461f      	mov	r7, r3
 8001e94:	898b      	ldrh	r3, [r1, #12]
 8001e96:	05db      	lsls	r3, r3, #23
 8001e98:	4605      	mov	r5, r0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	4616      	mov	r6, r2
 8001e9e:	d505      	bpl.n	8001eac <__swrite+0x1e>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea8:	f000 f868 	bl	8001f7c <_lseek_r>
 8001eac:	89a3      	ldrh	r3, [r4, #12]
 8001eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eb6:	81a3      	strh	r3, [r4, #12]
 8001eb8:	4632      	mov	r2, r6
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec2:	f000 b817 	b.w	8001ef4 <_write_r>

08001ec6 <__sseek>:
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	460c      	mov	r4, r1
 8001eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ece:	f000 f855 	bl	8001f7c <_lseek_r>
 8001ed2:	1c43      	adds	r3, r0, #1
 8001ed4:	89a3      	ldrh	r3, [r4, #12]
 8001ed6:	bf15      	itete	ne
 8001ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ee2:	81a3      	strheq	r3, [r4, #12]
 8001ee4:	bf18      	it	ne
 8001ee6:	81a3      	strhne	r3, [r4, #12]
 8001ee8:	bd10      	pop	{r4, pc}

08001eea <__sclose>:
 8001eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eee:	f000 b813 	b.w	8001f18 <_close_r>
	...

08001ef4 <_write_r>:
 8001ef4:	b538      	push	{r3, r4, r5, lr}
 8001ef6:	4c07      	ldr	r4, [pc, #28]	; (8001f14 <_write_r+0x20>)
 8001ef8:	4605      	mov	r5, r0
 8001efa:	4608      	mov	r0, r1
 8001efc:	4611      	mov	r1, r2
 8001efe:	2200      	movs	r2, #0
 8001f00:	6022      	str	r2, [r4, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f7ff fb23 	bl	800154e <_write>
 8001f08:	1c43      	adds	r3, r0, #1
 8001f0a:	d102      	bne.n	8001f12 <_write_r+0x1e>
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	b103      	cbz	r3, 8001f12 <_write_r+0x1e>
 8001f10:	602b      	str	r3, [r5, #0]
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
 8001f14:	20000114 	.word	0x20000114

08001f18 <_close_r>:
 8001f18:	b538      	push	{r3, r4, r5, lr}
 8001f1a:	4c06      	ldr	r4, [pc, #24]	; (8001f34 <_close_r+0x1c>)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	4605      	mov	r5, r0
 8001f20:	4608      	mov	r0, r1
 8001f22:	6023      	str	r3, [r4, #0]
 8001f24:	f7ff fb2f 	bl	8001586 <_close>
 8001f28:	1c43      	adds	r3, r0, #1
 8001f2a:	d102      	bne.n	8001f32 <_close_r+0x1a>
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	b103      	cbz	r3, 8001f32 <_close_r+0x1a>
 8001f30:	602b      	str	r3, [r5, #0]
 8001f32:	bd38      	pop	{r3, r4, r5, pc}
 8001f34:	20000114 	.word	0x20000114

08001f38 <_fstat_r>:
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	4c07      	ldr	r4, [pc, #28]	; (8001f58 <_fstat_r+0x20>)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4605      	mov	r5, r0
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	6023      	str	r3, [r4, #0]
 8001f46:	f7ff fb29 	bl	800159c <_fstat>
 8001f4a:	1c43      	adds	r3, r0, #1
 8001f4c:	d102      	bne.n	8001f54 <_fstat_r+0x1c>
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	b103      	cbz	r3, 8001f54 <_fstat_r+0x1c>
 8001f52:	602b      	str	r3, [r5, #0]
 8001f54:	bd38      	pop	{r3, r4, r5, pc}
 8001f56:	bf00      	nop
 8001f58:	20000114 	.word	0x20000114

08001f5c <_isatty_r>:
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4c06      	ldr	r4, [pc, #24]	; (8001f78 <_isatty_r+0x1c>)
 8001f60:	2300      	movs	r3, #0
 8001f62:	4605      	mov	r5, r0
 8001f64:	4608      	mov	r0, r1
 8001f66:	6023      	str	r3, [r4, #0]
 8001f68:	f7ff fb27 	bl	80015ba <_isatty>
 8001f6c:	1c43      	adds	r3, r0, #1
 8001f6e:	d102      	bne.n	8001f76 <_isatty_r+0x1a>
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	b103      	cbz	r3, 8001f76 <_isatty_r+0x1a>
 8001f74:	602b      	str	r3, [r5, #0]
 8001f76:	bd38      	pop	{r3, r4, r5, pc}
 8001f78:	20000114 	.word	0x20000114

08001f7c <_lseek_r>:
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	4c07      	ldr	r4, [pc, #28]	; (8001f9c <_lseek_r+0x20>)
 8001f80:	4605      	mov	r5, r0
 8001f82:	4608      	mov	r0, r1
 8001f84:	4611      	mov	r1, r2
 8001f86:	2200      	movs	r2, #0
 8001f88:	6022      	str	r2, [r4, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f7ff fb1f 	bl	80015ce <_lseek>
 8001f90:	1c43      	adds	r3, r0, #1
 8001f92:	d102      	bne.n	8001f9a <_lseek_r+0x1e>
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	b103      	cbz	r3, 8001f9a <_lseek_r+0x1e>
 8001f98:	602b      	str	r3, [r5, #0]
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}
 8001f9c:	20000114 	.word	0x20000114

08001fa0 <__malloc_lock>:
 8001fa0:	4770      	bx	lr

08001fa2 <__malloc_unlock>:
 8001fa2:	4770      	bx	lr

08001fa4 <_read_r>:
 8001fa4:	b538      	push	{r3, r4, r5, lr}
 8001fa6:	4c07      	ldr	r4, [pc, #28]	; (8001fc4 <_read_r+0x20>)
 8001fa8:	4605      	mov	r5, r0
 8001faa:	4608      	mov	r0, r1
 8001fac:	4611      	mov	r1, r2
 8001fae:	2200      	movs	r2, #0
 8001fb0:	6022      	str	r2, [r4, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f7ff faae 	bl	8001514 <_read>
 8001fb8:	1c43      	adds	r3, r0, #1
 8001fba:	d102      	bne.n	8001fc2 <_read_r+0x1e>
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	b103      	cbz	r3, 8001fc2 <_read_r+0x1e>
 8001fc0:	602b      	str	r3, [r5, #0]
 8001fc2:	bd38      	pop	{r3, r4, r5, pc}
 8001fc4:	20000114 	.word	0x20000114

08001fc8 <_init>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	bf00      	nop
 8001fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fce:	bc08      	pop	{r3}
 8001fd0:	469e      	mov	lr, r3
 8001fd2:	4770      	bx	lr

08001fd4 <_fini>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	bf00      	nop
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr
